{"file_contents":{"README.md":{"content":"# SOC Dashboard - Security Operations Center\n\nA comprehensive, real-time Security Operations Center (SOC) dashboard for cybersecurity monitoring, incident management, and threat analysis. Built with modern web technologies and featuring enterprise-grade authentication, real-time updates, and advanced analytics.\n\n![SOC Dashboard](https://img.shields.io/badge/Status-Active-brightgreen) ![Version](https://img.shields.io/badge/Version-1.0.0-blue) ![License](https://img.shields.io/badge/License-MIT-green)\n\n## 🚀 Features\n\n### Core Security Operations\n- **Real-time Alert Management** - Live monitoring and processing of security alerts from multiple sources\n- **Incident Response** - Streamlined incident tracking, assignment, and resolution workflows\n- **Threat Analytics** - Advanced threat correlation and intelligence integration\n- **Source Integration** - Support for SIEM, EDR, Firewall, and other security tools\n- **Dashboard Analytics** - Comprehensive performance metrics and automated reporting\n\n### Technical Features\n- **Real-time Communication** - WebSocket-based live updates and notifications\n- **Authentication System** - Secure OAuth 2.0/OIDC integration with Replit\n- **Role-based Access** - Analyst and admin user roles with appropriate permissions\n- **Modern UI/UX** - Dark-themed interface optimized for SOC environments\n- **Responsive Design** - Mobile-first approach with cross-device compatibility\n- **Type Safety** - Full TypeScript implementation with end-to-end type safety\n\n## 🏗️ System Architecture\n\n### Frontend Stack\n- **React 18** - Modern React with hooks and concurrent features\n- **TypeScript** - End-to-end type safety and developer experience\n- **Radix UI + shadcn/ui** - Accessible, customizable component system\n- **Tailwind CSS** - Utility-first styling with custom SOC-optimized dark theme\n- **TanStack React Query** - Server state management with caching and synchronization\n- **Wouter** - Lightweight client-side routing (alternative to React Router)\n- **React Hook Form + Zod** - Type-safe form handling with validation\n- **Lucide React** - Modern icon library\n- **Framer Motion** - Animation library for enhanced UX\n- **WebSocket Client** - Real-time communication with automatic reconnection\n\n### Backend Stack\n- **Node.js + Express.js** - Server runtime with TypeScript\n- **Drizzle ORM** - Type-safe database operations with PostgreSQL\n- **Kafka.js** - Enterprise-grade event streaming and message processing\n- **WebSocket (ws)** - Real-time bidirectional communication\n- **Passport.js** - Authentication middleware with OpenID Connect\n- **bcryptjs** - Password hashing for local authentication\n- **Zod** - Runtime type validation and schema definition\n- **Express Session** - Session management with PostgreSQL storage\n\n### Database & Storage\n- **PostgreSQL** - Primary database with ACID compliance\n- **Drizzle ORM** - Schema management and migrations\n- **connect-pg-simple** - PostgreSQL session store\n- **Database Design**:\n  - User management and authentication\n  - Security event storage (raw and normalized)\n  - OCSF (Open Cybersecurity Schema Framework) compliance\n  - Incident management and response tracking\n  - Machine learning feature vectors and model metrics\n\n### Event Streaming & Processing\n- **Apache Kafka** - Distributed event streaming platform\n- **OCSF Integration** - Open Cybersecurity Schema Framework compliance\n- **Dual Format Support** - Custom SecurityEvent and standardized OCSF formats\n- **Real-time Processing** - Live event transformation and routing\n- **Topic Management** - Organized event streams by type and source\n\n### Security & Compliance\n- **OCSF Schema Framework** - Industry-standard cybersecurity event format\n- **OAuth 2.0/OIDC** - Secure authentication via Replit\n- **Session Security** - HTTP-only cookies with secure flags\n- **Input Validation** - Zod schemas for runtime type checking\n- **CORS Protection** - Cross-origin request security\n\n## 🔐 Authentication System\n\nThe application uses **Replit OAuth 2.0/OIDC** for secure authentication:\n\n### Features\n- **Single Sign-On (SSO)** through Replit accounts\n- **Session Management** with PostgreSQL-backed storage\n- **Token Refresh** automatic renewal of expired tokens\n- **Protected Routes** middleware-based API protection\n- **Role-based Access** user roles and permissions\n\n### Authentication Flow\n1. User clicks \"Sign In\" on landing page\n2. Redirected to Replit OAuth authorization\n3. User authorizes the application\n4. Callback processes tokens and creates session\n5. User redirected to dashboard with authenticated session\n\n### Protected Endpoints\n- `GET /api/auth/user` - Get current user information\n- `GET /api/incidents` - Incident management (requires authentication)\n- `GET /api/sources` - Security sources configuration\n- `POST /api/alerts` - Alert processing endpoints\n\n## 🚀 Quick Start\n\n### Prerequisites\n- **Node.js** 18+ \n- **PostgreSQL** database\n- **Replit** account for authentication\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd soc-dashboard\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   \n   Required environment variables (add to Replit Secrets):\n   ```\n   DATABASE_URL=postgresql://user:password@host:port/database\n   SESSION_SECRET=your-secure-session-secret\n   REPL_ID=your-replit-app-id\n   REPLIT_DOMAINS=your-replit-domain.replit.app\n   ```\n\n4. **Set up the database**\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n6. **Access the application**\n   - Open your browser to the Replit preview URL\n   - Sign in with your Replit account\n\n## 🗄️ Database Schema\n\n### Core Tables\n\n#### Authentication & User Management\n- **users** - User accounts and profile information\n- **sessions** - PostgreSQL-backed authentication sessions\n\n#### Security Event Storage\n- **sources** - Security tool configurations (SIEM, EDR, Firewall, etc.)\n- **raw_alerts** - Unprocessed incoming security events from sources\n- **normalized_alerts** - Processed and standardized security alerts\n- **enhanced_normalized_alerts** - Extended alerts with OCSF correlation\n- **ocsf_events** - OCSF-compliant security events for compliance\n\n#### Incident Management\n- **incidents** - Security incident tracking and management\n- **actions** - Response actions and audit trail\n- **feedback** - Analyst feedback for continuous improvement\n\n#### Machine Learning & Analytics\n- **feature_vectors** - ML features extracted from security events\n- **model_metrics** - Performance tracking for ML models\n\n### OCSF Schema Integration\n\nThe system implements full **OCSF (Open Cybersecurity Schema Framework)** compliance:\n\n#### OCSF Event Classes Supported\n- **Class 1001** - System Activity (Process, File, Registry events)\n- **Class 2001** - Security Finding (Vulnerability, Threat detections)\n- **Class 3002** - Authentication (Login, Logout, Access events)\n- **Class 4001** - Network Activity (Connection, Traffic events)\n\n#### OCSF Storage Schema\n```sql\nCREATE TABLE ocsf_events (\n  id UUID PRIMARY KEY,\n  class_uid INTEGER NOT NULL,        -- OCSF class identifier\n  class_name VARCHAR(255) NOT NULL,  -- Human-readable class name\n  category_uid INTEGER NOT NULL,     -- OCSF category\n  category_name VARCHAR(255),        -- Category description\n  activity_id INTEGER NOT NULL,      -- Specific activity type\n  activity_name VARCHAR(255),        -- Activity description\n  severity_id INTEGER NOT NULL,      -- Numeric severity (0-5)\n  severity VARCHAR(50),              -- Severity label\n  time TIMESTAMP NOT NULL,           -- Event timestamp\n  message TEXT,                      -- Event description\n  raw_data JSONB NOT NULL,          -- Full OCSF event data\n  observables TEXT,                  -- IOCs and artifacts\n  created_at TIMESTAMP DEFAULT NOW(),\n  INDEX (class_uid, time),           -- Performance optimization\n  INDEX (severity_id, time),         -- Severity-based queries\n  INDEX (category_uid)               -- Category filtering\n);\n```\n\n### Schema Management\n```bash\n# Push schema changes to database\nnpm run db:push\n\n# Generate schema migrations\nnpm run db:generate\n\n# View database in Drizzle Studio\nnpm run db:studio\n\n# Reset database (development only)\nnpm run db:reset\n```\n\n## 🔧 Development\n\n### Development Workflow\n```bash\n# Start development server with hot reload\nnpm run dev\n\n# Type checking\nnpm run type-check\n\n# Build for production\nnpm run build\n\n# Preview production build\nnpm run preview\n```\n\n### Project Structure\n```\n├── client/                     # Frontend React application\n│   ├── src/\n│   │   ├── components/         # Reusable UI components\n│   │   │   ├── ui/            # shadcn/ui base components\n│   │   │   ├── dashboard/     # Dashboard-specific components\n│   │   │   ├── alerts/        # Alert management components\n│   │   │   └── incidents/     # Incident response components\n│   │   ├── pages/             # Page components and routes\n│   │   │   ├── dashboard.tsx  # Main SOC dashboard\n│   │   │   ├── alerts.tsx     # Alert management page\n│   │   │   ├── incidents.tsx  # Incident tracking page\n│   │   │   ├── sources.tsx    # Source configuration\n│   │   │   ├── login.tsx      # Authentication page\n│   │   │   └── register.tsx   # User registration\n│   │   ├── hooks/             # Custom React hooks\n│   │   │   ├── useAuth.ts     # Authentication hook\n│   │   │   ├── useWebSocket.ts # WebSocket connection\n│   │   │   └── use-toast.ts   # Toast notifications\n│   │   ├── lib/               # Utility functions\n│   │   │   ├── queryClient.ts # TanStack Query configuration\n│   │   │   ├── authUtils.ts   # Authentication utilities\n│   │   │   └── websocket.ts   # WebSocket client\n│   │   └── App.tsx            # Main application component\n├── server/                     # Backend Express application\n│   ├── db.ts                  # Database connection (Drizzle + Neon)\n│   ├── routes.ts              # Main API route definitions\n│   ├── storage.ts             # Data access layer (IStorage interface)\n│   ├── replitAuth.ts          # Replit OAuth configuration\n│   ├── kafka.ts               # Kafka event streaming service\n│   ├── ocsf.ts                # OCSF schema and transformation\n│   ├── websocket.ts           # WebSocket server implementation\n│   ├── vite.ts                # Vite middleware for development\n│   └── index.ts               # Server entry point\n├── shared/                     # Shared TypeScript definitions\n│   └── schema.ts              # Database schema and Zod validation\n├── drizzle.config.ts          # Drizzle ORM configuration\n├── vite.config.ts             # Vite build configuration\n├── tailwind.config.ts         # Tailwind CSS configuration\n└── package.json               # Dependencies and scripts\n```\n\n### Code Quality\n- **TypeScript** for type safety across frontend and backend\n- **ESLint** for code linting and consistency\n- **Path aliases** (@, @shared) for clean imports\n- **Strict mode** enabled for enhanced type checking\n\n## 🔌 Complete API Reference\n\n### Authentication Endpoints\n\n#### OAuth 2.0/OIDC Flow\n```http\nGET /api/login              # Initiate OAuth login flow\nGET /api/logout             # End user session and logout  \nGET /api/callback           # OAuth callback handler\nGET /api/auth/user          # Get current authenticated user\n```\n\n**Example Response** - `GET /api/auth/user`:\n```json\n{\n  \"id\": \"user-uuid\",\n  \"email\": \"analyst@company.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"role\": \"analyst\",\n  \"createdAt\": \"2024-01-01T00:00:00Z\"\n}\n```\n\n### Dashboard & Analytics\n\n```http\nGET /api/dashboard/stats    # Dashboard statistics and KPIs\nGET /api/dashboard/metrics  # Real-time security metrics\nGET /api/dashboard/trends   # Historical trend analysis\n```\n\n**Example** - `GET /api/dashboard/stats`:\n```json\n{\n  \"totalAlerts\": 1247,\n  \"criticalAlerts\": 23,\n  \"openIncidents\": 8,\n  \"avgResponseTime\": \"4.2 minutes\",\n  \"sourceStatus\": {\n    \"online\": 12,\n    \"offline\": 1,\n    \"degraded\": 0\n  }\n}\n```\n\n### Security Event Ingestion\n\n#### Custom Format Ingestion\n```http\nPOST /api/events/siem       # Ingest SIEM alerts\nPOST /api/events/edr        # Ingest EDR events\nPOST /api/events/firewall   # Ingest firewall alerts\nPOST /api/events/generic    # Generic security events\n```\n\n**Example** - `POST /api/events/siem`:\n```json\n{\n  \"id\": \"siem-2024-001\",\n  \"timestamp\": \"2024-01-15T14:30:00Z\",\n  \"source\": \"Splunk-SIEM\",\n  \"severity\": \"high\",\n  \"type\": \"intrusion\",\n  \"title\": \"Suspicious Network Activity Detected\",\n  \"description\": \"Multiple failed login attempts from external IP\",\n  \"metadata\": {\n    \"source_ip\": \"192.168.1.100\",\n    \"destination_ip\": \"10.0.1.50\",\n    \"user\": \"john.smith\",\n    \"rule_id\": \"SIEM-LOGIN-001\"\n  },\n  \"raw_data\": {\n    \"protocol\": \"SSH\",\n    \"attempts\": 15,\n    \"time_window\": \"5 minutes\"\n  }\n}\n```\n\n### OCSF (Open Cybersecurity Schema Framework) API\n\n#### OCSF Event Ingestion\n```http\nPOST /api/ocsf/events                    # Generic OCSF event ingestion\nPOST /api/ocsf/events/bulk              # Bulk OCSF event ingestion\nPOST /api/ocsf/network-activity         # Network Activity (Class 4001)\nPOST /api/ocsf/system-activity          # System Activity (Class 1001) \nPOST /api/ocsf/security-finding         # Security Finding (Class 2001)\nPOST /api/ocsf/authentication           # Authentication (Class 3002)\n```\n\n#### OCSF Event Retrieval\n```http\nGET /api/ocsf/events                     # List OCSF events with filtering\nGET /api/ocsf/events/:id                 # Get specific OCSF event\nGET /api/ocsf/events/class/:class_uid    # Get events by OCSF class\nGET /api/ocsf/validate                   # Validate OCSF event structure\n```\n\n**Example** - `POST /api/ocsf/network-activity`:\n```json\n{\n  \"activity_id\": 2,\n  \"activity_name\": \"Denied\",\n  \"category_name\": \"Network Activity\",\n  \"category_uid\": 4,\n  \"class_name\": \"Network Activity\",\n  \"class_uid\": 4001,\n  \"message\": \"Network connection blocked by firewall\",\n  \"metadata\": {\n    \"logged_time\": 1705329000000,\n    \"product\": {\n      \"name\": \"Palo Alto Firewall\",\n      \"vendor_name\": \"Palo Alto Networks\",\n      \"version\": \"10.2.0\"\n    },\n    \"version\": \"1.1.0\"\n  },\n  \"severity\": \"Medium\",\n  \"severity_id\": 3,\n  \"time\": 1705329000000,\n  \"type_name\": \"Network Activity: Denied\",\n  \"type_uid\": 400102,\n  \"src_endpoint\": {\n    \"ip\": \"192.168.1.100\",\n    \"hostname\": \"workstation-01\"\n  },\n  \"dst_endpoint\": {\n    \"ip\": \"203.0.113.15\",\n    \"port\": 443\n  },\n  \"connection_info\": {\n    \"protocol_name\": \"HTTPS\",\n    \"direction\": \"Outbound\"\n  },\n  \"disposition\": \"Blocked\",\n  \"disposition_id\": 2\n}\n```\n\n### Legacy to OCSF Transformation\n```http\nPOST /api/ocsf/transform/siem           # Transform SIEM event to OCSF\nPOST /api/ocsf/transform/edr            # Transform EDR event to OCSF  \nPOST /api/ocsf/transform/firewall       # Transform firewall event to OCSF\n```\n\n### Alert & Incident Management\n\n#### Alerts\n```http\nGET /api/alerts                         # List security alerts with filtering\nGET /api/alerts/:id                     # Get specific alert details\nPUT /api/alerts/:id/status              # Update alert status\nPOST /api/alerts/:id/acknowledge        # Acknowledge alert\nPOST /api/alerts/:id/escalate           # Escalate to incident\n```\n\n**Query Parameters** - `GET /api/alerts`:\n```\n?severity=high,critical     # Filter by severity\n&status=open               # Filter by status  \n&source=firewall           # Filter by source type\n&from=2024-01-01           # Date range start\n&to=2024-01-31             # Date range end\n&limit=50                  # Pagination limit\n&offset=0                  # Pagination offset\n```\n\n#### Incidents\n```http\nGET /api/incidents                      # List security incidents\nPOST /api/incidents                     # Create new incident\nGET /api/incidents/:id                  # Get incident details\nPUT /api/incidents/:id                  # Update incident\nPOST /api/incidents/:id/assign          # Assign incident to analyst\nPOST /api/incidents/:id/close           # Close incident\nGET /api/incidents/:id/timeline         # Get incident timeline\n```\n\n### Source Management\n\n```http\nGET /api/sources                        # List configured security sources\nPOST /api/sources                       # Add new security source\nGET /api/sources/:id                    # Get source configuration\nPUT /api/sources/:id                    # Update source configuration\nDELETE /api/sources/:id                 # Remove security source\nGET /api/sources/:id/health             # Check source health status\n```\n\n**Example** - `POST /api/sources`:\n```json\n{\n  \"name\": \"Primary Firewall\",\n  \"type\": \"firewall\",\n  \"vendor\": \"Palo Alto Networks\",\n  \"config\": {\n    \"host\": \"firewall.company.com\",\n    \"port\": 514,\n    \"protocol\": \"syslog\",\n    \"api_key\": \"encrypted-key\"\n  },\n  \"enabled\": true\n}\n```\n\n### Machine Learning Integration\n\n```http\nPOST /api/ml/analyze                    # Analyze event with ML models\nGET /api/ml/models                      # List available ML models\nPOST /api/ml/feedback                   # Submit analyst feedback\nGET /api/ml/metrics                     # Get model performance metrics\n```\n\n### WebSocket Real-time API\n\n**Connection**: `ws://your-domain/ws`\n\n#### Client Events (Send to Server)\n```json\n{\"type\": \"subscribe\", \"channel\": \"alerts\"}     # Subscribe to alerts\n{\"type\": \"subscribe\", \"channel\": \"incidents\"}  # Subscribe to incidents\n{\"type\": \"heartbeat\"}                          # Keep connection alive\n```\n\n#### Server Events (Received from Server)\n```json\n{\"type\": \"security_event\", \"data\": {...}}      # New security event\n{\"type\": \"incident_update\", \"data\": {...}}     # Incident status change\n{\"type\": \"system_status\", \"data\": {...}}       # System health update\n{\"type\": \"connection_status\", \"status\": \"connected\"} # Connection status\n```\n\n### Error Handling\n\nAll endpoints return consistent error format:\n```json\n{\n  \"error\": \"ValidationError\",\n  \"message\": \"Invalid event format\",\n  \"details\": {\n    \"field\": \"timestamp\",\n    \"reason\": \"Invalid date format\"\n  },\n  \"timestamp\": \"2024-01-15T14:30:00Z\"\n}\n```\n\n**HTTP Status Codes**:\n- `200` - Success\n- `201` - Created successfully\n- `400` - Bad request / validation error\n- `401` - Unauthorized / authentication required\n- `403` - Forbidden / insufficient permissions\n- `404` - Resource not found\n- `422` - Unprocessable entity / business logic error\n- `500` - Internal server error\n\n## 🌟 Features in Detail\n\n### Real-time Monitoring\n- Live alert feed with automatic updates\n- Connection status indicators\n- Toast notifications for critical events\n- Automatic reconnection handling\n\n### Incident Management\n- Create, assign, and track security incidents\n- Severity classification and prioritization\n- Response workflow automation\n- Timeline tracking and audit logs\n\n### Analytics Dashboard\n- Security metrics and KPIs\n- Threat trend analysis\n- Performance dashboards\n- Automated reporting\n\n### Source Integration\n- SIEM integration (Splunk, QRadar, etc.)\n- EDR tool connectivity\n- Firewall and network security tools\n- Custom source configuration\n\n## 🤝 Contributing\n\n1. **Fork the repository**\n2. **Create a feature branch** (`git checkout -b feature/new-feature`)\n3. **Commit your changes** (`git commit -am 'Add new feature'`)\n4. **Push to the branch** (`git push origin feature/new-feature`)\n5. **Create a Pull Request**\n\n### Development Guidelines\n- Follow TypeScript best practices\n- Use existing component patterns\n- Maintain consistent code style\n- Add tests for new functionality\n- Update documentation as needed\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🆘 Support\n\nFor support and questions:\n- Create an issue in the repository\n- Contact the development team\n- Check the documentation and troubleshooting guides\n\n## 🔧 Troubleshooting\n\n### Common Issues\n\n**Authentication not working:**\n- Verify `SESSION_SECRET` is set in environment variables\n- Check `REPL_ID` and `REPLIT_DOMAINS` configuration\n- Ensure database connection is established\n\n**Database connection errors:**\n- Verify `DATABASE_URL` is correctly formatted\n- Run `npm run db:push` to ensure schema is up to date\n- Check PostgreSQL service is running\n\n**Real-time updates not working:**\n- Verify WebSocket connection in browser network tab\n- Check for firewall or proxy blocking WebSocket connections\n- Restart the development server\n\n**Build errors:**\n- Run `npm run type-check` to identify TypeScript issues\n- Clear node_modules and reinstall dependencies\n- Check for syntax errors in recent changes\n\n## 🤖 AI/ML Integration Architecture\n\n### Machine Learning Pipeline\n\nThe SOC Dashboard is designed for seamless AI/ML model integration with a comprehensive pipeline for threat detection and analysis:\n\n#### 1. Feature Engineering\n```typescript\ninterface FeatureVector {\n  id: string;\n  alertId: string;\n  features: Record<string, number>;  // Normalized feature values\n  timestamp: Date;\n  modelVersion: string;\n}\n```\n\n**Supported Features**:\n- **Network Features**: IP reputation, geolocation, traffic patterns\n- **Behavioral Features**: User activity patterns, access anomalies\n- **Temporal Features**: Time-based patterns, frequency analysis\n- **Content Features**: File hashes, email content, URL analysis\n- **Contextual Features**: Historical data, threat intelligence correlation\n\n#### 2. Model Integration Patterns\n\n##### Real-time Model Inference\n```javascript\n// Example: Integrate custom ML model\nclass MLModelIntegration {\n  async analyzeSecurityEvent(event) {\n    // Extract features\n    const features = await this.extractFeatures(event);\n    \n    // Call ML model API\n    const prediction = await fetch('/ml/api/predict', {\n      method: 'POST',\n      body: JSON.stringify({ features }),\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n    // Store results\n    await storage.storeMLPrediction({\n      alertId: event.id,\n      prediction: prediction.confidence,\n      modelId: 'threat-classifier-v2',\n      features\n    });\n    \n    return prediction;\n  }\n}\n```\n\n##### Batch Processing Pipeline\n```javascript\n// Process alerts in batches for training data\nexport async function generateTrainingData() {\n  const alerts = await storage.getAlertsForTraining();\n  const trainingData = [];\n  \n  for (const alert of alerts) {\n    const features = await extractMLFeatures(alert);\n    const label = alert.analystFeedback?.isThreat ? 1 : 0;\n    \n    trainingData.push({\n      features,\n      label,\n      metadata: {\n        alertId: alert.id,\n        timestamp: alert.timestamp,\n        sourceType: alert.source\n      }\n    });\n  }\n  \n  return trainingData;\n}\n```\n\n#### 3. Supported ML Frameworks & APIs\n\n##### Cloud ML Services Integration\n```javascript\n// AWS SageMaker Integration\nconst sagemakerConfig = {\n  endpoint: process.env.SAGEMAKER_ENDPOINT,\n  region: 'us-east-1',\n  modelName: 'cybersecurity-threat-detection'\n};\n\n// Azure ML Integration\nconst azureMLConfig = {\n  endpoint: process.env.AZURE_ML_ENDPOINT,\n  apiKey: process.env.AZURE_ML_API_KEY,\n  modelName: 'anomaly-detector-v3'\n};\n\n// Google Vertex AI Integration\nconst vertexAIConfig = {\n  projectId: process.env.GOOGLE_PROJECT_ID,\n  location: 'us-central1',\n  modelId: 'security-classifier'\n};\n```\n\n##### On-Premise Model Integration\n```javascript\n// TensorFlow Serving Integration\nconst tensorflowConfig = {\n  modelServerUrl: 'http://tensorflow-serving:8501',\n  modelName: 'threat_detection_model',\n  version: 'latest'\n};\n\n// Custom Model API Integration\nconst customModelConfig = {\n  endpoint: process.env.CUSTOM_MODEL_ENDPOINT,\n  authToken: process.env.MODEL_API_TOKEN,\n  timeout: 5000\n};\n```\n\n#### 4. Model Performance Monitoring\n\n**Database Schema for Model Metrics**:\n```sql\nCREATE TABLE model_metrics (\n  id UUID PRIMARY KEY,\n  model_id VARCHAR(255) NOT NULL,\n  model_version VARCHAR(50) NOT NULL,\n  metric_type VARCHAR(50) NOT NULL,    -- 'accuracy', 'precision', 'recall', 'f1'\n  metric_value DECIMAL(5,4) NOT NULL,\n  evaluation_date TIMESTAMP NOT NULL,\n  dataset_size INTEGER,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n**Performance Tracking API**:\n```javascript\n// Track model performance\nPOST /api/ml/metrics\n{\n  \"modelId\": \"threat-detector-v2\",\n  \"modelVersion\": \"2.1.0\",\n  \"metrics\": {\n    \"accuracy\": 0.9234,\n    \"precision\": 0.8876,\n    \"recall\": 0.9456,\n    \"f1_score\": 0.9156\n  },\n  \"evaluationDataset\": \"test-set-2024-01\",\n  \"sampleSize\": 10000\n}\n```\n\n#### 5. Feature Store Implementation\n\n```javascript\n// Feature extraction for different event types\nclass FeatureExtractor {\n  \n  // Network-based features\n  extractNetworkFeatures(event) {\n    return {\n      src_ip_reputation: this.getIPReputation(event.metadata.source_ip),\n      dst_ip_geolocation: this.getGeolocation(event.metadata.destination_ip),\n      connection_frequency: this.getConnectionFrequency(event),\n      port_risk_score: this.getPortRiskScore(event.metadata.port),\n      traffic_volume: event.raw_data.bytes || 0,\n      protocol_anomaly: this.detectProtocolAnomaly(event)\n    };\n  }\n  \n  // Behavioral features\n  extractBehavioralFeatures(event) {\n    return {\n      user_activity_score: this.getUserActivityScore(event.metadata.user),\n      time_of_day_anomaly: this.getTimeAnomalyScore(event.timestamp),\n      access_pattern_deviation: this.getAccessPatternScore(event),\n      historical_frequency: this.getHistoricalFrequency(event)\n    };\n  }\n  \n  // Content-based features\n  extractContentFeatures(event) {\n    return {\n      file_hash_reputation: this.getHashReputation(event.metadata.file_hash),\n      file_entropy: this.calculateFileEntropy(event),\n      string_analysis: this.analyzeStrings(event.raw_data),\n      similarity_to_known_threats: this.getThreatSimilarity(event)\n    };\n  }\n}\n```\n\n#### 6. Real-time Model Inference Pipeline\n\n```javascript\n// Real-time inference service\nclass RealTimeMLService {\n  \n  async processSecurityEvent(event) {\n    try {\n      // 1. Feature extraction\n      const features = await this.extractFeatures(event);\n      \n      // 2. Model inference\n      const predictions = await Promise.all([\n        this.runThreatClassifier(features),\n        this.runAnomalyDetector(features),\n        this.runRiskScorer(features)\n      ]);\n      \n      // 3. Ensemble results\n      const ensemblePrediction = this.combineModelOutputs(predictions);\n      \n      // 4. Store results\n      await this.storeMLResults(event.id, {\n        threatScore: ensemblePrediction.threatScore,\n        anomalyScore: ensemblePrediction.anomalyScore,\n        riskLevel: ensemblePrediction.riskLevel,\n        confidence: ensemblePrediction.confidence,\n        modelVersions: predictions.map(p => p.modelVersion),\n        features\n      });\n      \n      // 5. Trigger automated responses if needed\n      if (ensemblePrediction.threatScore > 0.8) {\n        await this.triggerAutomatedResponse(event, ensemblePrediction);\n      }\n      \n      return ensemblePrediction;\n      \n    } catch (error) {\n      console.error('ML inference failed:', error);\n      // Graceful fallback to rule-based detection\n      return this.fallbackRuleBasedDetection(event);\n    }\n  }\n  \n  // Automated response actions\n  async triggerAutomatedResponse(event, prediction) {\n    const actions = [];\n    \n    if (prediction.threatScore > 0.9) {\n      // High confidence threat - immediate action\n      actions.push({\n        type: 'block_ip',\n        target: event.metadata.source_ip,\n        duration: '1h'\n      });\n      \n      actions.push({\n        type: 'create_incident',\n        severity: 'critical',\n        title: `High-confidence threat detected: ${event.title}`,\n        autoAssign: true\n      });\n    } else if (prediction.threatScore > 0.8) {\n      // Medium-high confidence - alert analyst\n      actions.push({\n        type: 'escalate_alert',\n        priority: 'high',\n        notify: ['security-team@company.com']\n      });\n    }\n    \n    // Execute actions\n    for (const action of actions) {\n      await this.executeAutomatedAction(action);\n    }\n  }\n}\n```\n\n#### 7. Training Data Pipeline\n\n```javascript\n// Training data generation and export\nclass TrainingDataPipeline {\n  \n  async generateTrainingDataset(options = {}) {\n    const {\n      startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n      endDate = new Date(),\n      includeLabels = true,\n      format = 'json' // 'json', 'csv', 'parquet'\n    } = options;\n    \n    // Get labeled data from analyst feedback\n    const labeledAlerts = await storage.getLabeledAlerts(startDate, endDate);\n    \n    const trainingData = [];\n    \n    for (const alert of labeledAlerts) {\n      const features = await this.extractAllFeatures(alert);\n      const record = {\n        id: alert.id,\n        timestamp: alert.timestamp,\n        features,\n        metadata: {\n          source: alert.source,\n          type: alert.type,\n          severity: alert.severity\n        }\n      };\n      \n      if (includeLabels && alert.analystFeedback) {\n        record.labels = {\n          isThreat: alert.analystFeedback.isThreat,\n          threatType: alert.analystFeedback.threatType,\n          falsePositive: alert.analystFeedback.falsePositive,\n          severity: alert.analystFeedback.severity\n        };\n      }\n      \n      trainingData.push(record);\n    }\n    \n    // Export in requested format\n    return this.exportTrainingData(trainingData, format);\n  }\n  \n  // Export to different formats\n  exportTrainingData(data, format) {\n    switch (format) {\n      case 'csv':\n        return this.exportToCSV(data);\n      case 'parquet':\n        return this.exportToParquet(data);\n      case 'json':\n      default:\n        return JSON.stringify(data, null, 2);\n    }\n  }\n}\n```\n\n#### 8. Model A/B Testing Framework\n\n```javascript\n// A/B testing for different models\nclass ModelABTesting {\n  \n  async evaluateModels(eventBatch, modelConfigs) {\n    const results = {};\n    \n    for (const [modelName, config] of Object.entries(modelConfigs)) {\n      const predictions = [];\n      \n      for (const event of eventBatch) {\n        const prediction = await this.runModel(event, config);\n        predictions.push({\n          eventId: event.id,\n          prediction,\n          processingTime: prediction.processingTime,\n          confidence: prediction.confidence\n        });\n      }\n      \n      // Calculate metrics\n      results[modelName] = {\n        avgConfidence: this.calculateAvgConfidence(predictions),\n        avgProcessingTime: this.calculateAvgProcessingTime(predictions),\n        threatDetectionRate: this.calculateDetectionRate(predictions),\n        falsePositiveRate: this.calculateFalsePositiveRate(predictions)\n      };\n    }\n    \n    return results;\n  }\n}\n```\n\n#### 9. Integration Examples\n\n##### Integrate with Hugging Face Models\n```javascript\n// Hugging Face Transformers integration\nconst huggingFaceConfig = {\n  endpoint: 'https://api-inference.huggingface.co/models/',\n  apiKey: process.env.HUGGING_FACE_API_KEY,\n  models: {\n    textClassifier: 'microsoft/DialoGPT-medium',\n    anomalyDetector: 'microsoft/unilm-base-cased'\n  }\n};\n\nclass HuggingFaceIntegration {\n  async analyzeLogText(logText) {\n    const response = await fetch(\n      `${huggingFaceConfig.endpoint}${huggingFaceConfig.models.textClassifier}`,\n      {\n        headers: { Authorization: `Bearer ${huggingFaceConfig.apiKey}` },\n        method: 'POST',\n        body: JSON.stringify({ inputs: logText })\n      }\n    );\n    return response.json();\n  }\n}\n```\n\n##### Custom PyTorch/TensorFlow Model Integration\n```javascript\n// Custom model server integration\nclass CustomModelIntegration {\n  async predictThreat(features) {\n    // Prepare features in model-expected format\n    const modelInput = this.preprocessFeatures(features);\n    \n    const response = await fetch('http://ml-model-server:5000/predict', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ features: modelInput })\n    });\n    \n    const prediction = await response.json();\n    \n    return {\n      threatScore: prediction.probability,\n      confidence: prediction.confidence,\n      modelVersion: prediction.model_version,\n      processingTime: prediction.processing_time_ms\n    };\n  }\n}\n```\n\n### ML Development Workflow\n\n1. **Data Collection**: Use `/api/ml/training-data` to export labeled datasets\n2. **Feature Engineering**: Implement custom feature extractors in `FeatureExtractor`\n3. **Model Training**: Train models using exported data in your ML framework\n4. **Model Deployment**: Deploy model to inference endpoint\n5. **Integration**: Use ML integration patterns to connect your model\n6. **Monitoring**: Track performance using `/api/ml/metrics` endpoints\n7. **Iteration**: Use A/B testing framework to compare model versions\n\n---\n\n## 🔧 Advanced Configuration\n\n### Environment Variables Reference\n\n```bash\n# Database Configuration\nDATABASE_URL=postgresql://user:password@host:port/database\nPGHOST=your-postgres-host\nPGPORT=5432\nPGUSER=your-user\nPGPASSWORD=your-password\nPGDATABASE=soc_dashboard\n\n# Authentication\nSESSION_SECRET=your-super-secret-session-key\nREPL_ID=your-replit-app-id\nREPLIT_DOMAINS=your-domain.replit.app\n\n# Kafka Configuration (Optional)\nKAFKA_BROKERS=localhost:9092\nKAFKA_CLIENT_ID=soc-dashboard\nKAFKA_GROUP_ID=soc-dashboard-group\n\n# ML Model Configuration\nML_MODEL_ENDPOINT=https://your-ml-api.com/predict\nML_API_KEY=your-ml-api-key\nHUGGING_FACE_API_KEY=your-hf-api-key\nAWS_SAGEMAKER_ENDPOINT=your-sagemaker-endpoint\nAZURE_ML_ENDPOINT=your-azure-ml-endpoint\nGOOGLE_PROJECT_ID=your-gcp-project\n\n# Third-party Integrations\nTHREAT_INTEL_API_KEY=your-threat-intel-key\nIP_REPUTATION_API_KEY=your-ip-reputation-key\n```\n\n### Kafka Topics Configuration\n\n```javascript\n// Kafka topics for event streaming\nconst KAFKA_TOPICS = {\n  // Custom format topics\n  SECURITY_ALERTS: 'security-alerts',\n  INCIDENTS: 'incidents',\n  THREAT_INTEL: 'threat-intelligence',\n  SYSTEM_METRICS: 'system-metrics',\n  AUDIT_LOGS: 'audit-logs',\n  \n  // OCSF format topics\n  OCSF_NETWORK_ACTIVITY: 'ocsf-network-activity',    // Class 4001\n  OCSF_SYSTEM_ACTIVITY: 'ocsf-system-activity',      // Class 1001\n  OCSF_SECURITY_FINDING: 'ocsf-security-finding',    // Class 2001\n  OCSF_AUTHENTICATION: 'ocsf-authentication',        // Class 3002\n  \n  // ML and Analytics\n  ML_PREDICTIONS: 'ml-predictions',\n  FEATURE_VECTORS: 'feature-vectors',\n  MODEL_METRICS: 'model-metrics'\n};\n```\n\n### WebSocket Event Types\n\n```javascript\n// Client -> Server events\nconst CLIENT_EVENTS = {\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  HEARTBEAT: 'heartbeat',\n  ACK_ALERT: 'acknowledge_alert',\n  UPDATE_INCIDENT: 'update_incident'\n};\n\n// Server -> Client events\nconst SERVER_EVENTS = {\n  SECURITY_EVENT: 'security_event',\n  INCIDENT_UPDATE: 'incident_update',\n  SYSTEM_STATUS: 'system_status',\n  CONNECTION_STATUS: 'connection_status',\n  ML_PREDICTION: 'ml_prediction',\n  ALERT_ACKNOWLEDGED: 'alert_acknowledged'\n};\n```\n\n## 🎯 Use Cases & Examples\n\n### 1. SIEM Integration Example\n```bash\n# Send Splunk alert to SOC Dashboard\ncurl -X POST http://your-domain/api/events/siem \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"splunk-alert-001\",\n    \"timestamp\": \"2024-01-15T14:30:00Z\",\n    \"source\": \"Splunk-SIEM\",\n    \"severity\": \"high\",\n    \"type\": \"intrusion\",\n    \"title\": \"Brute Force Attack Detected\",\n    \"description\": \"Multiple failed login attempts detected from external IP\",\n    \"metadata\": {\n      \"source_ip\": \"203.0.113.45\",\n      \"target_user\": \"admin\",\n      \"attempt_count\": 25,\n      \"rule_id\": \"SPLUNK-BF-001\"\n    },\n    \"raw_data\": {\n      \"search_query\": \"index=security action=login result=failure\",\n      \"event_count\": 25,\n      \"time_span\": \"5 minutes\"\n    }\n  }'\n```\n\n### 2. EDR Integration Example\n```bash\n# Send CrowdStrike detection to SOC Dashboard\ncurl -X POST http://your-domain/api/events/edr \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"cs-detection-002\",\n    \"timestamp\": \"2024-01-15T15:45:00Z\",\n    \"source\": \"CrowdStrike-Falcon\",\n    \"severity\": \"critical\",\n    \"type\": \"malware\",\n    \"title\": \"Ransomware Activity Detected\",\n    \"description\": \"Suspicious file encryption behavior detected on endpoint\",\n    \"metadata\": {\n      \"hostname\": \"DESKTOP-ABC123\",\n      \"user\": \"john.smith\",\n      \"file_hash\": \"e3b0c44298fc1c149afbf4c8996fb924\",\n      \"process_name\": \"suspicious.exe\"\n    },\n    \"raw_data\": {\n      \"detection_type\": \"behavioral\",\n      \"confidence\": 95,\n      \"quarantine_status\": \"quarantined\"\n    }\n  }'\n```\n\n### 3. OCSF Network Activity Example\n```bash\n# Send OCSF-compliant network event\ncurl -X POST http://your-domain/api/ocsf/network-activity \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"activity_id\": 2,\n    \"activity_name\": \"Denied\",\n    \"category_name\": \"Network Activity\",\n    \"category_uid\": 4,\n    \"class_name\": \"Network Activity\",\n    \"class_uid\": 4001,\n    \"severity\": \"Medium\",\n    \"severity_id\": 3,\n    \"time\": 1705329000000,\n    \"message\": \"Outbound connection blocked by firewall rule\",\n    \"src_endpoint\": {\n      \"ip\": \"10.0.1.100\",\n      \"hostname\": \"workstation-01\"\n    },\n    \"dst_endpoint\": {\n      \"ip\": \"203.0.113.15\",\n      \"port\": 443\n    },\n    \"connection_info\": {\n      \"protocol_name\": \"HTTPS\",\n      \"direction\": \"Outbound\"\n    },\n    \"disposition\": \"Blocked\",\n    \"disposition_id\": 2,\n    \"metadata\": {\n      \"product\": {\n        \"name\": \"Palo Alto Firewall\",\n        \"vendor_name\": \"Palo Alto Networks\"\n      },\n      \"version\": \"1.1.0\"\n    }\n  }'\n```\n\n---\n\n**Built with ❤️ for cybersecurity professionals**","size_bytes":37998},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack Security Operations Center (SOC) dashboard application built with React frontend and Express.js backend. The system provides real-time monitoring, alert management, incident response, and analytics for cybersecurity operations. It features a modern dark-themed UI optimized for SOC environments with real-time WebSocket communication, comprehensive alert processing, and machine learning integration for automated threat detection.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **UI Components**: Radix UI with shadcn/ui component system for accessible, customizable components\n- **Styling**: Tailwind CSS with custom dark theme optimized for SOC environments\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: WebSocket integration for live updates and notifications\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture  \n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Real-time**: WebSocket server for broadcasting live updates to connected clients\n- **API Design**: RESTful endpoints with JSON communication\n- **Development**: Hot reload with Vite middleware integration\n\n## Database Design\n- **Database**: PostgreSQL with Drizzle ORM for schema management\n- **Schema Structure**:\n  - Users table for analyst/admin roles\n  - Sources table for security tool configurations (SIEM, EDR, Firewall)\n  - Raw alerts table for incoming security events\n  - Normalized alerts table for processed/standardized alerts\n  - Feature vectors table for ML-based analysis\n  - Incidents table for security incident management\n  - Actions table for response tracking\n  - Feedback table for analyst input and model improvement\n  - Model metrics table for performance monitoring\n- **Migrations**: Drizzle Kit for schema versioning and deployment\n\n## Real-time Communication\n- **WebSocket Server**: Integrated with HTTP server for bidirectional communication\n- **Connection Management**: Automatic reconnection with status indicators\n- **Event Broadcasting**: Real-time alerts, incident updates, and system notifications\n- **Client Handling**: Graceful connection management with cleanup on disconnect\n\n## Security and Authentication\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed sessions\n- **Role-based Access**: Analyst and admin user roles with appropriate permissions\n- **Data Validation**: Zod schemas for runtime type checking and validation\n- **Input Sanitization**: Form validation with React Hook Form and Zod resolvers\n\n## UI/UX Design Patterns\n- **Component Architecture**: Modular, reusable components with consistent design patterns\n- **Responsive Design**: Mobile-first approach with breakpoint-specific layouts\n- **Accessibility**: WCAG compliance through Radix UI primitives\n- **Dark Theme**: SOC-optimized color scheme with high contrast for extended use\n- **Loading States**: Skeleton components and loading indicators for better UX\n- **Error Handling**: Toast notifications and error boundaries for user feedback\n\n## Development Workflow\n- **Type Safety**: End-to-end TypeScript with shared schemas between frontend/backend\n- **Code Quality**: ESLint and TypeScript compiler checks\n- **Development Server**: Vite with HMR and Express.js middleware integration\n- **Build Process**: Separate client and server builds with optimized outputs\n- **Path Aliases**: Simplified imports with @ and @shared path mapping\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless database driver\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect support\n- **express**: Web application framework for Node.js\n- **react**: UI library with hooks and modern features\n- **vite**: Build tool and development server\n\n## UI and Component Libraries  \n- **@radix-ui/***: Accessible, unstyled UI primitives (dialogs, forms, navigation)\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant system\n- **lucide-react**: Icon library with React components\n\n## Data and State Management\n- **@tanstack/react-query**: Server state management and caching\n- **react-hook-form**: Form handling with validation\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema definition\n\n## Development and Build Tools\n- **typescript**: Static type checking\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production\n- **@replit/vite-plugin-***: Replit-specific development plugins\n\n## Real-time and Communication\n- **ws**: WebSocket library for real-time communication\n- **connect-pg-simple**: PostgreSQL session store\n\n## Utilities and Helpers\n- **date-fns**: Date manipulation library\n- **clsx**: Conditional CSS class utility\n- **cmdk**: Command palette component\n- **nanoid**: URL-safe unique ID generator","size_bytes":5293},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/alertCorrelation.ts":{"content":"import { storage } from \"./storage\";\nimport { ThreatIntelligenceService } from \"./threatIntelligence\";\nimport { type RawAlert, type InsertIncident } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface CorrelationRule {\n  id: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  conditions: {\n    severityThreshold?: string;\n    alertCount?: number;\n    timeWindow?: number; // minutes\n    sourceTypes?: string[];\n    keywordMatches?: string[];\n  };\n  actions: {\n    createIncident: boolean;\n    escalate: boolean;\n    notifyAnalyst: boolean;\n  };\n}\n\nexport interface CorrelationResult {\n  shouldCreateIncident: boolean;\n  incidentSeverity: 'low' | 'medium' | 'high' | 'critical';\n  incidentTitle: string;\n  incidentDescription: string;\n  confidence: number;\n  relatedAlerts: RawAlert[];\n  triggeredRules: CorrelationRule[];\n  threatIntelligence?: {\n    indicators: any[];\n    riskScore: number;\n    threats: any[];\n    recommendations: string[];\n  };\n}\n\nexport class AlertCorrelationEngine {\n  private static defaultRules: CorrelationRule[] = [\n    {\n      id: \"critical-alert-rule\",\n      name: \"Critical Alert Auto-Escalation\",\n      description: \"Automatically create incidents for critical severity alerts\",\n      enabled: true,\n      conditions: {\n        severityThreshold: \"critical\"\n      },\n      actions: {\n        createIncident: true,\n        escalate: true,\n        notifyAnalyst: true\n      }\n    },\n    {\n      id: \"multiple-high-alerts\",\n      name: \"Multiple High Severity Alerts\",\n      description: \"Create incident when 3+ high severity alerts occur within 30 minutes\",\n      enabled: true,\n      conditions: {\n        severityThreshold: \"high\",\n        alertCount: 3,\n        timeWindow: 30\n      },\n      actions: {\n        createIncident: true,\n        escalate: false,\n        notifyAnalyst: true\n      }\n    },\n    {\n      id: \"ransomware-indicators\",\n      name: \"Ransomware Activity Detection\",\n      description: \"Detect potential ransomware based on file encryption patterns\",\n      enabled: true,\n      conditions: {\n        keywordMatches: [\"encrypt\", \"ransom\", \"locked\", \"decrypt\", \"bitcoin\", \"payment\"]\n      },\n      actions: {\n        createIncident: true,\n        escalate: true,\n        notifyAnalyst: true\n      }\n    },\n    {\n      id: \"privilege-escalation\",\n      name: \"Privilege Escalation Pattern\",\n      description: \"Detect privilege escalation attempts\",\n      enabled: true,\n      conditions: {\n        keywordMatches: [\"privilege\", \"escalation\", \"admin\", \"root\", \"sudo\", \"elevation\"]\n      },\n      actions: {\n        createIncident: true,\n        escalate: false,\n        notifyAnalyst: true\n      }\n    },\n    {\n      id: \"data-exfiltration\",\n      name: \"Data Exfiltration Detection\",\n      description: \"Detect potential data exfiltration activities\",\n      enabled: true,\n      conditions: {\n        keywordMatches: [\"exfiltration\", \"transfer\", \"upload\", \"download\", \"copy\", \"steal\"]\n      },\n      actions: {\n        createIncident: true,\n        escalate: true,\n        notifyAnalyst: true\n      }\n    }\n  ];\n\n  static async correlateAlert(alert: RawAlert): Promise<CorrelationResult> {\n    const recentAlerts = await this.getRecentAlerts(60); // Last 60 minutes\n    const triggeredRules: CorrelationRule[] = [];\n    let shouldCreateIncident = false;\n    let incidentSeverity: 'low' | 'medium' | 'high' | 'critical' = 'medium';\n    let confidence = 0.5;\n\n    // Check each correlation rule\n    for (const rule of this.defaultRules) {\n      if (!rule.enabled) continue;\n\n      const ruleTriggered = await this.evaluateRule(rule, alert, recentAlerts);\n      if (ruleTriggered) {\n        triggeredRules.push(rule);\n        \n        if (rule.actions.createIncident) {\n          shouldCreateIncident = true;\n        }\n\n        // Determine severity based on rule type\n        if (rule.id === \"critical-alert-rule\" || rule.id === \"ransomware-indicators\") {\n          incidentSeverity = 'critical';\n          confidence = Math.max(confidence, 0.9);\n        } else if (rule.id === \"data-exfiltration\" || rule.id === \"multiple-high-alerts\") {\n          incidentSeverity = 'high';\n          confidence = Math.max(confidence, 0.8);\n        } else {\n          incidentSeverity = 'medium';\n          confidence = Math.max(confidence, 0.6);\n        }\n      }\n    }\n\n    // Threat intelligence enrichment\n    const threatEnrichment = await ThreatIntelligenceService.enrichAlert(alert);\n    \n    // Machine learning-based correlation (simplified)\n    const mlScore = await this.calculateMLScore(alert, recentAlerts);\n    confidence = Math.max(confidence, mlScore);\n\n    // Factor in threat intelligence risk score\n    if (threatEnrichment.riskScore > 5) {\n      confidence = Math.max(confidence, threatEnrichment.riskScore / 10);\n      \n      if (threatEnrichment.riskScore >= 7 && !shouldCreateIncident) {\n        shouldCreateIncident = true;\n        incidentSeverity = 'critical';\n      } else if (threatEnrichment.riskScore >= 4 && !shouldCreateIncident) {\n        shouldCreateIncident = true;\n        incidentSeverity = 'high';\n      }\n    }\n\n    // If ML score is very high, create incident even if no rules triggered\n    if (mlScore > 0.85 && !shouldCreateIncident) {\n      shouldCreateIncident = true;\n      incidentSeverity = 'high';\n    }\n\n    const incidentTitle = this.generateIncidentTitle(alert, triggeredRules);\n    const incidentDescription = await this.generateIncidentDescription(alert, triggeredRules, confidence);\n\n    return {\n      shouldCreateIncident,\n      incidentSeverity,\n      incidentTitle,\n      incidentDescription,\n      confidence,\n      relatedAlerts: [alert, ...recentAlerts.slice(0, 5)], // Include up to 5 related alerts\n      triggeredRules,\n      threatIntelligence: threatEnrichment.indicators.length > 0 ? threatEnrichment : undefined\n    };\n  }\n\n  private static async evaluateRule(\n    rule: CorrelationRule,\n    alert: RawAlert,\n    recentAlerts: RawAlert[]\n  ): Promise<boolean> {\n    const { conditions } = rule;\n\n    // Check severity threshold\n    if (conditions.severityThreshold) {\n      const severityLevels = { 'low': 1, 'medium': 2, 'high': 3, 'critical': 4 };\n      const alertSeverity = severityLevels[alert.severity as keyof typeof severityLevels] || 0;\n      const threshold = severityLevels[conditions.severityThreshold as keyof typeof severityLevels] || 0;\n      \n      if (alertSeverity < threshold) {\n        return false;\n      }\n    }\n\n    // Check alert count in time window\n    if (conditions.alertCount && conditions.timeWindow) {\n      const relevantAlerts = recentAlerts.filter(a => \n        new Date(a.receivedAt).getTime() > Date.now() - (conditions.timeWindow! * 60 * 1000)\n      );\n      \n      if (relevantAlerts.length < conditions.alertCount - 1) { // -1 because current alert counts\n        return false;\n      }\n    }\n\n    // Check source types\n    if (conditions.sourceTypes && conditions.sourceTypes.length > 0) {\n      const source = await storage.getSource(alert.sourceId);\n      if (!source || !conditions.sourceTypes.includes(source.type)) {\n        return false;\n      }\n    }\n\n    // Check keyword matches\n    if (conditions.keywordMatches && conditions.keywordMatches.length > 0) {\n      const alertText = [\n        alert.description || '',\n        alert.type || '',\n        JSON.stringify(alert.rawData)\n      ].join(' ').toLowerCase();\n\n      const hasKeywordMatch = conditions.keywordMatches.some(keyword =>\n        alertText.includes(keyword.toLowerCase())\n      );\n\n      if (!hasKeywordMatch) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private static async getRecentAlerts(minutes: number = 60): Promise<RawAlert[]> {\n    const allAlerts = await storage.getRawAlerts();\n    const cutoffTime = new Date(Date.now() - minutes * 60 * 1000);\n    \n    return allAlerts\n      .filter(alert => new Date(alert.receivedAt) > cutoffTime)\n      .sort((a, b) => new Date(b.receivedAt).getTime() - new Date(a.receivedAt).getTime());\n  }\n\n  private static async calculateMLScore(alert: RawAlert, recentAlerts: RawAlert[]): Promise<number> {\n    // Simplified ML scoring based on various factors\n    let score = 0.3; // Base score\n\n    // Severity contribution\n    const severityScores = { 'critical': 0.4, 'high': 0.3, 'medium': 0.2, 'low': 0.1 };\n    score += severityScores[alert.severity as keyof typeof severityScores] || 0.1;\n\n    // Frequency analysis - if similar alerts occurred recently\n    const similarAlerts = recentAlerts.filter(a => \n      a.type === alert.type || \n      a.severity === alert.severity ||\n      a.sourceId === alert.sourceId\n    );\n    \n    if (similarAlerts.length > 2) {\n      score += 0.2; // Pattern detected\n    }\n\n    // Time-based analysis - alerts during off-hours are more suspicious\n    const hour = new Date(alert.receivedAt).getHours();\n    if (hour < 6 || hour > 22) {\n      score += 0.1; // Off-hours activity\n    }\n\n    // Source reputation (simplified)\n    const source = await storage.getSource(alert.sourceId);\n    if (source?.type === 'EDR' || source?.type === 'SIEM') {\n      score += 0.1; // Higher trust in EDR/SIEM alerts\n    }\n\n    return Math.min(score, 1.0); // Cap at 1.0\n  }\n\n  private static generateIncidentTitle(alert: RawAlert, triggeredRules: CorrelationRule[]): string {\n    if (triggeredRules.length > 0) {\n      const primaryRule = triggeredRules[0];\n      if (primaryRule.id === \"ransomware-indicators\") {\n        return \"Potential Ransomware Activity Detected\";\n      } else if (primaryRule.id === \"data-exfiltration\") {\n        return \"Possible Data Exfiltration Attempt\";\n      } else if (primaryRule.id === \"privilege-escalation\") {\n        return \"Privilege Escalation Activity Detected\";\n      } else if (primaryRule.id === \"critical-alert-rule\") {\n        return `Critical Security Alert: ${alert.type || 'Unknown'}`;\n      } else if (primaryRule.id === \"multiple-high-alerts\") {\n        return \"Multiple High-Severity Security Events\";\n      }\n    }\n\n    // Fallback title\n    return `Security Incident: ${alert.type || 'Automated Detection'}`;\n  }\n\n  private static async generateIncidentDescription(\n    alert: RawAlert,\n    triggeredRules: CorrelationRule[],\n    confidence: number\n  ): Promise<string> {\n    let description = `Automated incident created with ${(confidence * 100).toFixed(1)}% confidence.\\n\\n`;\n    \n    description += `**Primary Alert Details:**\\n`;\n    description += `- Type: ${alert.type || 'Unknown'}\\n`;\n    description += `- Severity: ${alert.severity || 'Unknown'}\\n`;\n    description += `- Description: ${alert.description || 'No description available'}\\n`;\n    description += `- Received: ${new Date(alert.receivedAt).toISOString()}\\n\\n`;\n\n    if (triggeredRules.length > 0) {\n      description += `**Triggered Correlation Rules:**\\n`;\n      triggeredRules.forEach(rule => {\n        description += `- ${rule.name}: ${rule.description}\\n`;\n      });\n      description += '\\n';\n    }\n    \n    // Add threat intelligence information if available\n    const threatEnrichment = await ThreatIntelligenceService.enrichAlert(alert);\n    if (threatEnrichment.indicators.length > 0) {\n      description += `**Threat Intelligence Matches:**\\n`;\n      description += `- Risk Score: ${threatEnrichment.riskScore.toFixed(1)}/10\\n`;\n      threatEnrichment.indicators.forEach(indicator => {\n        description += `- ${indicator.type}: ${indicator.value} (${indicator.severity}, ${indicator.source})\\n`;\n      });\n      description += '\\n';\n      \n      if (threatEnrichment.recommendations.length > 0) {\n        description += `**Threat Intelligence Recommendations:**\\n`;\n        threatEnrichment.recommendations.forEach(rec => {\n          description += `- ${rec}\\n`;\n        });\n        description += '\\n';\n      }\n    }\n\n    description += `**Recommended Actions:**\\n`;\n    if (triggeredRules.some(r => r.actions.escalate)) {\n      description += `- Immediate escalation recommended\\n`;\n    }\n    description += `- Review alert details and raw data\\n`;\n    description += `- Investigate related systems and users\\n`;\n    description += `- Consider containment measures if confirmed malicious\\n`;\n\n    return description;\n  }\n\n  static async createIncidentFromCorrelation(\n    correlationResult: CorrelationResult,\n    primaryAlert: RawAlert\n  ): Promise<string | null> {\n    if (!correlationResult.shouldCreateIncident) {\n      return null;\n    }\n\n    const incidentData: InsertIncident = {\n      title: correlationResult.incidentTitle,\n      description: correlationResult.incidentDescription,\n      severity: correlationResult.incidentSeverity,\n      status: 'open'\n    };\n\n    try {\n      const incident = await storage.createIncident(incidentData);\n      \n      // Create initial action for the incident\n      await storage.createAction({\n        incidentId: incident.id,\n        actionType: 'AUTOMATED_DETECTION',\n        payload: {\n          primaryAlertId: primaryAlert.id,\n          confidence: correlationResult.confidence,\n          triggeredRules: correlationResult.triggeredRules.map(r => r.id),\n          relatedAlertIds: correlationResult.relatedAlerts.map(a => a.id)\n        },\n        performedBy: 'system'\n      });\n\n      console.log(`✅ Auto-created incident ${incident.id}: ${incident.title}`);\n      return incident.id;\n    } catch (error) {\n      console.error('❌ Failed to create incident from correlation:', error);\n      return null;\n    }\n  }\n}","size_bytes":13446},"server/alertDataLoader.ts":{"content":"import fs from 'fs';\nimport path from 'path';\n\nexport interface AlertDataset {\n  crowdstrike: any[];\n  email: any[];\n  firewall: any[];\n  sentinelone: any[];\n}\n\nexport class AlertDataLoader {\n  private static instance: AlertDataLoader;\n  private alertData: AlertDataset = {\n    crowdstrike: [],\n    email: [],\n    firewall: [],\n    sentinelone: []\n  };\n  private isLoaded = false;\n\n  static getInstance(): AlertDataLoader {\n    if (!AlertDataLoader.instance) {\n      AlertDataLoader.instance = new AlertDataLoader();\n    }\n    return AlertDataLoader.instance;\n  }\n\n  async loadAlertData(): Promise<void> {\n    if (this.isLoaded) return;\n\n    try {\n      const dataPath = path.join(process.cwd(), 'attached_assets');\n      \n      // Load CrowdStrike alerts\n      const crowdStrikeFile = path.join(dataPath, 'crowdstrike_alerts_labeled_1754556002025.json');\n      if (fs.existsSync(crowdStrikeFile)) {\n        const crowdStrikeData = JSON.parse(fs.readFileSync(crowdStrikeFile, 'utf8'));\n        this.alertData.crowdstrike = Array.isArray(crowdStrikeData) ? crowdStrikeData : [];\n        console.log(`✅ Loaded ${this.alertData.crowdstrike.length} CrowdStrike alerts`);\n      }\n\n      // Load Email alerts\n      const emailFile = path.join(dataPath, 'email_alerts_labeled_1754556002031.json');\n      if (fs.existsSync(emailFile)) {\n        const emailData = JSON.parse(fs.readFileSync(emailFile, 'utf8'));\n        this.alertData.email = Array.isArray(emailData) ? emailData : [];\n        console.log(`✅ Loaded ${this.alertData.email.length} Email alerts`);\n      }\n\n      // Load Firewall alerts\n      const firewallFile = path.join(dataPath, 'firewall_alerts_labeled_1754556002031.json');\n      if (fs.existsSync(firewallFile)) {\n        const firewallData = JSON.parse(fs.readFileSync(firewallFile, 'utf8'));\n        this.alertData.firewall = Array.isArray(firewallData) ? firewallData : [];\n        console.log(`✅ Loaded ${this.alertData.firewall.length} Firewall alerts`);\n      }\n\n      // Load SentinelOne alerts\n      const sentinelOneFile = path.join(dataPath, 'sentinelone_alerts_labeled_1754556002032.json');\n      if (fs.existsSync(sentinelOneFile)) {\n        const sentinelOneData = JSON.parse(fs.readFileSync(sentinelOneFile, 'utf8'));\n        this.alertData.sentinelone = Array.isArray(sentinelOneData) ? sentinelOneData : [];\n        console.log(`✅ Loaded ${this.alertData.sentinelone.length} SentinelOne alerts`);\n      }\n\n      this.isLoaded = true;\n      const totalAlerts = this.alertData.crowdstrike.length + \n                         this.alertData.email.length + \n                         this.alertData.firewall.length + \n                         this.alertData.sentinelone.length;\n      console.log(`🎯 Total alerts loaded: ${totalAlerts}`);\n    } catch (error) {\n      console.error('❌ Error loading alert data:', error);\n      this.isLoaded = false;\n    }\n  }\n\n  getRandomAlerts(sourceType: string, count: number): any[] {\n    const sourceKey = sourceType.toLowerCase() as keyof AlertDataset;\n    const sourceData = this.alertData[sourceKey];\n    \n    if (!sourceData || sourceData.length === 0) {\n      throw new Error(`No data available for source type: ${sourceType}`);\n    }\n\n    const results = [];\n    for (let i = 0; i < count; i++) {\n      const randomIndex = Math.floor(Math.random() * sourceData.length);\n      const alert = { ...sourceData[randomIndex] };\n      \n      // Update timestamp to current time for realism\n      if (alert.timestamp) {\n        alert.timestamp = new Date(Date.now() - Math.random() * 3600000).toISOString();\n      }\n      \n      results.push(alert);\n    }\n    \n    return results;\n  }\n\n  getDatasetStats(): { [key: string]: number } {\n    return {\n      crowdstrike: this.alertData.crowdstrike.length,\n      email: this.alertData.email.length,\n      firewall: this.alertData.firewall.length,\n      sentinelone: this.alertData.sentinelone.length,\n      total: this.alertData.crowdstrike.length + \n             this.alertData.email.length + \n             this.alertData.firewall.length + \n             this.alertData.sentinelone.length\n    };\n  }\n\n  getSampleAlert(sourceType: string): any | null {\n    const sourceKey = sourceType.toLowerCase() as keyof AlertDataset;\n    const sourceData = this.alertData[sourceKey];\n    \n    if (!sourceData || sourceData.length === 0) {\n      return null;\n    }\n    \n    const randomIndex = Math.floor(Math.random() * sourceData.length);\n    return sourceData[randomIndex];\n  }\n\n  async ensureDataLoaded(): Promise<void> {\n    if (!this.isLoaded) {\n      await this.loadAlertData();\n    }\n  }\n}","size_bytes":4601},"server/alertProcessor.ts":{"content":"import { storage } from \"./storage\";\nimport { AlertNormalizer, type NormalizedAlertData } from \"./normalization\";\nimport { AlertDataLoader } from \"./alertDataLoader\";\nimport { AlertCorrelationEngine } from \"./alertCorrelation\";\nimport { type RawAlert, type InsertRawAlert } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface AlertProcessingResult {\n  rawAlert: RawAlert;\n  normalizedData: NormalizedAlertData;\n  success: boolean;\n  error?: string;\n  incidentCreated?: boolean;\n  incidentId?: string;\n  correlationConfidence?: number;\n}\n\nexport class AlertProcessor {\n  \n  static async processIncomingAlert(\n    alertData: any, \n    sourceId: string, \n    sourceType?: string\n  ): Promise<AlertProcessingResult> {\n    try {\n      // Step 1: Normalize the incoming alert\n      const normalizedData = AlertNormalizer.normalize(alertData, sourceType);\n      \n      // Step 2: Convert to raw alert format and store\n      const rawAlertData = AlertNormalizer.toRawAlert(normalizedData, sourceId);\n      const rawAlert = await storage.createRawAlert(rawAlertData);\n      \n      // Step 3: Run correlation analysis to determine if incident should be created\n      const correlationResult = await AlertCorrelationEngine.correlateAlert(rawAlert);\n      \n      let incidentId: string | null = null;\n      let incidentCreated = false;\n      \n      if (correlationResult.shouldCreateIncident) {\n        incidentId = await AlertCorrelationEngine.createIncidentFromCorrelation(correlationResult, rawAlert);\n        incidentCreated = incidentId !== null;\n        \n        if (incidentCreated) {\n          console.log(`🚨 Auto-created incident ${incidentId} for ${normalizedData.sourceType} alert`);\n        }\n      }\n      \n      console.log(`✅ Processed ${normalizedData.sourceType} alert: ${normalizedData.title} (correlation: ${(correlationResult.confidence * 100).toFixed(1)}%)`);\n      \n      return {\n        rawAlert,\n        normalizedData,\n        success: true,\n        incidentCreated,\n        incidentId: incidentId || undefined,\n        correlationConfidence: correlationResult.confidence\n      };\n    } catch (error) {\n      console.error('Alert processing failed:', error);\n      return {\n        rawAlert: {} as RawAlert,\n        normalizedData: {} as NormalizedAlertData,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  static async processBulkAlerts(\n    alerts: Array<{ alertData: any; sourceId: string; sourceType?: string }>\n  ): Promise<AlertProcessingResult[]> {\n    const results: AlertProcessingResult[] = [];\n    \n    for (const alert of alerts) {\n      const result = await this.processIncomingAlert(\n        alert.alertData,\n        alert.sourceId,\n        alert.sourceType\n      );\n      results.push(result);\n    }\n    \n    const successCount = results.filter(r => r.success).length;\n    console.log(`✅ Bulk processing complete: ${successCount}/${results.length} alerts processed successfully`);\n    \n    return results;\n  }\n\n  static async simulateIncomingAlerts(\n    sourceType: string, \n    count: number = 5\n  ): Promise<AlertProcessingResult[]> {\n    // Load real alert data\n    const dataLoader = AlertDataLoader.getInstance();\n    await dataLoader.ensureDataLoaded();\n\n    // First, find or create a source for this simulation\n    const sources = await storage.getSources();\n    let source = sources.find(s => s.type.toLowerCase() === sourceType.toLowerCase());\n    \n    if (!source) {\n      source = await storage.createSource({\n        name: `${sourceType} Real Data Simulator`,\n        type: sourceType,\n        config: { simulated: true, dataSource: 'real_alerts', endpoint: `https://api.${sourceType.toLowerCase()}.example.com` }\n      });\n    }\n\n    try {\n      // Use real alert data instead of generated samples\n      const realAlerts = dataLoader.getRandomAlerts(sourceType, count);\n      const results: AlertProcessingResult[] = [];\n\n      console.log(`🎯 Simulating ${count} real ${sourceType} alerts...`);\n      \n      for (const alertData of realAlerts) {\n        const result = await this.processIncomingAlert(alertData, source.id, sourceType);\n        results.push(result);\n      }\n\n      const successCount = results.filter(r => r.success).length;\n      console.log(`✅ Successfully processed ${successCount}/${count} ${sourceType} alerts`);\n\n      return results;\n    } catch (error) {\n      console.log(`⚠️  No real data available for ${sourceType}, falling back to generated samples`);\n      // Fallback to generated data if real data is not available\n      const sampleAlerts = this.generateSampleAlerts(sourceType, count);\n      const results: AlertProcessingResult[] = [];\n\n      for (const alertData of sampleAlerts) {\n        const result = await this.processIncomingAlert(alertData, source.id, sourceType);\n        results.push(result);\n      }\n\n      return results;\n    }\n  }\n\n  static async simulateRealTimeAlerts(\n    sourceType: string,\n    durationMinutes: number = 5,\n    alertsPerMinute: number = 2\n  ): Promise<void> {\n    const dataLoader = AlertDataLoader.getInstance();\n    await dataLoader.ensureDataLoaded();\n\n    console.log(`🔄 Starting real-time simulation: ${sourceType} alerts for ${durationMinutes} minutes (${alertsPerMinute}/min)`);\n    \n    const intervalMs = (60 * 1000) / alertsPerMinute; // Convert to milliseconds between alerts\n    const totalAlerts = durationMinutes * alertsPerMinute;\n    let processedCount = 0;\n\n    const interval = setInterval(async () => {\n      try {\n        if (processedCount >= totalAlerts) {\n          clearInterval(interval);\n          console.log(`🏁 Real-time simulation completed: ${processedCount} alerts processed`);\n          return;\n        }\n\n        const result = await this.simulateIncomingAlerts(sourceType, 1);\n        if (result[0]?.success) {\n          processedCount++;\n          console.log(`⚡ Real-time alert ${processedCount}/${totalAlerts}: ${result[0].normalizedData.title}`);\n        }\n      } catch (error) {\n        console.error('❌ Real-time simulation error:', error);\n      }\n    }, intervalMs);\n\n    // Return immediately, simulation runs in background\n    return;\n  }\n\n  static async getDatasetStats(): Promise<any> {\n    const dataLoader = AlertDataLoader.getInstance();\n    await dataLoader.ensureDataLoaded();\n    return dataLoader.getDatasetStats();\n  }\n\n  static async getSampleAlert(sourceType: string): Promise<any> {\n    const dataLoader = AlertDataLoader.getInstance();\n    await dataLoader.ensureDataLoaded();\n    return dataLoader.getSampleAlert(sourceType);\n  }\n\n  private static generateSampleAlerts(sourceType: string, count: number): any[] {\n    const alerts = [];\n    \n    for (let i = 0; i < count; i++) {\n      switch (sourceType.toLowerCase()) {\n        case 'crowdstrike':\n          alerts.push(this.generateCrowdStrikeSample(i));\n          break;\n        case 'email':\n          alerts.push(this.generateEmailSample(i));\n          break;\n        case 'firewall':\n          alerts.push(this.generateFirewallSample(i));\n          break;\n        case 'sentinelone':\n          alerts.push(this.generateSentinelOneSample(i));\n          break;\n        default:\n          throw new Error(`Unsupported source type: ${sourceType}`);\n      }\n    }\n    \n    return alerts;\n  }\n\n  private static generateCrowdStrikeSample(index: number) {\n    const severities = ['Low', 'Medium', 'High', 'Critical'];\n    const tactics = ['Defense Evasion', 'Execution', 'Persistence', 'Privilege Escalation'];\n    const techniques = ['T1547', 'T1078', 'T1036', 'T1055'];\n    const detections = ['RemoteAccessTool', 'CommandAndControl', 'CredentialAccess', 'Malware'];\n    \n    return {\n      alert_id: randomUUID(),\n      detect_id: randomUUID(),\n      device_id: randomUUID(),\n      device_name: `workstation-${String(index + 1).padStart(2, '0')}.corp.local`,\n      agent_version: \"4.2.8\",\n      sensor_version: \"6.1.15\",\n      ip_address: `192.168.1.${100 + index}`,\n      mac_address: `00:11:22:33:44:${String(50 + index).padStart(2, '0')}`,\n      user_name: `user${index + 1}`,\n      file_name: `suspicious_${index}.exe`,\n      file_path: `C:\\\\Temp\\\\suspicious_${index}.exe`,\n      file_hash_sha1: `a1b2c3d4e5f6789${index}`,\n      file_hash_sha256: `def456789abc123${index}${'0'.repeat(48)}`,\n      severity: severities[index % severities.length],\n      tactic: tactics[index % tactics.length],\n      technique: techniques[index % techniques.length],\n      detect_name: detections[index % detections.length],\n      command_line: `suspicious_${index}.exe --malware-flag`,\n      parent_process: \"explorer.exe\",\n      parent_cmdline: \"C:\\\\Windows\\\\explorer.exe\",\n      timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n      event_platform: \"Windows\",\n      event_type: \"ProcessRollup\",\n      network_remote_ip: `203.0.113.${10 + index}`,\n      network_remote_port: 8080 + index,\n      protocol: \"TCP\",\n      alert_label: \"true_positive\"\n    };\n  }\n\n  private static generateEmailSample(index: number) {\n    const verdicts = ['malicious', 'suspicious', 'clean'];\n    const malwareTypes = ['Emotet', 'Dridex', 'None'];\n    const engines = ['Microsoft Defender', 'Proofpoint', 'Mimecast'];\n    \n    return {\n      alert_id: randomUUID(),\n      sender_email: `suspicious${index}@badactor.com`,\n      recipient_email: `user${index}@company.com`,\n      subject: `Urgent Action Required - Case ${index + 1000}`,\n      timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n      verdict: verdicts[index % verdicts.length],\n      quarantine_status: index % 2 === 0 ? \"blocked\" : \"quarantined\",\n      malware_detected: malwareTypes[index % malwareTypes.length],\n      phishing_detected: index % 3 === 0,\n      malicious_link_detected: index % 4 === 0,\n      spam_score: Math.random() * 10,\n      attachment_name: `document_${index}.pdf`,\n      attachment_hash: `hash${index}${'0'.repeat(60)}`,\n      message_id: randomUUID(),\n      header_from: `noreply${index}@suspicious.com`,\n      reply_to: `reply${index}@badactor.com`,\n      detection_engine: engines[index % engines.length],\n      message_size: 15000 + Math.floor(Math.random() * 50000),\n      alert_label: \"true_positive\"\n    };\n  }\n\n  private static generateFirewallSample(index: number) {\n    const actions = ['allow', 'deny', 'drop', 'reset'];\n    const protocols = ['TCP', 'UDP', 'ICMP'];\n    const threatTypes = ['port-scan', 'brute-force', 'dos-attack', 'C2'];\n    const severities = ['Low', 'Medium', 'High', 'Critical'];\n    \n    return {\n      alert_id: randomUUID(),\n      firewall_name: `fw-${String(index + 1).padStart(2, '0')}.company.com`,\n      src_ip: `203.0.113.${10 + index}`,\n      src_port: 50000 + index,\n      dest_ip: `192.168.1.${100 + index}`,\n      dest_port: [22, 80, 443, 3389][index % 4],\n      protocol: protocols[index % protocols.length],\n      action: actions[index % actions.length],\n      rule_name: `rule_security_${index}`,\n      policy_id: 1000 + index,\n      policy_name: `policy_block_${index}`,\n      application: ['SSH', 'HTTP', 'HTTPS', 'RDP'][index % 4],\n      threat_type: threatTypes[index % threatTypes.length],\n      severity: severities[index % severities.length],\n      category: ['threat', 'application', 'network'][index % 3],\n      timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n      interface: ['eth0', 'eth1', 'wan1'][index % 3],\n      country: ['Unknown', 'China', 'Russia', 'North Korea'][index % 4],\n      alert_label: \"true_positive\"\n    };\n  }\n\n  private static generateSentinelOneSample(index: number) {\n    const classifications = ['Ransomware', 'Trojan', 'PUA', 'Infostealer'];\n    const verdicts = ['malicious', 'suspicious', 'benign'];\n    const detections = ['Generic.Trojan.Downloader', 'Backdoor.Win32.DarkKomet', 'Win32/Filecoder.AA'];\n    \n    return {\n      alert_id: randomUUID(),\n      agent_uuid: randomUUID(),\n      agent_ip: `192.168.1.${150 + index}`,\n      agent_os_type: ['windows', 'linux', 'mac'][index % 3],\n      agent_os_revision: String(60000 + index),\n      agent_version: \"5.2.1\",\n      agent_hostname: `endpoint-${String(index + 1).padStart(2, '0')}.corp.local`,\n      site_name: `Site ${index + 1}`,\n      group_name: ['IT Ops', 'Finance Dept', 'R&D'][index % 3],\n      account_name: `account${index}`,\n      threat_id: randomUUID(),\n      threat_classification: classifications[index % classifications.length],\n      detection_name: detections[index % detections.length],\n      file_path: `C:\\\\Users\\\\user${index}\\\\AppData\\\\Temp\\\\malware_${index}.exe`,\n      file_hash_sha256: `sentinel${index}${'0'.repeat(56)}`,\n      file_hash_md5: `md5hash${index}${'0'.repeat(24)}`,\n      file_hash_sha1: `sha1hash${index}${'0'.repeat(32)}`,\n      process_name: `process_${index}.exe`,\n      process_id: 1000 + index,\n      parent_process_name: \"explorer.exe\",\n      parent_process_id: 500 + index,\n      verdict: verdicts[index % verdicts.length],\n      initiated_by: ['user', 'system', 'remote'][index % 3],\n      storyline_id: randomUUID(),\n      mitigation_status: ['mitigated', 'pending', 'unresolved'][index % 3],\n      indicator_type: ['Process', 'File', 'Network Connection'][index % 3],\n      network_remote_ip: `203.0.113.${50 + index}`,\n      network_remote_port: 9000 + index,\n      network_protocol: protocols[index % protocols.length],\n      timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n      alert_label: \"true_positive\"\n    };\n  }\n}\n\nconst protocols = ['TCP', 'UDP', 'ICMP'];","size_bytes":13559},"server/analyticsService.ts":{"content":"import { storage } from \"./storage\";\nimport { type RawAlert, type Incident, type Action, type Feedback, type ModelMetric } from \"@shared/schema\";\n\nexport interface AnalyticsMetrics {\n  // Model Performance\n  precision: number;\n  recall: number;\n  accuracy: number;\n  f1Score: number;\n  \n  // Response Times\n  avgResponseTimeMinutes: number;\n  avgDetectionTime: number;\n  avgResolutionTime: number;\n  \n  // Volume Metrics\n  alertsProcessedToday: number;\n  alertsProcessedWeek: number;\n  incidentsCreatedToday: number;\n  incidentsResolvedToday: number;\n  \n  // Automation Metrics\n  automationRate: number;\n  falsePositiveRate: number;\n  threatDetectionRate: number;\n  escalationRate: number;\n  \n  // Analyst Performance\n  avgFeedbackRating: number;\n  analystProductivity: number;\n  manualReviewsToday: number;\n  \n  // Trend Data\n  weeklyTrends: {\n    alerts: number[];\n    incidents: number[];\n    responseTime: number[];\n  };\n  \n  // Severity Distribution\n  severityDistribution: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n  \n  // Source Performance\n  sourceMetrics: {\n    sourceId: string;\n    sourceName: string;\n    alertCount: number;\n    accuracy: number;\n    falsePositiveRate: number;\n  }[];\n}\n\nexport class AnalyticsService {\n  static async calculateRealTimeMetrics(): Promise<AnalyticsMetrics> {\n    const [alerts, incidents, actions, feedback, metrics, sources] = await Promise.all([\n      storage.getRawAlerts(),\n      storage.getIncidents(),\n      storage.getActions(),\n      storage.getFeedback(),\n      storage.getModelMetrics(),\n      storage.getSources()\n    ]);\n\n    const now = Date.now();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayTime = today.getTime();\n    \n    const weekAgo = new Date(now - 7 * 24 * 60 * 60 * 1000);\n\n    // Model Performance Metrics\n    const latestMetric = metrics[0];\n    const precision = latestMetric?.precision || this.calculatePrecisionFromData(incidents, alerts);\n    const recall = latestMetric?.recall || this.calculateRecallFromData(incidents, alerts);\n    const accuracy = latestMetric?.accuracy || this.calculateAccuracyFromData(incidents, alerts);\n    const f1Score = (2 * precision * recall) / (precision + recall) || 0;\n\n    // Response Time Calculations\n    const resolvedIncidents = incidents.filter(inc => inc.closedAt);\n    const avgResponseTimeMinutes = resolvedIncidents.length > 0\n      ? resolvedIncidents.reduce((sum, inc) => {\n          const responseTime = new Date(inc.closedAt!).getTime() - new Date(inc.createdAt).getTime();\n          return sum + responseTime;\n        }, 0) / resolvedIncidents.length / (1000 * 60)\n      : 0;\n\n    // Detection time (time from alert to incident creation)\n    const avgDetectionTime = this.calculateAvgDetectionTime(alerts, incidents);\n    \n    // Resolution time (time from incident creation to closure)\n    const avgResolutionTime = resolvedIncidents.length > 0\n      ? resolvedIncidents.reduce((sum, inc) => {\n          const resolutionTime = new Date(inc.closedAt!).getTime() - new Date(inc.createdAt).getTime();\n          return sum + resolutionTime;\n        }, 0) / resolvedIncidents.length / (1000 * 60 * 60) // Convert to hours\n      : 0;\n\n    // Volume Metrics\n    const alertsProcessedToday = alerts.filter(alert => \n      new Date(alert.receivedAt).getTime() >= todayTime\n    ).length;\n    \n    const alertsProcessedWeek = alerts.filter(alert => \n      new Date(alert.receivedAt) >= weekAgo\n    ).length;\n    \n    const incidentsCreatedToday = incidents.filter(inc => \n      new Date(inc.createdAt).getTime() >= todayTime\n    ).length;\n    \n    const incidentsResolvedToday = incidents.filter(inc => \n      inc.closedAt && new Date(inc.closedAt).getTime() >= todayTime\n    ).length;\n\n    // Automation Metrics\n    const automatedActions = actions.filter(action => \n      action.actionType === 'AUTOMATED_DETECTION' || \n      action.actionType === 'AUTO_QUARANTINE'\n    );\n    const automationRate = actions.length > 0 ? automatedActions.length / actions.length : 0;\n\n    const falsePositiveRate = this.calculateFalsePositiveRate(incidents, feedback);\n    const threatDetectionRate = this.calculateThreatDetectionRate(alerts, incidents);\n    const escalationRate = this.calculateEscalationRate(incidents, actions);\n\n    // Analyst Performance\n    const validFeedback = feedback.filter(f => f.rating !== null);\n    const avgFeedbackRating = validFeedback.length > 0\n      ? validFeedback.reduce((sum, f) => sum + (f.rating || 0), 0) / validFeedback.length\n      : 0;\n\n    const manualActions = actions.filter(action => \n      action.performedBy !== 'system' && action.performedBy !== null\n    );\n    const analystProductivity = this.calculateAnalystProductivity(manualActions, incidents);\n    \n    const manualReviewsToday = actions.filter(action => \n      action.actionType === 'ANALYST_REVIEW' && \n      new Date(action.performedAt).getTime() >= todayTime\n    ).length;\n\n    // Weekly Trends\n    const weeklyTrends = this.calculateWeeklyTrends(alerts, incidents);\n\n    // Severity Distribution\n    const severityDistribution = this.calculateSeverityDistribution(incidents);\n\n    // Source Performance\n    const sourceMetrics = await this.calculateSourceMetrics(sources, alerts, incidents);\n\n    return {\n      precision,\n      recall,\n      accuracy,\n      f1Score,\n      avgResponseTimeMinutes,\n      avgDetectionTime,\n      avgResolutionTime,\n      alertsProcessedToday,\n      alertsProcessedWeek,\n      incidentsCreatedToday,\n      incidentsResolvedToday,\n      automationRate,\n      falsePositiveRate,\n      threatDetectionRate,\n      escalationRate,\n      avgFeedbackRating,\n      analystProductivity,\n      manualReviewsToday,\n      weeklyTrends,\n      severityDistribution,\n      sourceMetrics\n    };\n  }\n\n  private static calculatePrecisionFromData(incidents: Incident[], alerts: RawAlert[]): number {\n    // Precision = True Positives / (True Positives + False Positives)\n    // For simplicity, assume high-severity resolved incidents are true positives\n    const truePositives = incidents.filter(inc => \n      inc.severity === 'critical' || inc.severity === 'high'\n    ).length;\n    \n    const falsePositives = incidents.filter(inc => \n      inc.severity === 'low' && inc.status === 'resolved'\n    ).length;\n    \n    return truePositives + falsePositives > 0 ? truePositives / (truePositives + falsePositives) : 0.85;\n  }\n\n  private static calculateRecallFromData(incidents: Incident[], alerts: RawAlert[]): number {\n    // Recall = True Positives / (True Positives + False Negatives)\n    // For simplicity, estimate based on alert-to-incident conversion rate\n    const criticalAlerts = alerts.filter(alert => alert.severity === 'critical').length;\n    const criticalIncidents = incidents.filter(inc => inc.severity === 'critical').length;\n    \n    return criticalAlerts > 0 ? Math.min(criticalIncidents / criticalAlerts, 1.0) : 0.82;\n  }\n\n  private static calculateAccuracyFromData(incidents: Incident[], alerts: RawAlert[]): number {\n    // Simplified accuracy calculation\n    const resolvedCorrectly = incidents.filter(inc => \n      inc.status === 'resolved' && (inc.severity === 'critical' || inc.severity === 'high')\n    ).length;\n    \n    const totalIncidents = incidents.length;\n    return totalIncidents > 0 ? resolvedCorrectly / totalIncidents : 0.88;\n  }\n\n  private static calculateAvgDetectionTime(alerts: RawAlert[], incidents: Incident[]): number {\n    // Calculate average time from first related alert to incident creation\n    let totalDetectionTime = 0;\n    let validIncidents = 0;\n\n    incidents.forEach(incident => {\n      // Find alerts that could be related to this incident (simplified)\n      const relatedAlerts = alerts.filter(alert => \n        Math.abs(new Date(alert.receivedAt).getTime() - new Date(incident.createdAt).getTime()) < 60 * 60 * 1000 // Within 1 hour\n      );\n\n      if (relatedAlerts.length > 0) {\n        const earliestAlert = relatedAlerts.reduce((earliest, alert) => \n          new Date(alert.receivedAt) < new Date(earliest.receivedAt) ? alert : earliest\n        );\n        \n        const detectionTime = new Date(incident.createdAt).getTime() - new Date(earliestAlert.receivedAt).getTime();\n        totalDetectionTime += detectionTime;\n        validIncidents++;\n      }\n    });\n\n    return validIncidents > 0 ? totalDetectionTime / validIncidents / (1000 * 60) : 8.5; // minutes\n  }\n\n  private static calculateFalsePositiveRate(incidents: Incident[], feedback: Feedback[]): number {\n    const negativeFeedback = feedback.filter(f => f.rating && f.rating <= 2).length;\n    const totalFeedback = feedback.length;\n    return totalFeedback > 0 ? negativeFeedback / totalFeedback : 0.05;\n  }\n\n  private static calculateThreatDetectionRate(alerts: RawAlert[], incidents: Incident[]): number {\n    const highSeverityAlerts = alerts.filter(alert => \n      alert.severity === 'critical' || alert.severity === 'high'\n    ).length;\n    \n    const threatIncidents = incidents.filter(inc => \n      inc.severity === 'critical' || inc.severity === 'high'\n    ).length;\n    \n    return highSeverityAlerts > 0 ? threatIncidents / highSeverityAlerts : 0.75;\n  }\n\n  private static calculateEscalationRate(incidents: Incident[], actions: Action[]): number {\n    const escalationActions = actions.filter(action => \n      action.actionType === 'ESCALATE' || action.actionType === 'ANALYST_ASSIGNMENT'\n    ).length;\n    \n    return incidents.length > 0 ? escalationActions / incidents.length : 0.25;\n  }\n\n  private static calculateAnalystProductivity(manualActions: Action[], incidents: Incident[]): number {\n    // Productivity = Actions per incident (higher is more productive)\n    return incidents.length > 0 ? manualActions.length / incidents.length : 2.3;\n  }\n\n  private static calculateWeeklyTrends(alerts: RawAlert[], incidents: Incident[]): {\n    alerts: number[];\n    incidents: number[];\n    responseTime: number[];\n  } {\n    const trends = {\n      alerts: [] as number[],\n      incidents: [] as number[],\n      responseTime: [] as number[]\n    };\n\n    // Calculate daily metrics for the last 7 days\n    for (let i = 6; i >= 0; i--) {\n      const dayStart = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n      dayStart.setHours(0, 0, 0, 0);\n      const dayEnd = new Date(dayStart);\n      dayEnd.setHours(23, 59, 59, 999);\n\n      const dayAlerts = alerts.filter(alert => {\n        const alertDate = new Date(alert.receivedAt);\n        return alertDate >= dayStart && alertDate <= dayEnd;\n      }).length;\n\n      const dayIncidents = incidents.filter(inc => {\n        const incDate = new Date(inc.createdAt);\n        return incDate >= dayStart && incDate <= dayEnd;\n      });\n\n      const dayResponseTime = dayIncidents.length > 0\n        ? dayIncidents.reduce((sum, inc) => {\n            const responseTime = inc.closedAt \n              ? new Date(inc.closedAt).getTime() - new Date(inc.createdAt).getTime()\n              : Date.now() - new Date(inc.createdAt).getTime();\n            return sum + responseTime;\n          }, 0) / dayIncidents.length / (1000 * 60) // minutes\n        : 0;\n\n      trends.alerts.push(dayAlerts);\n      trends.incidents.push(dayIncidents.length);\n      trends.responseTime.push(Math.round(dayResponseTime * 10) / 10);\n    }\n\n    return trends;\n  }\n\n  private static calculateSeverityDistribution(incidents: Incident[]): {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n  } {\n    const distribution = { critical: 0, high: 0, medium: 0, low: 0 };\n    \n    incidents.forEach(incident => {\n      distribution[incident.severity]++;\n    });\n\n    return distribution;\n  }\n\n  private static async calculateSourceMetrics(sources: any[], alerts: RawAlert[], incidents: Incident[]): Promise<{\n    sourceId: string;\n    sourceName: string;\n    alertCount: number;\n    accuracy: number;\n    falsePositiveRate: number;\n  }[]> {\n    return sources.map(source => {\n      const sourceAlerts = alerts.filter(alert => alert.sourceId === source.id);\n      \n      // Simplified accuracy calculation per source\n      const accuracy = sourceAlerts.length > 0 \n        ? Math.random() * 0.2 + 0.8 // 80-100% for demo\n        : 0;\n      \n      const falsePositiveRate = Math.random() * 0.1; // 0-10% for demo\n\n      return {\n        sourceId: source.id,\n        sourceName: source.name,\n        alertCount: sourceAlerts.length,\n        accuracy,\n        falsePositiveRate\n      };\n    });\n  }\n}","size_bytes":12460},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport type { RequestHandler, Request } from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\n// Session interface for TypeScript\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    user?: User;\n  }\n}\n\nexport interface AuthRequest extends Request {\n  session: session.Session & Partial<session.SessionData> & {\n    userId?: string;\n    user?: User;\n  };\n}\n\nexport class AuthService {\n  // Hash password using bcrypt\n  static async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n  }\n\n  // Verify password against hash\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(password, hash);\n  }\n\n  // Register new user\n  static async registerUser(userData: {\n    email: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n    role?: 'analyst' | 'admin';\n  }) {\n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(userData.email);\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Hash password\n    const hashedPassword = await this.hashPassword(userData.password);\n\n    // Create user\n    const user = await storage.createUser({\n      email: userData.email,\n      password: hashedPassword,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      role: userData.role || 'analyst',\n    });\n\n    // Return user without password\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  // Login user\n  static async loginUser(email: string, password: string) {\n    // Get user with password for verification\n    const userWithPassword = await storage.getUserByEmailWithPassword(email);\n    if (!userWithPassword) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Verify password\n    const isValidPassword = await this.verifyPassword(password, userWithPassword.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Return user without password\n    const { password: _, ...user } = userWithPassword;\n    return user;\n  }\n\n  // Get current user from session\n  static async getCurrentUser(req: AuthRequest): Promise<User | null> {\n    if (!req.session.userId) {\n      return null;\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    return user || null;\n  }\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = async (req: any, res, next) => {\n  try {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      req.session.userId = undefined;\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Optional authentication middleware (doesn't require auth but adds user if available)\nexport const optionalAuth: RequestHandler = async (req: any, res, next) => {\n  try {\n    if (req.session.userId) {\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        req.user = user;\n      }\n    }\n    next();\n  } catch (error) {\n    console.error('Optional auth error:', error);\n    next();\n  }\n};\n\n// Role-based authentication middleware\nexport const requireRole = (role: 'analyst' | 'admin'): RequestHandler => {\n  return async (req: any, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (req.user.role !== role && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden: Insufficient permissions\" });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Role authorization error:', error);\n      res.status(403).json({ message: \"Forbidden\" });\n    }\n  };\n};","size_bytes":4172},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/exportService.ts":{"content":"import { storage } from \"./storage\";\nimport { AnalyticsService } from \"./analyticsService\";\nimport type { Incident, RawAlert, Action, Feedback } from \"@shared/schema\";\n\nexport interface ExportOptions {\n  format: 'csv' | 'json';\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  filters?: {\n    severity?: string[];\n    status?: string[];\n    sourceId?: string;\n  };\n}\n\nexport class ExportService {\n  static async exportIncidents(options: ExportOptions): Promise<string> {\n    const incidents = await storage.getIncidents();\n    const actions = await storage.getActions();\n    \n    // Apply filters and date range\n    let filteredIncidents = incidents;\n    \n    if (options.dateRange) {\n      filteredIncidents = incidents.filter(incident => {\n        const createdAt = new Date(incident.createdAt);\n        return createdAt >= options.dateRange!.start && createdAt <= options.dateRange!.end;\n      });\n    }\n    \n    if (options.filters?.severity?.length) {\n      filteredIncidents = filteredIncidents.filter(incident =>\n        options.filters!.severity!.includes(incident.severity)\n      );\n    }\n    \n    if (options.filters?.status?.length) {\n      filteredIncidents = filteredIncidents.filter(incident =>\n        options.filters!.status!.includes(incident.status)\n      );\n    }\n\n    // Enrich incidents with action counts and response times\n    const enrichedData = filteredIncidents.map(incident => {\n      const incidentActions = actions.filter(action => action.incidentId === incident.id);\n      const responseTime = incident.closedAt \n        ? Math.round((new Date(incident.closedAt).getTime() - new Date(incident.createdAt).getTime()) / (1000 * 60))\n        : null;\n      \n      return {\n        id: incident.id,\n        title: incident.title,\n        description: incident.description || 'No description available',\n        severity: incident.severity,\n        status: incident.status,\n        createdAt: new Date(incident.createdAt).toISOString(),\n        closedAt: incident.closedAt ? new Date(incident.closedAt).toISOString() : null,\n        responseTimeMinutes: responseTime,\n        actionCount: incidentActions.length,\n        assignedTo: incident.assignedTo || 'Unassigned',\n        escalated: incidentActions.some(action => action.actionType === 'ESCALATE') ? 'Yes' : 'No'\n      };\n    });\n\n    if (options.format === 'csv') {\n      return this.convertToCSV(enrichedData);\n    } else {\n      return JSON.stringify({\n        exportedAt: new Date().toISOString(),\n        totalCount: enrichedData.length,\n        filters: options.filters,\n        dateRange: options.dateRange,\n        data: enrichedData\n      }, null, 2);\n    }\n  }\n\n  static async exportAlerts(options: ExportOptions): Promise<string> {\n    const alerts = await storage.getRawAlerts();\n    const sources = await storage.getSources();\n    \n    // Apply filters and date range\n    let filteredAlerts = alerts;\n    \n    if (options.dateRange) {\n      filteredAlerts = alerts.filter(alert => {\n        const receivedAt = new Date(alert.receivedAt);\n        return receivedAt >= options.dateRange!.start && receivedAt <= options.dateRange!.end;\n      });\n    }\n    \n    if (options.filters?.severity?.length) {\n      filteredAlerts = filteredAlerts.filter(alert =>\n        alert.severity && options.filters!.severity!.includes(alert.severity)\n      );\n    }\n    \n    if (options.filters?.sourceId) {\n      filteredAlerts = filteredAlerts.filter(alert =>\n        alert.sourceId === options.filters!.sourceId\n      );\n    }\n\n    // Enrich alerts with source information\n    const enrichedData = filteredAlerts.map(alert => {\n      const source = sources.find(s => s.id === alert.sourceId);\n      \n      return {\n        id: alert.id,\n        sourceId: alert.sourceId,\n        sourceName: source?.name || 'Unknown',\n        sourceType: source?.type || 'Unknown',\n        severity: alert.severity || 'Unknown',\n        type: alert.type || 'Security Alert',\n        description: alert.description || 'Automated security alert',\n        receivedAt: new Date(alert.receivedAt).toISOString(),\n        dataSize: JSON.stringify(alert.rawData).length\n      };\n    });\n\n    if (options.format === 'csv') {\n      return this.convertToCSV(enrichedData);\n    } else {\n      return JSON.stringify({\n        exportedAt: new Date().toISOString(),\n        totalCount: enrichedData.length,\n        filters: options.filters,\n        dateRange: options.dateRange,\n        data: enrichedData\n      }, null, 2);\n    }\n  }\n\n  static async exportAnalytics(options: ExportOptions): Promise<string> {\n    const analytics = await AnalyticsService.calculateRealTimeMetrics();\n    const incidents = await storage.getIncidents();\n    const alerts = await storage.getRawAlerts();\n    \n    // Calculate additional statistics for export\n    const now = new Date();\n    const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    \n    const recentIncidents = incidents.filter(inc => new Date(inc.createdAt) >= last30Days);\n    const weeklyIncidents = incidents.filter(inc => new Date(inc.createdAt) >= last7Days);\n    const recentAlerts = alerts.filter(alert => new Date(alert.receivedAt) >= last30Days);\n    \n    const reportData = {\n      generatedAt: new Date().toISOString(),\n      reportPeriod: options.dateRange || {\n        start: last30Days.toISOString(),\n        end: now.toISOString()\n      },\n      summary: {\n        totalIncidents: incidents.length,\n        incidentsLast30Days: recentIncidents.length,\n        incidentsLast7Days: weeklyIncidents.length,\n        totalAlerts: alerts.length,\n        alertsLast30Days: recentAlerts.length,\n        avgResponseTimeMinutes: analytics.avgResponseTimeMinutes.toFixed(2),\n        automationRate: (analytics.automationRate * 100).toFixed(1) + '%',\n        falsePositiveRate: (analytics.falsePositiveRate * 100).toFixed(1) + '%'\n      },\n      performanceMetrics: {\n        precision: (analytics.precision * 100).toFixed(1) + '%',\n        recall: (analytics.recall * 100).toFixed(1) + '%',\n        f1Score: (analytics.f1Score * 100).toFixed(1) + '%',\n        accuracy: (analytics.accuracy * 100).toFixed(1) + '%',\n        threatDetectionRate: (analytics.threatDetectionRate * 100).toFixed(1) + '%'\n      },\n      volumeMetrics: {\n        alertsProcessedToday: analytics.alertsProcessedToday,\n        incidentsCreatedToday: analytics.incidentsCreatedToday,\n        incidentsResolvedToday: analytics.incidentsResolvedToday,\n        manualReviewsToday: analytics.manualReviewsToday\n      },\n      severityDistribution: analytics.severityDistribution,\n      weeklyTrends: analytics.weeklyTrends,\n      sourceMetrics: analytics.sourceMetrics\n    };\n\n    if (options.format === 'csv') {\n      // For CSV, flatten the complex structure\n      const flatData = [\n        // Summary metrics\n        { metric: 'Total Incidents', value: reportData.summary.totalIncidents, category: 'Summary' },\n        { metric: 'Incidents (30 days)', value: reportData.summary.incidentsLast30Days, category: 'Summary' },\n        { metric: 'Incidents (7 days)', value: reportData.summary.incidentsLast7Days, category: 'Summary' },\n        { metric: 'Total Alerts', value: reportData.summary.totalAlerts, category: 'Summary' },\n        { metric: 'Alerts (30 days)', value: reportData.summary.alertsLast30Days, category: 'Summary' },\n        { metric: 'Avg Response Time (min)', value: reportData.summary.avgResponseTimeMinutes, category: 'Summary' },\n        { metric: 'Automation Rate', value: reportData.summary.automationRate, category: 'Summary' },\n        { metric: 'False Positive Rate', value: reportData.summary.falsePositiveRate, category: 'Summary' },\n        \n        // Performance metrics\n        { metric: 'Precision', value: reportData.performanceMetrics.precision, category: 'Performance' },\n        { metric: 'Recall', value: reportData.performanceMetrics.recall, category: 'Performance' },\n        { metric: 'F1 Score', value: reportData.performanceMetrics.f1Score, category: 'Performance' },\n        { metric: 'Accuracy', value: reportData.performanceMetrics.accuracy, category: 'Performance' },\n        { metric: 'Threat Detection Rate', value: reportData.performanceMetrics.threatDetectionRate, category: 'Performance' },\n        \n        // Volume metrics\n        { metric: 'Alerts Processed Today', value: reportData.volumeMetrics.alertsProcessedToday, category: 'Volume' },\n        { metric: 'Incidents Created Today', value: reportData.volumeMetrics.incidentsCreatedToday, category: 'Volume' },\n        { metric: 'Incidents Resolved Today', value: reportData.volumeMetrics.incidentsResolvedToday, category: 'Volume' },\n        { metric: 'Manual Reviews Today', value: reportData.volumeMetrics.manualReviewsToday, category: 'Volume' },\n        \n        // Severity distribution\n        { metric: 'Critical Incidents', value: reportData.severityDistribution.critical, category: 'Severity' },\n        { metric: 'High Incidents', value: reportData.severityDistribution.high, category: 'Severity' },\n        { metric: 'Medium Incidents', value: reportData.severityDistribution.medium, category: 'Severity' },\n        { metric: 'Low Incidents', value: reportData.severityDistribution.low, category: 'Severity' }\n      ];\n      \n      return this.convertToCSV(flatData);\n    } else {\n      return JSON.stringify(reportData, null, 2);\n    }\n  }\n\n  static async exportActions(options: ExportOptions): Promise<string> {\n    const actions = await storage.getActions();\n    const incidents = await storage.getIncidents();\n    \n    // Apply date range filter\n    let filteredActions = actions;\n    \n    if (options.dateRange) {\n      filteredActions = actions.filter(action => {\n        const performedAt = new Date(action.performedAt);\n        return performedAt >= options.dateRange!.start && performedAt <= options.dateRange!.end;\n      });\n    }\n\n    // Enrich actions with incident information\n    const enrichedData = filteredActions.map(action => {\n      const incident = incidents.find(inc => inc.id === action.incidentId);\n      \n      return {\n        id: action.id,\n        incidentId: action.incidentId,\n        incidentSeverity: incident?.severity || 'Unknown',\n        incidentStatus: incident?.status || 'Unknown',\n        actionType: action.actionType,\n        performedBy: action.performedBy || 'System',\n        performedAt: new Date(action.performedAt).toISOString(),\n        payload: JSON.stringify(action.payload),\n        automated: action.performedBy === 'system' ? 'Yes' : 'No',\n        bulkOperation: (action.payload as any)?.bulkOperation ? 'Yes' : 'No'\n      };\n    });\n\n    if (options.format === 'csv') {\n      return this.convertToCSV(enrichedData);\n    } else {\n      return JSON.stringify({\n        exportedAt: new Date().toISOString(),\n        totalCount: enrichedData.length,\n        dateRange: options.dateRange,\n        data: enrichedData\n      }, null, 2);\n    }\n  }\n\n  private static convertToCSV(data: any[]): string {\n    if (data.length === 0) return '';\n    \n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row =>\n        headers.map(header => {\n          const value = row[header];\n          // Handle values that contain commas, quotes, or newlines\n          if (typeof value === 'string' && (value.includes(',') || value.includes('\"') || value.includes('\\n'))) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return value !== null && value !== undefined ? value : '';\n        }).join(',')\n      )\n    ].join('\\n');\n    \n    return csvContent;\n  }\n\n  static getExportFilename(type: string, format: string): string {\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');\n    return `soc-${type}-export-${timestamp}.${format}`;\n  }\n}","size_bytes":11871},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { kafkaService } from \"./kafka\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Custom API logger middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize Kafka service for enterprise security event streaming (non-blocking)\n  log('🎯 Initializing Kafka service for SOC operations...');\n  // Don't await Kafka initialization to prevent blocking app startup\n  kafkaService.initialize().catch(error => {\n    log('⚠️ Kafka initialization failed, continuing without Kafka:', error.message);\n  });\n  \n  const server = await registerRoutes(app);\n\n  // Error handler middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite in development mode only\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use env.PORT or fallback to 5000\n  const port = parseInt(process.env.PORT || \"5000\");\n\n  // Graceful startup with EADDRINUSE check\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      // reusePort: true,\n    },\n    () => {\n      log(`✅ Server is running at http://localhost:${port}`);\n    }\n  ).on(\"error\", (err: any) => {\n    if (err.code === \"EADDRINUSE\") {\n      console.error(`❌ Port ${port} is already in use. Try killing the process or use a different port.`);\n      process.exit(1);\n    } else {\n      console.error(`❌ Unexpected server error: ${err.message}`);\n      process.exit(1);\n    }\n  });\n})();\n","size_bytes":2606},"server/kafka.ts":{"content":"import { Kafka, Consumer, Producer, logLevel } from 'kafkajs';\nimport { storage } from './storage';\nimport type { WebSocket } from 'ws';\nimport { OCSFTransformationService, type OCSFEvent } from './ocsf';\n\n// Kafka configuration for SOC Dashboard\nconst kafka = new Kafka({\n  clientId: 'soc-dashboard',\n  // Using local Kafka broker for development\n  // In production, this would be your Kafka cluster\n  brokers: ['localhost:9092'],\n  logLevel: logLevel.WARN,\n  retry: {\n    initialRetryTime: 300,\n    retries: 8\n  }\n});\n\n// Kafka Topics for SOC Operations\nexport const KAFKA_TOPICS = {\n  SECURITY_ALERTS: 'security-alerts',\n  INCIDENTS: 'incidents', \n  THREAT_INTEL: 'threat-intelligence',\n  SYSTEM_METRICS: 'system-metrics',\n  AUDIT_LOGS: 'audit-logs',\n  // OCSF Topics\n  OCSF_NETWORK_ACTIVITY: 'ocsf-network-activity',\n  OCSF_SYSTEM_ACTIVITY: 'ocsf-system-activity',\n  OCSF_SECURITY_FINDING: 'ocsf-security-finding',\n  OCSF_AUTHENTICATION: 'ocsf-authentication'\n} as const;\n\n// Standardized Security Event Schema\nexport interface SecurityEvent {\n  id: string;\n  timestamp: string;\n  source: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'malware' | 'intrusion' | 'policy_violation' | 'anomaly' | 'threat_intel';\n  title: string;\n  description: string;\n  metadata: {\n    source_ip?: string;\n    destination_ip?: string;\n    user?: string;\n    file_hash?: string;\n    rule_id?: string;\n    [key: string]: any;\n  };\n  raw_data: any;\n}\n\nclass KafkaService {\n  private producer: Producer;\n  private consumer: Consumer;\n  private clients: Set<WebSocket> = new Set();\n\n  constructor() {\n    this.producer = kafka.producer({\n      transactionTimeout: 30000,\n    });\n    \n    this.consumer = kafka.consumer({ \n      groupId: 'soc-dashboard-group',\n      sessionTimeout: 30000,\n      heartbeatInterval: 3000,\n    });\n  }\n\n  async initialize() {\n    try {\n      // Connect producer and consumer\n      await this.producer.connect();\n      await this.consumer.connect();\n\n      // Subscribe to security event topics\n      await this.consumer.subscribe({ \n        topics: Object.values(KAFKA_TOPICS),\n        fromBeginning: false \n      });\n\n      console.log('🎯 Kafka service initialized for SOC Dashboard');\n      \n      // Start consuming events\n      this.startEventConsumer();\n      \n    } catch (error) {\n      console.error('❌ Failed to initialize Kafka service:', error);\n      // Graceful fallback - continue without Kafka for development\n      console.log('📡 Continuing without Kafka - using WebSocket only mode');\n    }\n  }\n\n  // Producer: Ingest security events from various sources\n  async publishSecurityEvent(event: SecurityEvent) {\n    try {\n      // Publish original event\n      await this.producer.send({\n        topic: KAFKA_TOPICS.SECURITY_ALERTS,\n        messages: [\n          {\n            key: event.id,\n            value: JSON.stringify(event),\n            timestamp: new Date(event.timestamp).getTime().toString(),\n            headers: {\n              source: event.source,\n              severity: event.severity,\n              type: event.type,\n              format: 'custom'\n            }\n          }\n        ]\n      });\n\n      // Transform to OCSF and publish to OCSF topic\n      await this.publishOCSFEvent(event);\n\n      console.log(`📨 Published security event: ${event.id} from ${event.source}`);\n    } catch (error) {\n      console.error('❌ Failed to publish security event:', error);\n      // Fallback: store directly in database\n      await this.fallbackStoreEvent(event);\n    }\n  }\n\n  // Producer: Publish OCSF-formatted events\n  async publishOCSFEvent(event: SecurityEvent | OCSFEvent) {\n    try {\n      // Transform to OCSF if it's a custom SecurityEvent\n      const ocsfEvent = 'class_uid' in event ? \n        event : \n        OCSFTransformationService.transformToOCSF(event);\n\n      const topic = this.getOCSFTopic(ocsfEvent.class_uid);\n\n      await this.producer.send({\n        topic,\n        messages: [\n          {\n            key: ocsfEvent.unmapped?.original_id || `ocsf_${Date.now()}`,\n            value: JSON.stringify(ocsfEvent),\n            timestamp: ocsfEvent.time.toString(),\n            headers: {\n              class_uid: ocsfEvent.class_uid.toString(),\n              class_name: ocsfEvent.class_name,\n              severity_id: ocsfEvent.severity_id.toString(),\n              format: 'ocsf'\n            }\n          }\n        ]\n      });\n\n      console.log(`📨 Published OCSF event: ${ocsfEvent.class_name} (${ocsfEvent.class_uid})`);\n    } catch (error) {\n      console.error('❌ Failed to publish OCSF event:', error);\n    }\n  }\n\n  // Get appropriate OCSF topic based on class UID\n  private getOCSFTopic(classUid: number): string {\n    switch (classUid) {\n      case 4001: return KAFKA_TOPICS.OCSF_NETWORK_ACTIVITY;\n      case 1001: return KAFKA_TOPICS.OCSF_SYSTEM_ACTIVITY;\n      case 2001: return KAFKA_TOPICS.OCSF_SECURITY_FINDING;\n      case 3002: return KAFKA_TOPICS.OCSF_AUTHENTICATION;\n      default: return KAFKA_TOPICS.OCSF_SECURITY_FINDING;\n    }\n  }\n\n  // Consumer: Process events and update dashboard\n  private async startEventConsumer() {\n    await this.consumer.run({\n      eachMessage: async ({ topic, partition, message, heartbeat }) => {\n        try {\n          if (!message.value) return;\n\n          const format = message.headers?.format?.toString() || 'custom';\n          \n          if (format === 'ocsf') {\n            // Process OCSF event\n            const ocsfEvent = JSON.parse(message.value.toString()) as OCSFEvent;\n            await this.processOCSFEvent(ocsfEvent, topic);\n            \n            // Convert to custom format for WebSocket broadcast\n            const customEvent = OCSFTransformationService.transformFromOCSF(ocsfEvent);\n            this.broadcastToClients({\n              type: 'security_event',\n              data: customEvent,\n              ocsf: ocsfEvent\n            });\n          } else {\n            // Process custom SecurityEvent\n            const event = JSON.parse(message.value.toString()) as SecurityEvent;\n            \n            // Process based on topic\n            switch (topic) {\n              case KAFKA_TOPICS.SECURITY_ALERTS:\n                await this.processSecurityAlert(event);\n                break;\n              case KAFKA_TOPICS.INCIDENTS:\n                await this.processIncident(event);\n                break;\n              case KAFKA_TOPICS.THREAT_INTEL:\n                await this.processThreatIntel(event);\n                break;\n              default:\n                console.log(`📥 Received event from topic: ${topic}`);\n            }\n\n            // Send to connected WebSocket clients for real-time updates\n            this.broadcastToClients({\n              type: 'security_event',\n              data: event\n            });\n          }\n\n          // Call heartbeat to prevent session timeout\n          await heartbeat();\n\n        } catch (error) {\n          console.error('❌ Error processing Kafka message:', error);\n        }\n      }\n    });\n  }\n\n  // Process OCSF events\n  private async processOCSFEvent(ocsfEvent: OCSFEvent, topic: string) {\n    try {\n      // Convert OCSF to custom format for storage\n      const customEvent = OCSFTransformationService.transformFromOCSF(ocsfEvent);\n      \n      // Store in database using existing logic\n      await this.processSecurityAlert(customEvent);\n      \n      // Additional OCSF-specific processing\n      await this.storeOCSFEvent(ocsfEvent);\n      \n      console.log(`🔄 Processed OCSF event: ${ocsfEvent.class_name} from ${topic}`);\n    } catch (error) {\n      console.error('❌ Error processing OCSF event:', error);\n    }\n  }\n\n  // Store OCSF event with full schema\n  private async storeOCSFEvent(ocsfEvent: OCSFEvent) {\n    try {\n      // Store raw OCSF event for compliance and analysis\n      await storage.createOCSFEvent({\n        classUid: ocsfEvent.class_uid,\n        className: ocsfEvent.class_name,\n        categoryUid: ocsfEvent.category_uid,\n        categoryName: ocsfEvent.category_name,\n        activityId: ocsfEvent.activity_id,\n        activityName: ocsfEvent.activity_name,\n        severityId: ocsfEvent.severity_id,\n        severity: ocsfEvent.severity,\n        time: new Date(ocsfEvent.time),\n        message: ocsfEvent.message,\n        rawData: ocsfEvent,\n        observables: JSON.stringify(ocsfEvent.observables || [])\n      });\n    } catch (error) {\n      console.error('❌ Error storing OCSF event:', error);\n    }\n  }\n\n  // Process security alerts from SIEM, EDR, Firewall systems\n  private async processSecurityAlert(event: SecurityEvent) {\n    try {\n      // Store normalized alert in database\n      await storage.createNormalizedAlert({\n        sourceId: event.source,\n        originalId: event.id,\n        timestamp: new Date(event.timestamp),\n        severity: event.severity,\n        alertType: event.type,\n        title: event.title,\n        description: event.description,\n        sourceIp: event.metadata.source_ip,\n        destinationIp: event.metadata.destination_ip,\n        username: event.metadata.user,\n        ruleId: event.metadata.rule_id,\n        rawData: event.raw_data,\n        status: 'open'\n      });\n\n      console.log(`🚨 Processed security alert: ${event.title} (${event.severity})`);\n\n    } catch (error) {\n      console.error('❌ Error processing security alert:', error);\n    }\n  }\n\n  // Process incident management events\n  private async processIncident(event: SecurityEvent) {\n    console.log(`🎯 Processing incident: ${event.title}`);\n    // Incident processing logic would go here\n  }\n\n  // Process threat intelligence feeds\n  private async processThreatIntel(event: SecurityEvent) {\n    console.log(`🔍 Processing threat intel: ${event.title}`);\n    // Threat intelligence processing logic would go here\n  }\n\n  // Fallback storage when Kafka is unavailable\n  private async fallbackStoreEvent(event: SecurityEvent) {\n    try {\n      await storage.createNormalizedAlert({\n        sourceId: event.source,\n        originalId: event.id,\n        timestamp: new Date(event.timestamp),\n        severity: event.severity,\n        alertType: event.type,\n        title: event.title,\n        description: event.description,\n        sourceIp: event.metadata.source_ip,\n        destinationIp: event.metadata.destination_ip,\n        username: event.metadata.user,\n        ruleId: event.metadata.rule_id,\n        rawData: event.raw_data,\n        status: 'open'\n      });\n      \n      console.log(`💾 Stored event as fallback: ${event.id}`);\n    } catch (error) {\n      console.error('❌ Fallback storage failed:', error);\n    }\n  }\n\n  // WebSocket client management\n  addClient(ws: WebSocket) {\n    this.clients.add(ws);\n    console.log(`📡 WebSocket client connected. Total: ${this.clients.size}`);\n  }\n\n  removeClient(ws: WebSocket) {\n    this.clients.delete(ws);\n    console.log(`📡 WebSocket client disconnected. Total: ${this.clients.size}`);\n  }\n\n  // Broadcast to all connected dashboard clients\n  private broadcastToClients(message: any) {\n    const payload = JSON.stringify(message);\n    this.clients.forEach(client => {\n      if (client.readyState === 1) { // WebSocket.OPEN\n        try {\n          client.send(payload);\n        } catch (error) {\n          console.error('Error sending to WebSocket client:', error);\n          this.clients.delete(client);\n        }\n      }\n    });\n  }\n\n  // Simulate security events for demo purposes\n  async simulateSecurityEvents() {\n    const demoEvents: SecurityEvent[] = [\n      {\n        id: `evt_${Date.now()}_1`,\n        timestamp: new Date().toISOString(),\n        source: 'Firewall-PaloAlto',\n        severity: 'high',\n        type: 'intrusion',\n        title: 'Suspicious Port Scan Detected',\n        description: 'Multiple port scan attempts from external IP',\n        metadata: {\n          source_ip: '192.168.1.100',\n          destination_ip: '10.0.1.50',\n          rule_id: 'FW-001'\n        },\n        raw_data: { protocol: 'TCP', ports: [22, 80, 443, 3389] }\n      },\n      {\n        id: `evt_${Date.now()}_2`,\n        timestamp: new Date().toISOString(),\n        source: 'EDR-CrowdStrike',\n        severity: 'critical',\n        type: 'malware',\n        title: 'Malware Detection: Trojan.Win32.Generic',\n        description: 'Malicious executable detected and quarantined',\n        metadata: {\n          user: 'john.smith@company.com',\n          file_hash: 'a1b2c3d4e5f6789012345678901234567890abcd',\n          rule_id: 'ML-DETECTION-001'\n        },\n        raw_data: { file_path: 'C:\\\\temp\\\\suspicious.exe', action: 'quarantined' }\n      }\n    ];\n\n    for (const event of demoEvents) {\n      await this.publishSecurityEvent(event);\n      // Small delay between events\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n  }\n\n  async shutdown() {\n    try {\n      await this.producer.disconnect();\n      await this.consumer.disconnect();\n      console.log('🔌 Kafka service disconnected');\n    } catch (error) {\n      console.error('❌ Error shutting down Kafka service:', error);\n    }\n  }\n}\n\nexport const kafkaService = new KafkaService();\n\n// API endpoint helpers for external systems\nexport class SecurityEventIngestion {\n  \n  // Endpoint for SIEM systems to send alerts\n  static async ingestSIEMAlert(data: any) {\n    const event: SecurityEvent = {\n      id: `siem_${data.id || Date.now()}`,\n      timestamp: data.timestamp || new Date().toISOString(),\n      source: data.source || 'SIEM-Unknown',\n      severity: data.severity || 'medium',\n      type: data.type || 'anomaly',\n      title: data.title || 'SIEM Alert',\n      description: data.description || 'Alert from SIEM system',\n      metadata: data.metadata || {},\n      raw_data: data\n    };\n\n    await kafkaService.publishSecurityEvent(event);\n    return event;\n  }\n\n  // Endpoint for EDR systems\n  static async ingestEDRAlert(data: any) {\n    const event: SecurityEvent = {\n      id: `edr_${data.id || Date.now()}`,\n      timestamp: data.timestamp || new Date().toISOString(),\n      source: data.source || 'EDR-Unknown',\n      severity: data.severity || 'medium',\n      type: data.type || 'malware',\n      title: data.title || 'EDR Detection',\n      description: data.description || 'Detection from EDR system',\n      metadata: data.metadata || {},\n      raw_data: data\n    };\n\n    await kafkaService.publishSecurityEvent(event);\n    return event;\n  }\n\n  // Endpoint for Firewall systems\n  static async ingestFirewallAlert(data: any) {\n    const event: SecurityEvent = {\n      id: `fw_${data.id || Date.now()}`,\n      timestamp: data.timestamp || new Date().toISOString(),\n      source: data.source || 'Firewall-Unknown',\n      severity: data.severity || 'medium',\n      type: data.type || 'intrusion',\n      title: data.title || 'Firewall Alert',\n      description: data.description || 'Alert from firewall system',\n      metadata: data.metadata || {},\n      raw_data: data\n    };\n\n    await kafkaService.publishSecurityEvent(event);\n    return event;\n  }\n\n  // === OCSF Ingestion Endpoints ===\n  \n  // Endpoint for OCSF Network Activity events\n  static async ingestOCSFNetworkActivity(data: any) {\n    // Validate that it's a Network Activity event\n    if (data.class_uid !== 4001) {\n      throw new Error('Invalid OCSF Network Activity event: class_uid must be 4001');\n    }\n    \n    await kafkaService.publishOCSFEvent(data as OCSFEvent);\n    return data;\n  }\n  \n  // Endpoint for OCSF System Activity events\n  static async ingestOCSFSystemActivity(data: any) {\n    // Validate that it's a System Activity event\n    if (data.class_uid !== 1001) {\n      throw new Error('Invalid OCSF System Activity event: class_uid must be 1001');\n    }\n    \n    await kafkaService.publishOCSFEvent(data as OCSFEvent);\n    return data;\n  }\n  \n  // Endpoint for OCSF Security Finding events\n  static async ingestOCSFSecurityFinding(data: any) {\n    // Validate that it's a Security Finding event\n    if (data.class_uid !== 2001) {\n      throw new Error('Invalid OCSF Security Finding event: class_uid must be 2001');\n    }\n    \n    await kafkaService.publishOCSFEvent(data as OCSFEvent);\n    return data;\n  }\n  \n  // Endpoint for OCSF Authentication events\n  static async ingestOCSFAuthentication(data: any) {\n    // Validate that it's an Authentication event\n    if (data.class_uid !== 3002) {\n      throw new Error('Invalid OCSF Authentication event: class_uid must be 3002');\n    }\n    \n    await kafkaService.publishOCSFEvent(data as OCSFEvent);\n    return data;\n  }\n  \n  // Generic OCSF ingestion endpoint\n  static async ingestOCSFEvent(data: any) {\n    // Basic OCSF validation\n    if (!data.class_uid || !data.class_name || !data.time) {\n      throw new Error('Invalid OCSF event: missing required fields (class_uid, class_name, time)');\n    }\n    \n    await kafkaService.publishOCSFEvent(data as OCSFEvent);\n    return data;\n  }\n  \n  // Bulk OCSF ingestion endpoint\n  static async ingestOCSFEventsBulk(events: any[]) {\n    const results = [];\n    \n    for (const event of events) {\n      try {\n        const result = await this.ingestOCSFEvent(event);\n        results.push({ success: true, event: result });\n      } catch (error) {\n        results.push({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Unknown error',\n          event\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  // Transform legacy events to OCSF and ingest\n  static async transformAndIngestLegacyEvent(data: any, sourceType: 'siem' | 'edr' | 'firewall') {\n    // First create a custom SecurityEvent\n    let customEvent: SecurityEvent;\n    \n    switch (sourceType) {\n      case 'siem':\n        customEvent = await this.ingestSIEMAlert(data);\n        break;\n      case 'edr':\n        customEvent = await this.ingestEDRAlert(data);\n        break;\n      case 'firewall':\n        customEvent = await this.ingestFirewallAlert(data);\n        break;\n    }\n    \n    // Transform to OCSF and publish\n    const ocsfEvent = OCSFTransformationService.transformToOCSF(customEvent);\n    await kafkaService.publishOCSFEvent(ocsfEvent);\n    \n    return {\n      customEvent,\n      ocsfEvent\n    };\n  }\n}","size_bytes":18128},"server/normalization.ts":{"content":"import { type RawAlert, type InsertRawAlert } from \"@shared/schema\";\n\n// Normalized alert structure that all sources will be converted to\nexport interface NormalizedAlertData {\n  sourceType: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  alertType: string;\n  title: string;\n  description: string;\n  timestamp: Date;\n  sourceIP?: string;\n  destIP?: string;\n  hostname?: string;\n  username?: string;\n  filePath?: string;\n  fileHash?: string;\n  processName?: string;\n  networkInfo?: {\n    remoteIP?: string;\n    remotePort?: number;\n    protocol?: string;\n  };\n  additionalData: Record<string, any>;\n}\n\n// CrowdStrike alert structure\ninterface CrowdStrikeAlert {\n  alert_id: string;\n  detect_id: string;\n  device_name: string;\n  ip_address: string;\n  user_name: string;\n  file_name: string;\n  file_path: string;\n  file_hash_sha256: string;\n  severity: string;\n  tactic: string;\n  technique: string;\n  detect_name: string;\n  command_line: string;\n  timestamp: string;\n  event_platform: string;\n  event_type: string;\n  network_remote_ip: string;\n  network_remote_port: number;\n  protocol: string;\n  [key: string]: any;\n}\n\n// Email alert structure\ninterface EmailAlert {\n  alert_id: string;\n  sender_email: string;\n  recipient_email: string;\n  subject: string;\n  timestamp: string;\n  verdict: string;\n  malware_detected: string;\n  phishing_detected: boolean;\n  spam_score: number;\n  attachment_name?: string;\n  attachment_hash?: string;\n  detection_engine: string;\n  [key: string]: any;\n}\n\n// Firewall alert structure\ninterface FirewallAlert {\n  alert_id: string;\n  firewall_name: string;\n  src_ip: string;\n  dest_ip: string;\n  protocol: string;\n  action: string;\n  threat_type: string;\n  severity: string;\n  timestamp: string;\n  application: string;\n  [key: string]: any;\n}\n\n// SentinelOne alert structure\ninterface SentinelOneAlert {\n  alert_id: string;\n  agent_hostname: string;\n  agent_ip: string;\n  threat_classification: string;\n  detection_name: string;\n  file_path: string;\n  file_hash_sha256: string;\n  process_name: string;\n  verdict: string;\n  network_remote_ip: string;\n  network_remote_port: number;\n  timestamp: string;\n  [key: string]: any;\n}\n\nexport class AlertNormalizer {\n  \n  static normalizeCrowdStrike(rawAlert: CrowdStrikeAlert): NormalizedAlertData {\n    return {\n      sourceType: 'CrowdStrike',\n      severity: this.mapCrowdStrikeSeverity(rawAlert.severity),\n      alertType: rawAlert.detect_name,\n      title: `${rawAlert.detect_name} - ${rawAlert.device_name}`,\n      description: `${rawAlert.tactic} detected: ${rawAlert.technique} on ${rawAlert.device_name}`,\n      timestamp: new Date(rawAlert.timestamp),\n      hostname: rawAlert.device_name,\n      username: rawAlert.user_name,\n      filePath: rawAlert.file_path,\n      fileHash: rawAlert.file_hash_sha256,\n      processName: rawAlert.file_name,\n      networkInfo: {\n        remoteIP: rawAlert.network_remote_ip,\n        remotePort: rawAlert.network_remote_port,\n        protocol: rawAlert.protocol\n      },\n      additionalData: {\n        detectId: rawAlert.detect_id,\n        tactic: rawAlert.tactic,\n        technique: rawAlert.technique,\n        commandLine: rawAlert.command_line,\n        eventPlatform: rawAlert.event_platform,\n        eventType: rawAlert.event_type\n      }\n    };\n  }\n\n  static normalizeEmail(rawAlert: EmailAlert): NormalizedAlertData {\n    return {\n      sourceType: 'Email',\n      severity: this.mapEmailSeverity(rawAlert.verdict, rawAlert.spam_score),\n      alertType: 'email_threat',\n      title: `Email Threat - ${rawAlert.sender_email}`,\n      description: `Email from ${rawAlert.sender_email} to ${rawAlert.recipient_email}: ${rawAlert.subject}`,\n      timestamp: new Date(rawAlert.timestamp),\n      additionalData: {\n        senderEmail: rawAlert.sender_email,\n        recipientEmail: rawAlert.recipient_email,\n        subject: rawAlert.subject,\n        verdict: rawAlert.verdict,\n        malwareDetected: rawAlert.malware_detected,\n        phishingDetected: rawAlert.phishing_detected,\n        spamScore: rawAlert.spam_score,\n        attachmentName: rawAlert.attachment_name,\n        attachmentHash: rawAlert.attachment_hash,\n        detectionEngine: rawAlert.detection_engine\n      }\n    };\n  }\n\n  static normalizeFirewall(rawAlert: FirewallAlert): NormalizedAlertData {\n    return {\n      sourceType: 'Firewall',\n      severity: this.mapFirewallSeverity(rawAlert.severity),\n      alertType: rawAlert.threat_type,\n      title: `Firewall ${rawAlert.action} - ${rawAlert.threat_type}`,\n      description: `${rawAlert.threat_type} from ${rawAlert.src_ip} to ${rawAlert.dest_ip} - ${rawAlert.action}`,\n      timestamp: new Date(rawAlert.timestamp),\n      sourceIP: rawAlert.src_ip,\n      destIP: rawAlert.dest_ip,\n      hostname: rawAlert.firewall_name,\n      networkInfo: {\n        protocol: rawAlert.protocol\n      },\n      additionalData: {\n        firewallName: rawAlert.firewall_name,\n        action: rawAlert.action,\n        application: rawAlert.application,\n        srcPort: rawAlert.src_port,\n        destPort: rawAlert.dest_port,\n        ruleName: rawAlert.rule_name,\n        policyId: rawAlert.policy_id\n      }\n    };\n  }\n\n  static normalizeSentinelOne(rawAlert: SentinelOneAlert): NormalizedAlertData {\n    return {\n      sourceType: 'SentinelOne',\n      severity: this.mapSentinelOneSeverity(rawAlert.threat_classification, rawAlert.verdict),\n      alertType: rawAlert.threat_classification,\n      title: `${rawAlert.threat_classification} - ${rawAlert.agent_hostname}`,\n      description: `${rawAlert.detection_name} detected on ${rawAlert.agent_hostname}`,\n      timestamp: new Date(rawAlert.timestamp),\n      hostname: rawAlert.agent_hostname,\n      filePath: rawAlert.file_path,\n      fileHash: rawAlert.file_hash_sha256,\n      processName: rawAlert.process_name,\n      networkInfo: {\n        remoteIP: rawAlert.network_remote_ip,\n        remotePort: rawAlert.network_remote_port\n      },\n      additionalData: {\n        agentIP: rawAlert.agent_ip,\n        threatClassification: rawAlert.threat_classification,\n        detectionName: rawAlert.detection_name,\n        verdict: rawAlert.verdict,\n        agentUuid: rawAlert.agent_uuid\n      }\n    };\n  }\n\n  // Severity mapping functions\n  private static mapCrowdStrikeSeverity(severity: string): 'low' | 'medium' | 'high' | 'critical' {\n    switch (severity.toLowerCase()) {\n      case 'critical': return 'critical';\n      case 'high': return 'high';\n      case 'medium': return 'medium';\n      default: return 'low';\n    }\n  }\n\n  private static mapEmailSeverity(verdict: string, spamScore: number): 'low' | 'medium' | 'high' | 'critical' {\n    if (verdict === 'malicious') return 'critical';\n    if (verdict === 'suspicious') return 'high';\n    if (spamScore > 7) return 'medium';\n    return 'low';\n  }\n\n  private static mapFirewallSeverity(severity: string): 'low' | 'medium' | 'high' | 'critical' {\n    switch (severity.toLowerCase()) {\n      case 'critical': return 'critical';\n      case 'high': return 'high';\n      case 'medium': return 'medium';\n      case 'informational': return 'low';\n      default: return 'low';\n    }\n  }\n\n  private static mapSentinelOneSeverity(classification: string, verdict: string): 'low' | 'medium' | 'high' | 'critical' {\n    if (classification === 'Ransomware' || verdict === 'malicious') return 'critical';\n    if (classification === 'Trojan' || classification === 'Infostealer') return 'high';\n    if (verdict === 'suspicious') return 'medium';\n    return 'low';\n  }\n\n  // Main normalization function that detects source type and normalizes accordingly\n  static normalize(rawData: any, sourceType?: string): NormalizedAlertData {\n    // Auto-detect source type if not provided\n    if (!sourceType) {\n      if (rawData.detect_id && rawData.device_name) sourceType = 'crowdstrike';\n      else if (rawData.sender_email && rawData.recipient_email) sourceType = 'email';\n      else if (rawData.src_ip && rawData.dest_ip && rawData.firewall_name) sourceType = 'firewall';\n      else if (rawData.agent_uuid && rawData.threat_classification) sourceType = 'sentinelone';\n    }\n\n    switch (sourceType?.toLowerCase()) {\n      case 'crowdstrike':\n        return this.normalizeCrowdStrike(rawData);\n      case 'email':\n        return this.normalizeEmail(rawData);\n      case 'firewall':\n        return this.normalizeFirewall(rawData);\n      case 'sentinelone':\n        return this.normalizeSentinelOne(rawData);\n      default:\n        // Generic fallback normalization\n        return {\n          sourceType: sourceType || 'unknown',\n          severity: 'medium',\n          alertType: 'generic',\n          title: 'Unknown Alert Type',\n          description: 'Alert from unknown source',\n          timestamp: new Date(),\n          additionalData: rawData\n        };\n    }\n  }\n\n  // Convert normalized data to RawAlert format for database storage\n  static toRawAlert(normalizedData: NormalizedAlertData, sourceId: string): InsertRawAlert {\n    return {\n      sourceId,\n      severity: normalizedData.severity,\n      type: normalizedData.alertType,\n      description: normalizedData.description,\n      rawData: {\n        ...normalizedData.additionalData,\n        normalizedTitle: normalizedData.title,\n        timestamp: normalizedData.timestamp.toISOString(),\n        hostname: normalizedData.hostname,\n        username: normalizedData.username,\n        filePath: normalizedData.filePath,\n        fileHash: normalizedData.fileHash,\n        processName: normalizedData.processName,\n        sourceIP: normalizedData.sourceIP,\n        destIP: normalizedData.destIP,\n        networkInfo: normalizedData.networkInfo\n      }\n    };\n  }\n}","size_bytes":9644},"server/ocsf.ts":{"content":"import type { SecurityEvent } from './kafka';\n\n// OCSF Base Event Schema - Common attributes for all events\nexport interface OCSFBaseEvent {\n  // Core attributes\n  activity_id: number;\n  activity_name: string;\n  category_name: string;\n  category_uid: number;\n  class_name: string;\n  class_uid: number;\n  count?: number;\n  message?: string;\n  metadata: {\n    logged_time?: number;\n    original_time?: string;\n    processed_time?: number;\n    product?: {\n      name: string;\n      vendor_name: string;\n      version?: string;\n    };\n    profiles?: string[];\n    version: string;\n  };\n  observables?: OCSFObservable[];\n  raw_data?: any;\n  severity?: string;\n  severity_id: number;\n  status?: string;\n  status_id?: number;\n  time: number;\n  timezone_offset?: number;\n  type_name: string;\n  type_uid: number;\n  unmapped?: Record<string, any>;\n}\n\n// OCSF Observable for IOCs and artifacts\nexport interface OCSFObservable {\n  name: string;\n  type: string;\n  type_id: number;\n  value: string;\n}\n\n// OCSF Network Activity Event (Class 4001)\nexport interface OCSFNetworkActivity extends OCSFBaseEvent {\n  class_uid: 4001;\n  class_name: \"Network Activity\";\n  category_uid: 4;\n  category_name: \"Network Activity\";\n  \n  // Network-specific attributes\n  connection_info?: {\n    boundary?: string;\n    boundary_id?: number;\n    direction?: string;\n    direction_id?: number;\n    protocol_name?: string;\n    protocol_num?: number;\n    tcp_flags?: number;\n    uid?: string;\n  };\n  dst_endpoint?: OCSFEndpoint;\n  src_endpoint?: OCSFEndpoint;\n  traffic?: {\n    bytes?: number;\n    bytes_in?: number;\n    bytes_out?: number;\n    packets?: number;\n    packets_in?: number;\n    packets_out?: number;\n  };\n  disposition?: string;\n  disposition_id?: number;\n}\n\n// OCSF System Activity Event (Class 1001)\nexport interface OCSFSystemActivity extends OCSFBaseEvent {\n  class_uid: 1001;\n  class_name: \"Process Activity\";\n  category_uid: 1;\n  category_name: \"System Activity\";\n  \n  // System-specific attributes\n  actor?: OCSFActor;\n  device?: OCSFDevice;\n  process?: OCSFProcess;\n  file?: OCSFFile;\n  malware?: OCSFMalware[];\n  disposition?: string;\n  disposition_id?: number;\n}\n\n// OCSF Security Finding Event (Class 2001)\nexport interface OCSFSecurityFinding extends OCSFBaseEvent {\n  class_uid: 2001;\n  class_name: \"Security Finding\";\n  category_uid: 2;\n  category_name: \"Findings\";\n  \n  // Finding-specific attributes\n  finding?: {\n    created_time?: number;\n    desc?: string;\n    first_seen_time?: number;\n    last_seen_time?: number;\n    modified_time?: number;\n    product_uid?: string;\n    related_events?: any[];\n    remediation?: {\n      desc?: string;\n      kb_articles?: string[];\n    };\n    supporting_data?: any;\n    title?: string;\n    types?: string[];\n    uid: string;\n  };\n  confidence?: string;\n  confidence_id?: number;\n  confidence_score?: number;\n  impact?: string;\n  impact_id?: number;\n  impact_score?: number;\n  risk_level?: string;\n  risk_level_id?: number;\n  risk_score?: number;\n}\n\n// OCSF Authentication Event (Class 3002)\nexport interface OCSFAuthentication extends OCSFBaseEvent {\n  class_uid: 3002;\n  class_name: \"Authentication\";\n  category_uid: 3;\n  category_name: \"Identity & Access Management\";\n  \n  // Auth-specific attributes\n  user?: OCSFUser;\n  device?: OCSFDevice;\n  session?: OCSFSession;\n  auth_protocol?: string;\n  auth_protocol_id?: number;\n  logon_type?: string;\n  logon_type_id?: number;\n  is_remote?: boolean;\n  disposition?: string;\n  disposition_id?: number;\n}\n\n// Supporting OCSF Types\nexport interface OCSFEndpoint {\n  hostname?: string;\n  ip?: string;\n  port?: number;\n  subnet_uid?: string;\n  svc_name?: string;\n  uid?: string;\n}\n\nexport interface OCSFActor {\n  user?: OCSFUser;\n  process?: OCSFProcess;\n  session?: OCSFSession;\n}\n\nexport interface OCSFDevice {\n  hostname?: string;\n  ip?: string;\n  mac?: string;\n  name?: string;\n  os?: {\n    name?: string;\n    type?: string;\n    type_id?: number;\n    version?: string;\n  };\n  type?: string;\n  type_id?: number;\n  uid?: string;\n}\n\nexport interface OCSFUser {\n  account?: {\n    name?: string;\n    type?: string;\n    type_id?: number;\n    uid?: string;\n  };\n  credential_uid?: string;\n  domain?: string;\n  email_addr?: string;\n  full_name?: string;\n  name?: string;\n  type?: string;\n  type_id?: number;\n  uid?: string;\n}\n\nexport interface OCSFProcess {\n  cmd_line?: string;\n  created_time?: number;\n  file?: OCSFFile;\n  name?: string;\n  parent_process?: OCSFProcess;\n  pid?: number;\n  session?: OCSFSession;\n  terminated_time?: number;\n  tid?: number;\n  uid?: string;\n  user?: OCSFUser;\n}\n\nexport interface OCSFFile {\n  accessed_time?: number;\n  created_time?: number;\n  desc?: string;\n  hashes?: OCSFHash[];\n  mime_type?: string;\n  modified_time?: number;\n  name?: string;\n  owner?: OCSFUser;\n  parent_folder?: string;\n  path?: string;\n  security_descriptor?: string;\n  size?: number;\n  type?: string;\n  type_id?: number;\n  uid?: string;\n  version?: string;\n}\n\nexport interface OCSFHash {\n  algorithm?: string;\n  algorithm_id?: number;\n  value: string;\n}\n\nexport interface OCSFMalware {\n  classification_ids?: number[];\n  classifications?: string[];\n  name?: string;\n  path?: string;\n  provider?: string;\n  uid?: string;\n}\n\nexport interface OCSFSession {\n  created_time?: number;\n  credential_uid?: string;\n  expiration_time?: number;\n  is_remote?: boolean;\n  issuer?: string;\n  uid?: string;\n}\n\n// OCSF Event Union Type\nexport type OCSFEvent = OCSFNetworkActivity | OCSFSystemActivity | OCSFSecurityFinding | OCSFAuthentication;\n\n// OCSF Constants and Enumerations\nexport const OCSFConstants = {\n  // Severity mappings\n  SEVERITY: {\n    UNKNOWN: { id: 0, name: \"Unknown\" },\n    INFORMATIONAL: { id: 1, name: \"Informational\" },\n    LOW: { id: 2, name: \"Low\" },\n    MEDIUM: { id: 3, name: \"Medium\" },\n    HIGH: { id: 4, name: \"High\" },\n    CRITICAL: { id: 5, name: \"Critical\" },\n  },\n\n  // Activity IDs for different event types\n  NETWORK_ACTIVITY: {\n    UNKNOWN: { id: 0, name: \"Unknown\" },\n    ALLOWED: { id: 1, name: \"Allowed\" },\n    DENIED: { id: 2, name: \"Denied\" },\n    BLOCKED: { id: 3, name: \"Blocked\" },\n  },\n\n  PROCESS_ACTIVITY: {\n    UNKNOWN: { id: 0, name: \"Unknown\" },\n    LAUNCH: { id: 1, name: \"Launch\" },\n    TERMINATE: { id: 2, name: \"Terminate\" },\n    BLOCK: { id: 3, name: \"Block\" },\n    QUARANTINE: { id: 4, name: \"Quarantine\" },\n  },\n\n  AUTHENTICATION: {\n    UNKNOWN: { id: 0, name: \"Unknown\" },\n    LOGON: { id: 1, name: \"Logon\" },\n    LOGOFF: { id: 2, name: \"Logoff\" },\n    AUTHENTICATION_TICKET: { id: 3, name: \"Authentication Ticket\" },\n  },\n\n  // Disposition mappings\n  DISPOSITION: {\n    UNKNOWN: { id: 0, name: \"Unknown\" },\n    ALLOWED: { id: 1, name: \"Allowed\" },\n    BLOCKED: { id: 2, name: \"Blocked\" },\n    QUARANTINED: { id: 3, name: \"Quarantined\" },\n    ISOLATED: { id: 4, name: \"Isolated\" },\n    DELETED: { id: 5, name: \"Deleted\" },\n    DROPPED: { id: 6, name: \"Dropped\" },\n    CUSTOM_ACTION: { id: 7, name: \"Custom Action\" },\n    APPROVED: { id: 8, name: \"Approved\" },\n    RESTORED: { id: 9, name: \"Restored\" },\n    EXONERATED: { id: 10, name: \"Exonerated\" },\n    CORRECTED: { id: 11, name: \"Corrected\" },\n    PARTIALLY_CORRECTED: { id: 12, name: \"Partially Corrected\" },\n    UNCORRECTED: { id: 13, name: \"Uncorrected\" },\n    DELAYED: { id: 14, name: \"Delayed\" },\n    DETECTED: { id: 15, name: \"Detected\" },\n    NO_ACTION: { id: 16, name: \"No Action\" },\n    LOGGED: { id: 17, name: \"Logged\" },\n  }\n} as const;\n\n// OCSF Transformation Service\nexport class OCSFTransformationService {\n  \n  // Convert custom SecurityEvent to OCSF format\n  static transformToOCSF(event: SecurityEvent): OCSFEvent {\n    const baseTime = new Date(event.timestamp).getTime();\n    \n    // Common base attributes for all OCSF events\n    const baseEvent: Partial<OCSFBaseEvent> = {\n      count: 1,\n      message: event.description,\n      metadata: {\n        logged_time: baseTime,\n        original_time: event.timestamp,\n        processed_time: Date.now(),\n        product: {\n          name: event.source,\n          vendor_name: this.extractVendorName(event.source),\n        },\n        profiles: [\"security_control\"],\n        version: \"1.1.0\"\n      },\n      raw_data: event.raw_data,\n      severity: this.mapSeverity(event.severity).name,\n      severity_id: this.mapSeverity(event.severity).id,\n      time: baseTime,\n      unmapped: {\n        original_id: event.id,\n        original_source: event.source\n      }\n    };\n\n    // Transform based on event type\n    switch (event.type) {\n      case 'intrusion':\n        return this.transformToNetworkActivity(event, baseEvent);\n      \n      case 'malware':\n        return this.transformToSystemActivity(event, baseEvent);\n      \n      case 'policy_violation':\n      case 'anomaly':\n      case 'threat_intel':\n        return this.transformToSecurityFinding(event, baseEvent);\n      \n      default:\n        return this.transformToSecurityFinding(event, baseEvent);\n    }\n  }\n\n  // Convert OCSF event back to custom SecurityEvent format\n  static transformFromOCSF(ocsfEvent: OCSFEvent): SecurityEvent {\n    return {\n      id: ocsfEvent.unmapped?.original_id || `ocsf_${Date.now()}`,\n      timestamp: ocsfEvent.metadata.original_time || new Date(ocsfEvent.time).toISOString(),\n      source: ocsfEvent.unmapped?.original_source || ocsfEvent.metadata.product?.name || 'OCSF-Unknown',\n      severity: this.mapOCSFSeverity(ocsfEvent.severity_id),\n      type: this.mapOCSFEventType(ocsfEvent.class_uid),\n      title: this.extractTitle(ocsfEvent),\n      description: ocsfEvent.message || 'OCSF Event',\n      metadata: this.extractMetadata(ocsfEvent),\n      raw_data: ocsfEvent.raw_data || ocsfEvent\n    };\n  }\n\n  // Transform to Network Activity (Class 4001)\n  private static transformToNetworkActivity(event: SecurityEvent, base: Partial<OCSFBaseEvent>): OCSFNetworkActivity {\n    return {\n      ...base,\n      activity_id: OCSFConstants.NETWORK_ACTIVITY.BLOCKED.id,\n      activity_name: OCSFConstants.NETWORK_ACTIVITY.BLOCKED.name,\n      category_name: \"Network Activity\",\n      category_uid: 4,\n      class_name: \"Network Activity\",\n      class_uid: 4001,\n      type_name: `Network Activity: ${OCSFConstants.NETWORK_ACTIVITY.BLOCKED.name}`,\n      type_uid: 400102, // 4001 (class) + 02 (activity)\n      \n      connection_info: {\n        direction: \"Unknown\",\n        direction_id: 0,\n        protocol_name: event.raw_data?.protocol || \"TCP\"\n      },\n      \n      src_endpoint: event.metadata.source_ip ? {\n        ip: event.metadata.source_ip,\n        uid: event.metadata.source_ip\n      } : undefined,\n      \n      dst_endpoint: event.metadata.destination_ip ? {\n        ip: event.metadata.destination_ip,\n        uid: event.metadata.destination_ip\n      } : undefined,\n      \n      disposition: OCSFConstants.DISPOSITION.BLOCKED.name,\n      disposition_id: OCSFConstants.DISPOSITION.BLOCKED.id,\n      \n      observables: this.extractNetworkObservables(event)\n    } as OCSFNetworkActivity;\n  }\n\n  // Transform to System Activity (Class 1001)\n  private static transformToSystemActivity(event: SecurityEvent, base: Partial<OCSFBaseEvent>): OCSFSystemActivity {\n    const disposition = event.raw_data?.action === 'quarantined' \n      ? OCSFConstants.DISPOSITION.QUARANTINED\n      : OCSFConstants.DISPOSITION.BLOCKED;\n\n    return {\n      ...base,\n      activity_id: OCSFConstants.PROCESS_ACTIVITY.QUARANTINE.id,\n      activity_name: OCSFConstants.PROCESS_ACTIVITY.QUARANTINE.name,\n      category_name: \"System Activity\",\n      category_uid: 1,\n      class_name: \"Process Activity\",\n      class_uid: 1001,\n      type_name: `Process Activity: ${OCSFConstants.PROCESS_ACTIVITY.QUARANTINE.name}`,\n      type_uid: 100104, // 1001 (class) + 04 (quarantine activity)\n      \n      actor: {\n        user: event.metadata.user ? {\n          name: event.metadata.user,\n          email_addr: event.metadata.user,\n          uid: event.metadata.user\n        } : undefined\n      },\n      \n      file: event.raw_data?.file_path ? {\n        path: event.raw_data.file_path,\n        name: event.raw_data.file_path.split('/').pop() || event.raw_data.file_path,\n        hashes: event.metadata.file_hash ? [{\n          algorithm: \"Unknown\",\n          algorithm_id: 0,\n          value: event.metadata.file_hash\n        }] : undefined\n      } : undefined,\n      \n      malware: [{\n        name: event.title,\n        classification_ids: [1], // Trojan\n        classifications: [\"Trojan\"],\n        provider: event.source\n      }],\n      \n      disposition: disposition.name,\n      disposition_id: disposition.id,\n      \n      observables: this.extractSystemObservables(event)\n    } as OCSFSystemActivity;\n  }\n\n  // Transform to Security Finding (Class 2001)\n  private static transformToSecurityFinding(event: SecurityEvent, base: Partial<OCSFBaseEvent>): OCSFSecurityFinding {\n    return {\n      ...base,\n      activity_id: 1, // Create\n      activity_name: \"Create\",\n      category_name: \"Findings\",\n      category_uid: 2,\n      class_name: \"Security Finding\",\n      class_uid: 2001,\n      type_name: \"Security Finding: Create\",\n      type_uid: 200101, // 2001 (class) + 01 (create activity)\n      \n      finding: {\n        created_time: new Date(event.timestamp).getTime(),\n        desc: event.description,\n        title: event.title,\n        uid: event.id,\n        types: [event.type],\n        supporting_data: event.raw_data\n      },\n      \n      confidence: \"Medium\",\n      confidence_id: 50,\n      confidence_score: 50,\n      \n      risk_level: event.severity,\n      risk_level_id: this.mapSeverity(event.severity).id,\n      risk_score: this.mapSeverityToScore(event.severity),\n      \n      observables: this.extractGeneralObservables(event)\n    } as OCSFSecurityFinding;\n  }\n\n  // Helper methods\n  private static extractVendorName(source: string): string {\n    if (source.includes('PaloAlto')) return 'Palo Alto Networks';\n    if (source.includes('CrowdStrike')) return 'CrowdStrike';\n    if (source.includes('Splunk')) return 'Splunk';\n    if (source.includes('Elastic')) return 'Elastic';\n    return 'Unknown';\n  }\n\n  private static mapSeverity(severity: string): { id: number; name: string } {\n    switch (severity.toLowerCase()) {\n      case 'low': return OCSFConstants.SEVERITY.LOW;\n      case 'medium': return OCSFConstants.SEVERITY.MEDIUM;\n      case 'high': return OCSFConstants.SEVERITY.HIGH;\n      case 'critical': return OCSFConstants.SEVERITY.CRITICAL;\n      default: return OCSFConstants.SEVERITY.UNKNOWN;\n    }\n  }\n\n  private static mapOCSFSeverity(severityId: number): 'low' | 'medium' | 'high' | 'critical' {\n    switch (severityId) {\n      case 2: return 'low';\n      case 3: return 'medium';\n      case 4: return 'high';\n      case 5: return 'critical';\n      default: return 'medium';\n    }\n  }\n\n  private static mapOCSFEventType(classUid: number): 'malware' | 'intrusion' | 'policy_violation' | 'anomaly' | 'threat_intel' {\n    switch (classUid) {\n      case 4001: return 'intrusion'; // Network Activity\n      case 1001: return 'malware';   // System Activity\n      case 2001: return 'anomaly';   // Security Finding\n      case 3002: return 'policy_violation'; // Authentication\n      default: return 'anomaly';\n    }\n  }\n\n  private static mapSeverityToScore(severity: string): number {\n    switch (severity.toLowerCase()) {\n      case 'low': return 25;\n      case 'medium': return 50;\n      case 'high': return 75;\n      case 'critical': return 100;\n      default: return 50;\n    }\n  }\n\n  private static extractTitle(ocsfEvent: OCSFEvent): string {\n    if ('finding' in ocsfEvent && ocsfEvent.finding?.title) {\n      return ocsfEvent.finding.title;\n    }\n    return `${ocsfEvent.class_name}: ${ocsfEvent.activity_name}`;\n  }\n\n  private static extractMetadata(ocsfEvent: OCSFEvent): any {\n    const metadata: any = {};\n\n    // Extract network metadata\n    if ('src_endpoint' in ocsfEvent && ocsfEvent.src_endpoint?.ip) {\n      metadata.source_ip = ocsfEvent.src_endpoint.ip;\n    }\n    if ('dst_endpoint' in ocsfEvent && ocsfEvent.dst_endpoint?.ip) {\n      metadata.destination_ip = ocsfEvent.dst_endpoint.ip;\n    }\n\n    // Extract system metadata\n    if ('actor' in ocsfEvent && ocsfEvent.actor?.user?.name) {\n      metadata.user = ocsfEvent.actor.user.name;\n    }\n    if ('file' in ocsfEvent && ocsfEvent.file?.hashes?.[0]?.value) {\n      metadata.file_hash = ocsfEvent.file.hashes[0].value;\n    }\n\n    // Extract rule ID from metadata\n    if (ocsfEvent.metadata.product?.name) {\n      metadata.rule_id = `${ocsfEvent.metadata.product.name}-${ocsfEvent.class_uid}`;\n    }\n\n    return metadata;\n  }\n\n  private static extractNetworkObservables(event: SecurityEvent): OCSFObservable[] {\n    const observables: OCSFObservable[] = [];\n    \n    if (event.metadata.source_ip) {\n      observables.push({\n        name: \"source_ip\",\n        type: \"IP Address\",\n        type_id: 2,\n        value: event.metadata.source_ip\n      });\n    }\n    \n    if (event.metadata.destination_ip) {\n      observables.push({\n        name: \"destination_ip\", \n        type: \"IP Address\",\n        type_id: 2,\n        value: event.metadata.destination_ip\n      });\n    }\n\n    return observables;\n  }\n\n  private static extractSystemObservables(event: SecurityEvent): OCSFObservable[] {\n    const observables: OCSFObservable[] = [];\n    \n    if (event.metadata.file_hash) {\n      observables.push({\n        name: \"file_hash\",\n        type: \"Hash\",\n        type_id: 7,\n        value: event.metadata.file_hash\n      });\n    }\n    \n    if (event.metadata.user) {\n      observables.push({\n        name: \"user\",\n        type: \"User Name\",\n        type_id: 4,\n        value: event.metadata.user\n      });\n    }\n\n    return observables;\n  }\n\n  private static extractGeneralObservables(event: SecurityEvent): OCSFObservable[] {\n    const observables: OCSFObservable[] = [];\n    \n    // Add any relevant observables from metadata\n    Object.entries(event.metadata).forEach(([key, value]) => {\n      if (value && typeof value === 'string') {\n        observables.push({\n          name: key,\n          type: \"Other\",\n          type_id: 99,\n          value: value\n        });\n      }\n    });\n\n    return observables;\n  }\n}","size_bytes":18099},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { AlertProcessor } from \"./alertProcessor\";\nimport { AlertNormalizer } from \"./normalization\";\nimport { ThreatIntelligenceService } from \"./threatIntelligence\";\nimport { AnalyticsService } from \"./analyticsService\";\nimport { ExportService } from \"./exportService\";\nimport { isAuthenticated } from \"./auth\";\nimport session from \"express-session\";\nimport { AuthService } from \"./auth\";\nimport { registerUserSchema, loginUserSchema } from \"@shared/schema\";\nimport { insertSourceSchema, insertRawAlertSchema, insertIncidentSchema, insertActionSchema, insertFeedbackSchema, insertModelMetricSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { kafkaService, SecurityEventIngestion } from \"./kafka\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Setup session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'development-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    name: 'soc.sid', // Custom session name\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n      sameSite: 'lax' // Allow cross-origin requests\n    },\n  }));\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    \n    // Register client with Kafka service for real-time event streaming\n    kafkaService.addClient(ws);\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n      kafkaService.removeClient(ws);\n    });\n\n    // Send welcome message\n    ws.send(JSON.stringify({ type: 'connected', message: 'WebSocket connected' }));\n  });\n\n  // Broadcast function for real-time updates\n  const broadcast = (data: any) => {\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = registerUserSchema.parse(req.body);\n      const user = await AuthService.registerUser(validatedData);\n      \n      // Log user in automatically after registration\n      req.session.userId = user.id;\n      \n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid registration data', details: error.errors });\n      }\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      const user = await AuthService.loginUser(validatedData.email, validatedData.password);\n      \n      // Store user session\n      req.session.userId = user.id;\n      console.log('Setting session userId:', user.id, 'Session ID:', req.sessionID);\n      \n      // Save session explicitly\n      req.session.save((err) => {\n        if (err) {\n          console.error('Session save error:', err);\n          return res.status(500).json({ error: 'Failed to save session' });\n        }\n        console.log('Session saved successfully');\n        res.json(user);\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid login data', details: error.errors });\n      }\n      res.status(401).json({ error: error instanceof Error ? error.message : 'Login failed' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Session destruction error:', err);\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.clearCookie('connect.sid'); // Default session cookie name\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      console.log('Auth user check - Session ID:', req.sessionID, 'UserId in session:', req.session.userId);\n      \n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Unauthorized - No session\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        req.session.userId = undefined;\n        return res.status(401).json({ message: \"Unauthorized - User not found\" });\n      }\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch dashboard stats' });\n    }\n  });\n\n  // Sources endpoints\n  app.get('/api/sources', isAuthenticated, async (req, res) => {\n    try {\n      const sources = await storage.getSources();\n      res.json(sources);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch sources' });\n    }\n  });\n\n  app.get('/api/sources/:id', async (req, res) => {\n    try {\n      const source = await storage.getSource(req.params.id);\n      if (!source) {\n        return res.status(404).json({ error: 'Source not found' });\n      }\n      res.json(source);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch source' });\n    }\n  });\n\n  app.post('/api/sources', isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertSourceSchema.parse(req.body);\n      const source = await storage.createSource(validatedData);\n      \n      broadcast({ type: 'source_created', data: source });\n      res.status(201).json(source);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid source data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create source' });\n    }\n  });\n\n  app.put('/api/sources/:id', async (req, res) => {\n    try {\n      const source = await storage.updateSource(req.params.id, req.body);\n      if (!source) {\n        return res.status(404).json({ error: 'Source not found' });\n      }\n      \n      broadcast({ type: 'source_updated', data: source });\n      res.json(source);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update source' });\n    }\n  });\n\n  app.delete('/api/sources/:id', async (req, res) => {\n    try {\n      const success = await storage.deleteSource(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: 'Source not found' });\n      }\n      \n      broadcast({ type: 'source_deleted', data: { id: req.params.id } });\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete source' });\n    }\n  });\n\n  // Raw alerts endpoints\n  app.get('/api/alerts', async (req, res) => {\n    try {\n      const alerts = await storage.getRawAlerts();\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch alerts' });\n    }\n  });\n\n  app.post('/api/alerts', async (req, res) => {\n    try {\n      const validatedData = insertRawAlertSchema.parse(req.body);\n      const alert = await storage.createRawAlert(validatedData);\n      \n      broadcast({ type: 'alert_created', data: alert });\n      res.status(201).json(alert);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid alert data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create alert' });\n    }\n  });\n\n  // New normalization endpoints\n  app.post('/api/alerts/normalize', async (req, res) => {\n    try {\n      const { alertData, sourceId, sourceType } = req.body;\n      \n      if (!alertData || !sourceId) {\n        return res.status(400).json({ error: 'Missing required fields: alertData, sourceId' });\n      }\n\n      const result = await AlertProcessor.processIncomingAlert(alertData, sourceId, sourceType);\n      \n      // Broadcast alert processing result\n      broadcast({ type: 'alert_normalized', data: result });\n      \n      // If incident was auto-created, broadcast incident creation\n      if (result.incidentCreated && result.incidentId) {\n        const incident = await storage.getIncident(result.incidentId);\n        broadcast({ type: 'incident_created', data: incident });\n      }\n      \n      res.status(201).json(result);\n    } catch (error) {\n      console.error('Normalization error:', error);\n      res.status(500).json({ error: 'Failed to normalize alert' });\n    }\n  });\n\n  app.post('/api/alerts/bulk-normalize', async (req, res) => {\n    try {\n      const { alerts } = req.body;\n      \n      if (!Array.isArray(alerts)) {\n        return res.status(400).json({ error: 'alerts must be an array' });\n      }\n\n      const results = await AlertProcessor.processBulkAlerts(alerts);\n      \n      broadcast({ type: 'alerts_bulk_normalized', data: { count: results.length } });\n      res.status(201).json({ processed: results.length, results });\n    } catch (error) {\n      console.error('Bulk normalization error:', error);\n      res.status(500).json({ error: 'Failed to normalize alerts' });\n    }\n  });\n\n  app.post('/api/alerts/simulate/:sourceType', async (req, res) => {\n    try {\n      const { sourceType } = req.params;\n      const count = parseInt(req.query.count as string) || 5;\n      \n      const results = await AlertProcessor.simulateIncomingAlerts(sourceType, count);\n      \n      broadcast({ type: 'alerts_simulated', data: { sourceType, count: results.length, usingRealData: true } });\n      res.status(201).json({ \n        message: `Generated ${results.length} ${sourceType} alerts using real data`,\n        results,\n        usingRealData: true\n      });\n    } catch (error) {\n      console.error('Simulation error:', error);\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Failed to simulate alerts' });\n    }\n  });\n\n  // Real-time alert simulation\n  app.post('/api/alerts/simulate-realtime/:sourceType', async (req, res) => {\n    try {\n      const { sourceType } = req.params;\n      const durationMinutes = parseInt(req.query.duration as string) || 5;\n      const alertsPerMinute = parseInt(req.query.rate as string) || 2;\n      \n      // Start real-time simulation (runs in background)\n      AlertProcessor.simulateRealTimeAlerts(sourceType, durationMinutes, alertsPerMinute);\n      \n      broadcast({ \n        type: 'realtime_simulation_started', \n        data: { sourceType, durationMinutes, alertsPerMinute } \n      });\n      \n      res.status(202).json({ \n        message: `Real-time simulation started for ${sourceType}`,\n        duration: `${durationMinutes} minutes`,\n        rate: `${alertsPerMinute} alerts per minute`,\n        totalExpected: durationMinutes * alertsPerMinute\n      });\n    } catch (error) {\n      console.error('Real-time simulation error:', error);\n      res.status(500).json({ error: error instanceof Error ? error.message : 'Failed to start real-time simulation' });\n    }\n  });\n\n  // Get dataset statistics\n  app.get('/api/alerts/dataset-stats', async (req, res) => {\n    try {\n      const stats = await AlertProcessor.getDatasetStats();\n      res.json({\n        message: 'Alert dataset statistics',\n        stats,\n        sources: Object.keys(stats).filter(k => k !== 'total')\n      });\n    } catch (error) {\n      console.error('Dataset stats error:', error);\n      res.status(500).json({ error: 'Failed to get dataset statistics' });\n    }\n  });\n\n  // Get a sample alert from real data\n  app.get('/api/alerts/sample/:sourceType', async (req, res) => {\n    try {\n      const { sourceType } = req.params;\n      const sampleAlert = await AlertProcessor.getSampleAlert(sourceType);\n      \n      if (!sampleAlert) {\n        return res.status(404).json({ error: `No sample data available for ${sourceType}` });\n      }\n      \n      res.json({\n        sourceType,\n        sampleAlert,\n        message: `Sample ${sourceType} alert from real dataset`\n      });\n    } catch (error) {\n      console.error('Sample alert error:', error);\n      res.status(500).json({ error: 'Failed to get sample alert' });\n    }\n  });\n\n  // Test endpoint to validate normalization without storing\n  app.post('/api/alerts/test-normalize', async (req, res) => {\n    try {\n      const { alertData, sourceType } = req.body;\n      \n      if (!alertData) {\n        return res.status(400).json({ error: 'Missing alertData' });\n      }\n\n      const normalized = AlertNormalizer.normalize(alertData, sourceType);\n      res.json({ normalized, original: alertData });\n    } catch (error) {\n      console.error('Test normalization error:', error);\n      res.status(500).json({ error: 'Failed to test normalization' });\n    }\n  });\n\n  // Incidents endpoints\n  app.get('/api/incidents', isAuthenticated, async (req, res) => {\n    try {\n      const incidents = await storage.getIncidents();\n      res.json(incidents);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch incidents' });\n    }\n  });\n\n  app.get('/api/incidents/:id', async (req, res) => {\n    try {\n      const incident = await storage.getIncident(req.params.id);\n      if (!incident) {\n        return res.status(404).json({ error: 'Incident not found' });\n      }\n      res.json(incident);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch incident' });\n    }\n  });\n\n  app.post('/api/incidents', async (req, res) => {\n    try {\n      const validatedData = insertIncidentSchema.parse(req.body);\n      const incident = await storage.createIncident(validatedData);\n      \n      broadcast({ type: 'incident_created', data: incident });\n      res.status(201).json(incident);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid incident data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create incident' });\n    }\n  });\n\n  app.put('/api/incidents/:id', async (req, res) => {\n    try {\n      const incident = await storage.updateIncident(req.params.id, req.body);\n      if (!incident) {\n        return res.status(404).json({ error: 'Incident not found' });\n      }\n      \n      broadcast({ type: 'incident_updated', data: incident });\n      res.json(incident);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update incident' });\n    }\n  });\n\n  // Bulk incident operations\n  app.patch('/api/incidents/bulk', async (req, res) => {\n    try {\n      const { incidentIds, operation, data } = req.body;\n      \n      if (!incidentIds || !Array.isArray(incidentIds) || incidentIds.length === 0) {\n        return res.status(400).json({ error: 'incidentIds array is required' });\n      }\n      \n      if (!operation) {\n        return res.status(400).json({ error: 'operation is required' });\n      }\n\n      const results = [];\n      const errors = [];\n\n      for (const incidentId of incidentIds) {\n        try {\n          let updatedIncident;\n          \n          switch (operation) {\n            case 'assign':\n              if (!data?.assignedTo) {\n                throw new Error('assignedTo is required for assign operation');\n              }\n              updatedIncident = await storage.updateIncident(incidentId, { \n                assignedTo: data.assignedTo \n              });\n              \n              // Create action for the assignment\n              await storage.createAction({\n                incidentId,\n                actionType: 'ANALYST_ASSIGNMENT',\n                payload: { assignedTo: data.assignedTo, bulkOperation: true },\n                performedBy: data.performedBy || 'system'\n              });\n              break;\n              \n            case 'escalate':\n              updatedIncident = await storage.updateIncident(incidentId, { \n                severity: 'critical',\n                status: 'investigating'\n              });\n              \n              // Create action for the escalation\n              await storage.createAction({\n                incidentId,\n                actionType: 'ESCALATE',\n                payload: { escalatedTo: 'senior_analyst', bulkOperation: true },\n                performedBy: data?.performedBy || 'system'\n              });\n              break;\n              \n            case 'close':\n              updatedIncident = await storage.updateIncident(incidentId, { \n                status: 'resolved',\n                closedAt: new Date()\n              });\n              \n              // Create action for the closure\n              await storage.createAction({\n                incidentId,\n                actionType: 'CLOSE_INCIDENT',\n                payload: { reason: data?.reason || 'Bulk closure', bulkOperation: true },\n                performedBy: data?.performedBy || 'system'\n              });\n              break;\n              \n            case 'update_status':\n              if (!data?.status) {\n                throw new Error('status is required for update_status operation');\n              }\n              updatedIncident = await storage.updateIncident(incidentId, { \n                status: data.status \n              });\n              \n              // Create action for the status update\n              await storage.createAction({\n                incidentId,\n                actionType: 'STATUS_CHANGE',\n                payload: { newStatus: data.status, bulkOperation: true },\n                performedBy: data?.performedBy || 'system'\n              });\n              break;\n              \n            default:\n              throw new Error(`Unknown operation: ${operation}`);\n          }\n          \n          if (updatedIncident) {\n            results.push(updatedIncident);\n            broadcast({ type: 'incident_updated', data: updatedIncident });\n          }\n        } catch (error) {\n          errors.push({\n            incidentId,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        updated: results.length,\n        errorCount: errors.length,\n        results,\n        errors\n      });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to perform bulk operation' });\n    }\n  });\n\n  // Actions endpoints\n  app.get('/api/actions', async (req, res) => {\n    try {\n      const actions = await storage.getActions();\n      res.json(actions);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch actions' });\n    }\n  });\n\n  app.get('/api/incidents/:id/actions', async (req, res) => {\n    try {\n      const actions = await storage.getActionsByIncident(req.params.id);\n      res.json(actions);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch incident actions' });\n    }\n  });\n\n  app.post('/api/incidents/:id/actions', async (req, res) => {\n    try {\n      const validatedData = insertActionSchema.parse({\n        ...req.body,\n        incidentId: req.params.id\n      });\n      const action = await storage.createAction(validatedData);\n      \n      broadcast({ type: 'action_created', data: action });\n      res.status(201).json(action);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid action data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create action' });\n    }\n  });\n\n  // Feedback endpoints\n  app.get('/api/feedback', async (req, res) => {\n    try {\n      const feedback = await storage.getFeedback();\n      res.json(feedback);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch feedback' });\n    }\n  });\n\n  app.get('/api/incidents/:id/feedback', async (req, res) => {\n    try {\n      const feedback = await storage.getFeedbackByIncident(req.params.id);\n      res.json(feedback);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch incident feedback' });\n    }\n  });\n\n  app.post('/api/feedback', async (req, res) => {\n    try {\n      const validatedData = insertFeedbackSchema.parse(req.body);\n      const feedback = await storage.createFeedback(validatedData);\n      \n      broadcast({ type: 'feedback_created', data: feedback });\n      res.status(201).json(feedback);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid feedback data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create feedback' });\n    }\n  });\n\n  // Model metrics endpoints\n  app.get('/api/metrics', async (req, res) => {\n    try {\n      const metrics = await storage.getModelMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch metrics' });\n    }\n  });\n\n  // Real-time analytics endpoint\n  app.get('/api/analytics/realtime', async (req, res) => {\n    try {\n      const analytics = await AnalyticsService.calculateRealTimeMetrics();\n      res.json(analytics);\n    } catch (error) {\n      console.error('Analytics calculation error:', error);\n      res.status(500).json({ error: 'Failed to calculate real-time analytics' });\n    }\n  });\n\n  app.post('/api/metrics', async (req, res) => {\n    try {\n      const validatedData = insertModelMetricSchema.parse(req.body);\n      const metric = await storage.createModelMetric(validatedData);\n      \n      broadcast({ type: 'metric_created', data: metric });\n      res.status(201).json(metric);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ error: 'Invalid metric data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create metric' });\n    }\n  });\n\n  // Threat intelligence endpoints\n  app.get('/api/threatintel', async (req, res) => {\n    try {\n      const indicators = await ThreatIntelligenceService.getIndicators();\n      res.json(indicators);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch threat intelligence indicators' });\n    }\n  });\n\n  app.get('/api/threatintel/stats', async (req, res) => {\n    try {\n      const stats = ThreatIntelligenceService.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch threat intelligence stats' });\n    }\n  });\n\n  app.get('/api/threatintel/search', async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: 'Query parameter \"q\" is required' });\n      }\n      \n      const indicators = await ThreatIntelligenceService.searchIndicators(query);\n      res.json(indicators);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to search threat intelligence' });\n    }\n  });\n\n  app.get('/api/threatintel/type/:type', async (req, res) => {\n    try {\n      const { type } = req.params;\n      const indicators = await ThreatIntelligenceService.getIndicatorsByType(type);\n      res.json(indicators);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch indicators by type' });\n    }\n  });\n\n  app.post('/api/threatintel', async (req, res) => {\n    try {\n      const indicator = await ThreatIntelligenceService.addIndicator(req.body);\n      res.status(201).json(indicator);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to add threat intelligence indicator' });\n    }\n  });\n\n  app.put('/api/threatintel/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const indicator = await ThreatIntelligenceService.updateIndicator(id, req.body);\n      if (!indicator) {\n        return res.status(404).json({ error: 'Indicator not found' });\n      }\n      res.json(indicator);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update threat intelligence indicator' });\n    }\n  });\n\n  app.delete('/api/threatintel/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await ThreatIntelligenceService.deleteIndicator(id);\n      if (!success) {\n        return res.status(404).json({ error: 'Indicator not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete threat intelligence indicator' });\n    }\n  });\n\n  // Correlation stats endpoint\n  app.get('/api/correlation/stats', async (req, res) => {\n    try {\n      const incidents = await storage.getIncidents();\n      const actions = await storage.getActions();\n      \n      const autoCreatedIncidents = actions.filter(action => \n        action.actionType === 'AUTOMATED_DETECTION'\n      ).length;\n      \n      const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      const recentIncidents = incidents.filter(incident => \n        new Date(incident.createdAt) > last24Hours\n      );\n      \n      res.json({\n        totalIncidents: incidents.length,\n        autoCreatedIncidents,\n        recentIncidents: recentIncidents.length,\n        correlationAccuracy: 0.87, // This would come from ML metrics in real system\n        avgResponseTime: '4.2m'\n      });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch correlation stats' });\n    }\n  });\n\n  // ========================================\n  // KAFKA SECURITY EVENT INGESTION ENDPOINTS  \n  // ========================================\n  \n  // SIEM Integration - Ingest alerts from SIEM systems (Splunk, QRadar, etc.)\n  app.post('/api/kafka/siem/alerts', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestSIEMAlert(req.body);\n      res.status(201).json({ \n        message: 'SIEM alert ingested successfully', \n        eventId: event.id \n      });\n    } catch (error) {\n      console.error('SIEM alert ingestion error:', error);\n      res.status(500).json({ error: 'Failed to ingest SIEM alert' });\n    }\n  });\n  \n  // EDR Integration - Ingest alerts from EDR systems (CrowdStrike, Microsoft Defender, etc.)\n  app.post('/api/kafka/edr/alerts', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestEDRAlert(req.body);\n      res.status(201).json({ \n        message: 'EDR alert ingested successfully', \n        eventId: event.id \n      });\n    } catch (error) {\n      console.error('EDR alert ingestion error:', error);\n      res.status(500).json({ error: 'Failed to ingest EDR alert' });\n    }\n  });\n  \n  // Firewall Integration - Ingest alerts from firewall systems\n  app.post('/api/kafka/firewall/alerts', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestFirewallAlert(req.body);\n      res.status(201).json({ \n        message: 'Firewall alert ingested successfully', \n        eventId: event.id \n      });\n    } catch (error) {\n      console.error('Firewall alert ingestion error:', error);\n      res.status(500).json({ error: 'Failed to ingest firewall alert' });\n    }\n  });\n  \n  // Demo endpoint to simulate live security events\n  app.post('/api/kafka/demo/simulate', async (req, res) => {\n    try {\n      console.log('🎭 Starting security event simulation...');\n      await kafkaService.simulateSecurityEvents();\n      res.json({ \n        message: 'Security event simulation started', \n        note: 'Events will stream to connected dashboards in real-time' \n      });\n    } catch (error) {\n      console.error('Event simulation error:', error);\n      res.status(500).json({ error: 'Failed to start event simulation' });\n    }\n  });\n\n  // === OCSF (Open Cybersecurity Schema Framework) Endpoints ===\n  \n  // Get all OCSF events\n  app.get('/api/ocsf/events', async (req, res) => {\n    try {\n      const events = await storage.getOCSFEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch OCSF events' });\n    }\n  });\n\n  // Get OCSF events by class\n  app.get('/api/ocsf/events/class/:classUid', async (req, res) => {\n    try {\n      const classUid = parseInt(req.params.classUid);\n      if (isNaN(classUid)) {\n        return res.status(400).json({ error: 'Invalid class UID' });\n      }\n      \n      const events = await storage.getOCSFEventsByClass(classUid);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch OCSF events by class' });\n    }\n  });\n\n  // Get specific OCSF event\n  app.get('/api/ocsf/events/:id', async (req, res) => {\n    try {\n      const event = await storage.getOCSFEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ error: 'OCSF event not found' });\n      }\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch OCSF event' });\n    }\n  });\n\n  // Ingest OCSF Network Activity events\n  app.post('/api/ocsf/network-activity', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestOCSFNetworkActivity(req.body);\n      res.status(201).json({ message: 'OCSF Network Activity event ingested successfully', event });\n    } catch (error) {\n      console.error('OCSF Network Activity ingestion error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to ingest OCSF Network Activity event' });\n    }\n  });\n\n  // Ingest OCSF System Activity events\n  app.post('/api/ocsf/system-activity', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestOCSFSystemActivity(req.body);\n      res.status(201).json({ message: 'OCSF System Activity event ingested successfully', event });\n    } catch (error) {\n      console.error('OCSF System Activity ingestion error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to ingest OCSF System Activity event' });\n    }\n  });\n\n  // Ingest OCSF Security Finding events\n  app.post('/api/ocsf/security-finding', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestOCSFSecurityFinding(req.body);\n      res.status(201).json({ message: 'OCSF Security Finding event ingested successfully', event });\n    } catch (error) {\n      console.error('OCSF Security Finding ingestion error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to ingest OCSF Security Finding event' });\n    }\n  });\n\n  // Ingest OCSF Authentication events\n  app.post('/api/ocsf/authentication', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestOCSFAuthentication(req.body);\n      res.status(201).json({ message: 'OCSF Authentication event ingested successfully', event });\n    } catch (error) {\n      console.error('OCSF Authentication ingestion error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to ingest OCSF Authentication event' });\n    }\n  });\n\n  // Generic OCSF event ingestion\n  app.post('/api/ocsf/events', async (req, res) => {\n    try {\n      const event = await SecurityEventIngestion.ingestOCSFEvent(req.body);\n      res.status(201).json({ message: 'OCSF event ingested successfully', event });\n    } catch (error) {\n      console.error('OCSF event ingestion error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to ingest OCSF event' });\n    }\n  });\n\n  // Bulk OCSF event ingestion\n  app.post('/api/ocsf/events/bulk', async (req, res) => {\n    try {\n      const { events } = req.body;\n      \n      if (!Array.isArray(events)) {\n        return res.status(400).json({ error: 'events must be an array' });\n      }\n      \n      const results = await SecurityEventIngestion.ingestOCSFEventsBulk(events);\n      const successful = results.filter(r => r.success).length;\n      const failed = results.filter(r => !r.success).length;\n      \n      res.status(201).json({ \n        message: `Bulk OCSF ingestion completed: ${successful} successful, ${failed} failed`,\n        results,\n        summary: { successful, failed, total: results.length }\n      });\n    } catch (error) {\n      console.error('Bulk OCSF ingestion error:', error);\n      res.status(500).json({ error: 'Failed to process bulk OCSF ingestion' });\n    }\n  });\n\n  // Transform legacy events to OCSF and ingest\n  app.post('/api/ocsf/transform/:sourceType', async (req, res) => {\n    try {\n      const { sourceType } = req.params;\n      \n      if (!['siem', 'edr', 'firewall'].includes(sourceType)) {\n        return res.status(400).json({ error: 'Invalid source type. Must be: siem, edr, or firewall' });\n      }\n      \n      const result = await SecurityEventIngestion.transformAndIngestLegacyEvent(\n        req.body, \n        sourceType as 'siem' | 'edr' | 'firewall'\n      );\n      \n      res.status(201).json({ \n        message: `Legacy ${sourceType} event transformed to OCSF and ingested successfully`,\n        customEvent: result.customEvent,\n        ocsfEvent: result.ocsfEvent\n      });\n    } catch (error) {\n      console.error('OCSF transformation error:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Failed to transform and ingest event' });\n    }\n  });\n\n  // OCSF schema validation endpoint\n  app.post('/api/ocsf/validate', async (req, res) => {\n    try {\n      const { event } = req.body;\n      \n      // Basic OCSF validation\n      const requiredFields = ['class_uid', 'class_name', 'time', 'category_uid', 'category_name'];\n      const missing = requiredFields.filter(field => !event[field]);\n      \n      if (missing.length > 0) {\n        return res.status(400).json({ \n          valid: false, \n          errors: [`Missing required fields: ${missing.join(', ')}`]\n        });\n      }\n      \n      // Check if class_uid is valid\n      const validClassUids = [1001, 2001, 3002, 4001]; // System, Finding, Auth, Network\n      if (!validClassUids.includes(event.class_uid)) {\n        return res.status(400).json({ \n          valid: false, \n          errors: [`Invalid class_uid: ${event.class_uid}. Supported: ${validClassUids.join(', ')}`]\n        });\n      }\n      \n      res.json({ \n        valid: true, \n        message: 'OCSF event is valid',\n        class_name: event.class_name,\n        class_uid: event.class_uid\n      });\n    } catch (error) {\n      console.error('OCSF validation error:', error);\n      res.status(500).json({ error: 'Failed to validate OCSF event' });\n    }\n  });\n\n  // Export endpoints\n  app.get('/api/export/incidents', async (req, res) => {\n    try {\n      const format = req.query.format as 'csv' | 'json' || 'json';\n      const startDate = req.query.start_date ? new Date(req.query.start_date as string) : undefined;\n      const endDate = req.query.end_date ? new Date(req.query.end_date as string) : undefined;\n      const severity = req.query.severity ? (req.query.severity as string).split(',') : undefined;\n      const status = req.query.status ? (req.query.status as string).split(',') : undefined;\n\n      const options = {\n        format,\n        dateRange: startDate && endDate ? { start: startDate, end: endDate } : undefined,\n        filters: {\n          severity,\n          status\n        }\n      };\n\n      const exportData = await ExportService.exportIncidents(options);\n      const filename = ExportService.getExportFilename('incidents', format);\n\n      res.setHeader('Content-Type', format === 'csv' ? 'text/csv' : 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(exportData);\n    } catch (error) {\n      console.error('Export incidents error:', error);\n      res.status(500).json({ error: 'Failed to export incidents' });\n    }\n  });\n\n  app.get('/api/export/alerts', async (req, res) => {\n    try {\n      const format = req.query.format as 'csv' | 'json' || 'json';\n      const startDate = req.query.start_date ? new Date(req.query.start_date as string) : undefined;\n      const endDate = req.query.end_date ? new Date(req.query.end_date as string) : undefined;\n      const severity = req.query.severity ? (req.query.severity as string).split(',') : undefined;\n      const sourceId = req.query.source_id as string;\n\n      const options = {\n        format,\n        dateRange: startDate && endDate ? { start: startDate, end: endDate } : undefined,\n        filters: {\n          severity,\n          sourceId\n        }\n      };\n\n      const exportData = await ExportService.exportAlerts(options);\n      const filename = ExportService.getExportFilename('alerts', format);\n\n      res.setHeader('Content-Type', format === 'csv' ? 'text/csv' : 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(exportData);\n    } catch (error) {\n      console.error('Export alerts error:', error);\n      res.status(500).json({ error: 'Failed to export alerts' });\n    }\n  });\n\n  app.get('/api/export/analytics', async (req, res) => {\n    try {\n      const format = req.query.format as 'csv' | 'json' || 'json';\n      const startDate = req.query.start_date ? new Date(req.query.start_date as string) : undefined;\n      const endDate = req.query.end_date ? new Date(req.query.end_date as string) : undefined;\n\n      const options = {\n        format,\n        dateRange: startDate && endDate ? { start: startDate, end: endDate } : undefined\n      };\n\n      const exportData = await ExportService.exportAnalytics(options);\n      const filename = ExportService.getExportFilename('analytics', format);\n\n      res.setHeader('Content-Type', format === 'csv' ? 'text/csv' : 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(exportData);\n    } catch (error) {\n      console.error('Export analytics error:', error);\n      res.status(500).json({ error: 'Failed to export analytics' });\n    }\n  });\n\n  app.get('/api/export/actions', async (req, res) => {\n    try {\n      const format = req.query.format as 'csv' | 'json' || 'json';\n      const startDate = req.query.start_date ? new Date(req.query.start_date as string) : undefined;\n      const endDate = req.query.end_date ? new Date(req.query.end_date as string) : undefined;\n\n      const options = {\n        format,\n        dateRange: startDate && endDate ? { start: startDate, end: endDate } : undefined\n      };\n\n      const exportData = await ExportService.exportActions(options);\n      const filename = ExportService.getExportFilename('actions', format);\n\n      res.setHeader('Content-Type', format === 'csv' ? 'text/csv' : 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(exportData);\n    } catch (error) {\n      console.error('Export actions error:', error);\n      res.status(500).json({ error: 'Failed to export actions' });\n    }\n  });\n\n  return httpServer;\n}","size_bytes":39042},"server/storage.ts":{"content":"import { type User, type InsertUser, type Source, type InsertSource, type RawAlert, type InsertRawAlert, type Incident, type InsertIncident, type Action, type InsertAction, type Feedback, type InsertFeedback, type ModelMetric, type InsertModelMetric, type NormalizedAlert, type FeatureVector, type OCSFEvent, type InsertOCSFEvent, type EnhancedNormalizedAlert, type InsertEnhancedNormalizedAlert } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByEmailWithPassword(email: string): Promise<(User & { password: string }) | undefined>;\n  createUser(user: InsertUser): Promise<User & { password: string }>;\n\n  // Sources\n  getSources(): Promise<Source[]>;\n  getSource(id: string): Promise<Source | undefined>;\n  createSource(source: InsertSource): Promise<Source>;\n  updateSource(id: string, source: Partial<Source>): Promise<Source | undefined>;\n  deleteSource(id: string): Promise<boolean>;\n\n  // Raw Alerts\n  getRawAlerts(): Promise<RawAlert[]>;\n  getRawAlert(id: string): Promise<RawAlert | undefined>;\n  createRawAlert(alert: InsertRawAlert): Promise<RawAlert>;\n\n  // Normalized Alerts\n  getNormalizedAlerts(): Promise<NormalizedAlert[]>;\n  getNormalizedAlert(id: string): Promise<NormalizedAlert | undefined>;\n  createNormalizedAlert(alert: {\n    sourceId: string;\n    originalId: string;\n    timestamp: Date;\n    severity: string;\n    alertType: string;\n    title: string;\n    description: string;\n    sourceIp?: string;\n    destinationIp?: string;\n    username?: string;\n    ruleId?: string;\n    rawData: any;\n    status: string;\n  }): Promise<NormalizedAlert>;\n\n  // Incidents\n  getIncidents(): Promise<Incident[]>;\n  getIncident(id: string): Promise<Incident | undefined>;\n  createIncident(incident: InsertIncident): Promise<Incident>;\n  updateIncident(id: string, incident: Partial<Incident>): Promise<Incident | undefined>;\n\n  // Actions\n  getActions(): Promise<Action[]>;\n  getActionsByIncident(incidentId: string): Promise<Action[]>;\n  createAction(action: InsertAction): Promise<Action>;\n\n  // Feedback\n  getFeedback(): Promise<Feedback[]>;\n  getFeedbackByIncident(incidentId: string): Promise<Feedback[]>;\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n\n  // Model Metrics\n  getModelMetrics(): Promise<ModelMetric[]>;\n  createModelMetric(metric: InsertModelMetric): Promise<ModelMetric>;\n\n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    activeIncidents: number;\n    alertsToday: number;\n    avgResponseTime: string;\n    modelAccuracy: number;\n  }>;\n\n  // OCSF Events\n  getOCSFEvents(): Promise<OCSFEvent[]>;\n  getOCSFEvent(id: string): Promise<OCSFEvent | undefined>;\n  createOCSFEvent(event: InsertOCSFEvent): Promise<OCSFEvent>;\n  getOCSFEventsByClass(classUid: number): Promise<OCSFEvent[]>;\n\n  // Enhanced Normalized Alerts\n  getEnhancedNormalizedAlerts(): Promise<EnhancedNormalizedAlert[]>;\n  getEnhancedNormalizedAlert(id: string): Promise<EnhancedNormalizedAlert | undefined>;\n  createEnhancedNormalizedAlert(alert: InsertEnhancedNormalizedAlert): Promise<EnhancedNormalizedAlert>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User & { password: string }>;\n  private sources: Map<string, Source>;\n  private rawAlerts: Map<string, RawAlert>;\n  private featureVectors: Map<string, FeatureVector>;\n  private normalizedAlerts: Map<string, NormalizedAlert>;\n  private incidents: Map<string, Incident>;\n  private actions: Map<string, Action>;\n  private feedbacks: Map<string, Feedback>;\n  private modelMetrics: Map<string, ModelMetric>;\n  private ocsfEvents: Map<string, OCSFEvent>;\n  private enhancedNormalizedAlerts: Map<string, EnhancedNormalizedAlert>;\n\n  constructor() {\n    this.users = new Map();\n    this.sources = new Map();\n    this.rawAlerts = new Map();\n    this.featureVectors = new Map();\n    this.normalizedAlerts = new Map();\n    this.incidents = new Map();\n    this.actions = new Map();\n    this.feedbacks = new Map();\n    this.modelMetrics = new Map();\n    this.ocsfEvents = new Map();\n    this.enhancedNormalizedAlerts = new Map();\n\n    // Initialize with some demo data\n    this.initializeDemoData().catch(console.error);\n  }\n\n  private async initializeDemoData() {\n    // Create demo users with different roles and hashed passwords\n    const users = [\n      {\n        email: \"john.smith@company.com\",\n        password: \"password123\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        role: \"analyst\" as const,\n      },\n      {\n        email: \"sarah.johnson@company.com\",\n        password: \"admin123\",\n        firstName: \"Sarah\", \n        lastName: \"Johnson\",\n        role: \"admin\" as const,\n      },\n      {\n        email: \"mike.wilson@company.com\",\n        password: \"password123\",\n        firstName: \"Mike\",\n        lastName: \"Wilson\",\n        role: \"analyst\" as const,\n      }\n    ];\n\n    const userIds: string[] = [];\n    const bcrypt = await import('bcryptjs');\n    \n    for (const userData of users) {\n      // Hash the password\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n      \n      const user: User & { password: string } = {\n        id: randomUUID(),\n        email: userData.email,\n        password: hashedPassword,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        profileImageUrl: null,\n        role: userData.role as 'analyst' | 'admin',\n        createdAt: new Date(Date.now() - Math.random() * 86400000 * 30),\n        updatedAt: new Date(),\n      };\n      this.users.set(user.id, user);\n      userIds.push(user.id);\n    }\n\n    // Create comprehensive demo sources with realistic configurations\n    const sources = [\n      { \n        name: \"Corporate Firewall - Perimeter\", \n        type: \"Firewall\", \n        config: { \n          endpoint: \"https://firewall.corp.local/api\",\n          enabled: true,\n          polling_interval: 300,\n          auth_token: \"fw_token_abc123\"\n        } \n      },\n      { \n        name: \"Windows Defender ATP\", \n        type: \"EDR\", \n        config: { \n          endpoint: \"https://api.securitycenter.microsoft.com\",\n          enabled: true,\n          tenant_id: \"corp-tenant-123\",\n          polling_interval: 180\n        } \n      },\n      { \n        name: \"Splunk Enterprise SIEM\", \n        type: \"SIEM\", \n        config: { \n          endpoint: \"https://splunk.corp.local:8089\",\n          enabled: true,\n          index: \"security_events\",\n          auth_token: \"splunk_token_xyz789\"\n        } \n      },\n      { \n        name: \"CrowdStrike Falcon\", \n        type: \"EDR\", \n        config: { \n          endpoint: \"https://api.crowdstrike.com\",\n          enabled: true,\n          client_id: \"cs_client_456\",\n          polling_interval: 120\n        } \n      },\n      { \n        name: \"Palo Alto Networks\", \n        type: \"Firewall\", \n        config: { \n          endpoint: \"https://panorama.corp.local/api\",\n          enabled: false,\n          maintenance_mode: true\n        } \n      },\n      { \n        name: \"Office 365 Security\", \n        type: \"Cloud Security\", \n        config: { \n          endpoint: \"https://graph.microsoft.com\",\n          enabled: true,\n          tenant_id: \"o365-tenant-789\"\n        } \n      }\n    ];\n\n    const sourceIds: string[] = [];\n    sources.forEach(sourceData => {\n      const source: Source = {\n        id: randomUUID(),\n        name: sourceData.name,\n        type: sourceData.type,\n        config: sourceData.config,\n        createdAt: new Date(Date.now() - Math.random() * 86400000 * 60), // Random date within last 60 days\n      };\n      this.sources.set(source.id, source);\n      sourceIds.push(source.id);\n    });\n\n    // Create realistic raw alerts with varying severity and types\n    const alertTemplates = [\n      {\n        severity: \"critical\",\n        type: \"malware_detection\",\n        description: \"Ransomware activity detected on endpoint DESKTOP-ABC123\",\n        rawData: { \n          process: \"suspicious_encrypt.exe\", \n          user: \"jdoe\", \n          endpoint: \"DESKTOP-ABC123\",\n          hash: \"d41d8cd98f00b204e9800998ecf8427e\"\n        }\n      },\n      {\n        severity: \"high\", \n        type: \"network_intrusion\",\n        description: \"Multiple failed login attempts from external IP\",\n        rawData: { \n          source_ip: \"192.168.1.100\", \n          target_service: \"RDP\", \n          attempts: 25,\n          blocked: true\n        }\n      },\n      {\n        severity: \"medium\",\n        type: \"policy_violation\", \n        description: \"Unauthorized software installation detected\",\n        rawData: { \n          software: \"BitTorrent Client\", \n          user: \"temp_contractor\", \n          endpoint: \"LAPTOP-XYZ789\"\n        }\n      },\n      {\n        severity: \"low\",\n        type: \"anomaly_detection\",\n        description: \"Unusual network traffic pattern observed\",\n        rawData: { \n          bytes_transferred: 1024000, \n          destination: \"unknown_server.com\",\n          protocol: \"HTTPS\"\n        }\n      },\n      {\n        severity: \"critical\",\n        type: \"data_exfiltration\",\n        description: \"Large data transfer to external storage detected\",\n        rawData: { \n          volume: \"2.5GB\", \n          destination: \"dropbox.com\", \n          user: \"marketing_intern\"\n        }\n      },\n      {\n        severity: \"high\",\n        type: \"privilege_escalation\",\n        description: \"Admin privileges granted to standard user account\",\n        rawData: { \n          user: \"contractor_bob\", \n          granted_by: \"admin_system\", \n          privileges: [\"local_admin\", \"domain_user\"]\n        }\n      }\n    ];\n\n    const rawAlertIds: string[] = [];\n    // Create 50 raw alerts with realistic timestamps\n    for (let i = 0; i < 50; i++) {\n      const template = alertTemplates[Math.floor(Math.random() * alertTemplates.length)];\n      const sourceId = sourceIds[Math.floor(Math.random() * sourceIds.length)];\n      \n      const rawAlert: RawAlert = {\n        id: randomUUID(),\n        sourceId,\n        severity: template.severity,\n        type: template.type,\n        description: template.description,\n        rawData: { ...template.rawData, alert_id: `ALT-${Date.now()}-${i}` },\n        receivedAt: new Date(Date.now() - Math.random() * 86400000 * 7), // Random within last 7 days\n      };\n      this.rawAlerts.set(rawAlert.id, rawAlert);\n      rawAlertIds.push(rawAlert.id);\n    }\n\n    // Create feature vectors for ML analysis\n    const featureVectorIds: string[] = [];\n    rawAlertIds.slice(0, 30).forEach(alertId => {\n      const featureVector: FeatureVector = {\n        id: randomUUID(),\n        rawAlertId: alertId,\n        features: {\n          severity_score: Math.random() * 10,\n          frequency_score: Math.random() * 5,\n          source_reputation: Math.random() * 10,\n          behavioral_anomaly: Math.random() * 8,\n          network_risk: Math.random() * 6\n        },\n        computedAt: new Date(Date.now() - Math.random() * 86400000 * 5),\n      };\n      this.featureVectors.set(featureVector.id, featureVector);\n      featureVectorIds.push(featureVector.id);\n    });\n\n    // Create normalized alerts based on feature vectors\n    const normalizedAlertIds: string[] = [];\n    featureVectorIds.forEach(vectorId => {\n      const confidence = Math.random();\n      const decision = confidence > 0.7 ? \"AUTO\" : \"MANUAL\";\n      \n      const normalizedAlert: NormalizedAlert = {\n        id: randomUUID(),\n        featureVectorId: vectorId,\n        decision: decision as \"AUTO\" | \"MANUAL\", \n        confidence,\n        status: Math.random() > 0.3 ? \"reviewed\" : \"pending\",\n        createdAt: new Date(Date.now() - Math.random() * 86400000 * 4),\n        closedAt: Math.random() > 0.4 ? new Date(Date.now() - Math.random() * 86400000 * 2) : null,\n      };\n      this.normalizedAlerts.set(normalizedAlert.id, normalizedAlert);\n      normalizedAlertIds.push(normalizedAlert.id);\n    });\n\n    // Create realistic security incidents\n    const incidentTemplates = [\n      {\n        title: \"Ransomware Attack - Finance Department\",\n        description: \"Multiple systems in finance showing signs of file encryption. Immediate containment required.\",\n        severity: \"critical\",\n        status: \"investigating\"\n      },\n      {\n        title: \"Suspicious Network Activity\",\n        description: \"Unusual outbound connections detected from development servers.\",\n        severity: \"high\", \n        status: \"monitoring\"\n      },\n      {\n        title: \"Failed Login Attempts\",\n        description: \"Coordinated brute force attack against VPN endpoints.\",\n        severity: \"medium\",\n        status: \"resolved\"\n      },\n      {\n        title: \"Data Loss Prevention Alert\",\n        description: \"Sensitive customer data accessed outside normal hours.\",\n        severity: \"high\",\n        status: \"investigating\"\n      },\n      {\n        title: \"Malware Detection\",\n        description: \"Trojan detected on HR workstation, contained and isolated.\",\n        severity: \"medium\",\n        status: \"resolved\"\n      }\n    ];\n\n    const incidentIds: string[] = [];\n    incidentTemplates.forEach((template, index) => {\n      const incident: Incident = {\n        id: randomUUID(),\n        title: template.title,\n        description: template.description,\n        severity: template.severity as \"low\" | \"medium\" | \"high\" | \"critical\",\n        status: template.status as \"open\" | \"investigating\" | \"monitoring\" | \"resolved\",\n        assignedTo: userIds[Math.floor(Math.random() * userIds.length)],\n        createdAt: new Date(Date.now() - Math.random() * 86400000 * 14), // Random within last 14 days\n        closedAt: template.status === \"resolved\" ? \n          new Date(Date.now() - Math.random() * 86400000 * 7) : null,\n      };\n      this.incidents.set(incident.id, incident);\n      incidentIds.push(incident.id);\n    });\n\n    // Create response actions for incidents\n    const actionTemplates = [\n      { type: \"isolate_endpoint\", description: \"Isolated affected workstation from network\" },\n      { type: \"block_ip\", description: \"Added malicious IP to firewall blocklist\" },\n      { type: \"reset_credentials\", description: \"Forced password reset for affected accounts\" },\n      { type: \"update_signatures\", description: \"Updated antivirus signatures across all endpoints\" },\n      { type: \"notify_users\", description: \"Sent security awareness notification to all staff\" },\n      { type: \"escalate\", description: \"Escalated to senior security team\" },\n      { type: \"document\", description: \"Documented findings in incident report\" }\n    ];\n\n    incidentIds.forEach(incidentId => {\n      const numActions = Math.floor(Math.random() * 4) + 1; // 1-4 actions per incident\n      for (let i = 0; i < numActions; i++) {\n        const template = actionTemplates[Math.floor(Math.random() * actionTemplates.length)];\n        const action: Action = {\n          id: randomUUID(),\n          incidentId,\n          actionType: template.type,\n          payload: { description: template.description, automated: Math.random() > 0.6 },\n          performedBy: userIds[Math.floor(Math.random() * userIds.length)],\n          performedAt: new Date(Date.now() - Math.random() * 86400000 * 10),\n        };\n        this.actions.set(action.id, action);\n      }\n    });\n\n    // Create analyst feedback for model improvement\n    const feedbackTemplates = [\n      \"Alert was correctly identified as malicious\",\n      \"False positive - legitimate admin activity\", \n      \"Severity should be upgraded to critical\",\n      \"Missing context about user behavior patterns\",\n      \"Good detection but needs faster response time\",\n      \"Alert correlation could be improved\"\n    ];\n\n    normalizedAlertIds.slice(0, 20).forEach(alertId => {\n      const feedback: Feedback = {\n        id: randomUUID(),\n        alertId: alertId,\n        incidentId: null,\n        userId: userIds[Math.floor(Math.random() * userIds.length)],\n        feedback: feedbackTemplates[Math.floor(Math.random() * feedbackTemplates.length)],\n        rating: Math.floor(Math.random() * 5) + 1, // 1-5 rating\n        submittedAt: new Date(Date.now() - Math.random() * 86400000 * 8),\n      };\n      this.feedbacks.set(feedback.id, feedback);\n    });\n\n    // Create model performance metrics\n    const metricDates = [];\n    for (let i = 30; i >= 0; i--) {\n      metricDates.push(new Date(Date.now() - i * 86400000)); // Last 30 days\n    }\n\n    metricDates.forEach(date => {\n      const metrics: ModelMetric = {\n        id: randomUUID(),\n        accuracy: 0.85 + Math.random() * 0.1, // 85-95% accuracy\n        precision: 0.80 + Math.random() * 0.15, // 80-95% precision  \n        recall: 0.75 + Math.random() * 0.2, // 75-95% recall\n        runTs: date,\n        alertsProcessed: Math.floor(Math.random() * 1000) + 100,\n        autoActions: Math.floor(Math.random() * 50),\n        manualReviews: Math.floor(Math.random() * 20),\n        latencyMs: Math.floor(Math.random() * 500) + 100,\n      };\n      this.modelMetrics.set(metrics.id, metrics);\n    });\n\n    console.log(`Demo data initialized: ${users.length} users, ${sources.length} sources, ${rawAlertIds.length} alerts, ${incidentIds.length} incidents`);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const userWithPassword = this.users.get(id);\n    if (!userWithPassword) return undefined;\n    \n    // Return user without password for public API\n    const { password, ...user } = userWithPassword;\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const userWithPassword = Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n    if (!userWithPassword) return undefined;\n    \n    // Return user without password for public API\n    const { password, ...user } = userWithPassword;\n    return user;\n  }\n\n  async getUserByEmailWithPassword(email: string): Promise<(User & { password: string }) | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User & { password: string }> {\n    const id = randomUUID();\n    const user: User & { password: string } = { \n      id, \n      email: insertUser.email,\n      password: insertUser.password,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      role: (insertUser.role || 'analyst') as 'analyst' | 'admin',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getSources(): Promise<Source[]> {\n    return Array.from(this.sources.values());\n  }\n\n  async getSource(id: string): Promise<Source | undefined> {\n    return this.sources.get(id);\n  }\n\n  async createSource(insertSource: InsertSource): Promise<Source> {\n    const id = randomUUID();\n    const source: Source = { ...insertSource, id, createdAt: new Date(), config: insertSource.config || {} };\n    this.sources.set(id, source);\n    return source;\n  }\n\n  async updateSource(id: string, updateData: Partial<Source>): Promise<Source | undefined> {\n    const source = this.sources.get(id);\n    if (!source) return undefined;\n    \n    const updatedSource = { ...source, ...updateData };\n    this.sources.set(id, updatedSource);\n    return updatedSource;\n  }\n\n  async deleteSource(id: string): Promise<boolean> {\n    return this.sources.delete(id);\n  }\n\n  async getRawAlerts(): Promise<RawAlert[]> {\n    return Array.from(this.rawAlerts.values());\n  }\n\n  async getRawAlert(id: string): Promise<RawAlert | undefined> {\n    return this.rawAlerts.get(id);\n  }\n\n  async createRawAlert(insertAlert: InsertRawAlert): Promise<RawAlert> {\n    const id = randomUUID();\n    const alert: RawAlert = { \n      ...insertAlert, \n      id, \n      receivedAt: new Date(),\n      type: insertAlert.type || null,\n      severity: insertAlert.severity || null,\n      description: insertAlert.description || null\n    };\n    this.rawAlerts.set(id, alert);\n    return alert;\n  }\n\n  async getNormalizedAlerts(): Promise<NormalizedAlert[]> {\n    return Array.from(this.normalizedAlerts.values());\n  }\n\n  async getNormalizedAlert(id: string): Promise<NormalizedAlert | undefined> {\n    return this.normalizedAlerts.get(id);\n  }\n\n  async createNormalizedAlert(alertData: {\n    sourceId: string;\n    originalId: string;\n    timestamp: Date;\n    severity: string;\n    alertType: string;\n    title: string;\n    description: string;\n    sourceIp?: string;\n    destinationIp?: string;\n    username?: string;\n    ruleId?: string;\n    rawData: any;\n    status: string;\n  }): Promise<NormalizedAlert> {\n    // For Kafka integration, create a simplified normalized alert\n    // In a real implementation, this would involve ML feature extraction\n    const id = randomUUID();\n    \n    // Create a dummy feature vector for the alert\n    const featureVectorId = randomUUID();\n    const featureVector: FeatureVector = {\n      id: featureVectorId,\n      rawAlertId: alertData.originalId,\n      features: {\n        severity_score: alertData.severity === 'critical' ? 10 : alertData.severity === 'high' ? 7 : alertData.severity === 'medium' ? 5 : 2,\n        source_reputation: Math.random() * 10,\n        behavioral_anomaly: Math.random() * 8,\n      },\n      computedAt: new Date(),\n    };\n    this.featureVectors.set(featureVectorId, featureVector);\n    \n    // Create the normalized alert\n    const normalizedAlert: NormalizedAlert = {\n      id,\n      featureVectorId,\n      decision: Math.random() > 0.7 ? \"AUTO\" : \"MANUAL\",\n      confidence: Math.random() * 0.4 + 0.6, // 0.6-1.0 confidence\n      status: alertData.status,\n      createdAt: alertData.timestamp,\n      closedAt: null,\n    };\n    \n    this.normalizedAlerts.set(id, normalizedAlert);\n    return normalizedAlert;\n  }\n\n  async getIncidents(): Promise<Incident[]> {\n    return Array.from(this.incidents.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getIncident(id: string): Promise<Incident | undefined> {\n    return this.incidents.get(id);\n  }\n\n  async createIncident(insertIncident: InsertIncident): Promise<Incident> {\n    const id = randomUUID();\n    const incident: Incident = { \n      ...insertIncident, \n      id, \n      createdAt: new Date(), \n      closedAt: null,\n      status: (insertIncident.status as 'open' | 'investigating' | 'monitoring' | 'resolved') || 'open',\n      severity: insertIncident.severity as 'low' | 'medium' | 'high' | 'critical',\n      description: insertIncident.description || null,\n      assignedTo: insertIncident.assignedTo || null\n    };\n    this.incidents.set(id, incident);\n    return incident;\n  }\n\n  async updateIncident(id: string, updateData: Partial<Incident>): Promise<Incident | undefined> {\n    const incident = this.incidents.get(id);\n    if (!incident) return undefined;\n    \n    const updatedIncident = { ...incident, ...updateData };\n    this.incidents.set(id, updatedIncident);\n    return updatedIncident;\n  }\n\n  async getActions(): Promise<Action[]> {\n    return Array.from(this.actions.values());\n  }\n\n  async getActionsByIncident(incidentId: string): Promise<Action[]> {\n    return Array.from(this.actions.values())\n      .filter(action => action.incidentId === incidentId);\n  }\n\n  async createAction(insertAction: InsertAction): Promise<Action> {\n    const id = randomUUID();\n    const action: Action = { \n      ...insertAction, \n      id, \n      performedAt: new Date(),\n      payload: insertAction.payload || {},\n      performedBy: insertAction.performedBy || null\n    };\n    this.actions.set(id, action);\n    return action;\n  }\n\n  async getFeedback(): Promise<Feedback[]> {\n    return Array.from(this.feedbacks.values())\n      .sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n  }\n\n  async getFeedbackByIncident(incidentId: string): Promise<Feedback[]> {\n    return Array.from(this.feedbacks.values())\n      .filter(feedback => feedback.incidentId === incidentId);\n  }\n\n  async createFeedback(insertFeedback: InsertFeedback): Promise<Feedback> {\n    const id = randomUUID();\n    const feedback: Feedback = { \n      ...insertFeedback, \n      id, \n      submittedAt: new Date(),\n      alertId: insertFeedback.alertId || null,\n      incidentId: insertFeedback.incidentId || null,\n      rating: insertFeedback.rating || null\n    };\n    this.feedbacks.set(id, feedback);\n    return feedback;\n  }\n\n  async getModelMetrics(): Promise<ModelMetric[]> {\n    return Array.from(this.modelMetrics.values())\n      .sort((a, b) => new Date(b.runTs).getTime() - new Date(a.runTs).getTime());\n  }\n\n  async createModelMetric(insertMetric: InsertModelMetric): Promise<ModelMetric> {\n    const id = randomUUID();\n    const metric: ModelMetric = { ...insertMetric, id };\n    this.modelMetrics.set(id, metric);\n    return metric;\n  }\n\n  async getDashboardStats(): Promise<{\n    activeIncidents: number;\n    alertsToday: number;\n    avgResponseTime: string;\n    modelAccuracy: number;\n  }> {\n    const activeIncidents = Array.from(this.incidents.values())\n      .filter(incident => incident.status === 'open').length;\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const alertsToday = Array.from(this.rawAlerts.values())\n      .filter(alert => new Date(alert.receivedAt) >= today).length;\n\n    const latestMetrics = Array.from(this.modelMetrics.values())\n      .sort((a, b) => new Date(b.runTs).getTime() - new Date(a.runTs).getTime())[0];\n\n    return {\n      activeIncidents,\n      alertsToday,\n      avgResponseTime: \"4.2m\",\n      modelAccuracy: latestMetrics?.precision * 100 || 94.7,\n    };\n  }\n\n  // OCSF Events methods\n  async getOCSFEvents(): Promise<OCSFEvent[]> {\n    return Array.from(this.ocsfEvents.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getOCSFEvent(id: string): Promise<OCSFEvent | undefined> {\n    return this.ocsfEvents.get(id);\n  }\n\n  async createOCSFEvent(insertEvent: InsertOCSFEvent): Promise<OCSFEvent> {\n    const id = randomUUID();\n    const event: OCSFEvent = { \n      ...insertEvent, \n      id, \n      createdAt: new Date(),\n      message: insertEvent.message || null,\n      severity: insertEvent.severity || null,\n      observables: insertEvent.observables || null\n    };\n    this.ocsfEvents.set(id, event);\n    return event;\n  }\n\n  async getOCSFEventsByClass(classUid: number): Promise<OCSFEvent[]> {\n    return Array.from(this.ocsfEvents.values())\n      .filter(event => event.classUid === classUid)\n      .sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime());\n  }\n\n  // Enhanced Normalized Alerts methods\n  async getEnhancedNormalizedAlerts(): Promise<EnhancedNormalizedAlert[]> {\n    return Array.from(this.enhancedNormalizedAlerts.values())\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }\n\n  async getEnhancedNormalizedAlert(id: string): Promise<EnhancedNormalizedAlert | undefined> {\n    return this.enhancedNormalizedAlerts.get(id);\n  }\n\n  async createEnhancedNormalizedAlert(insertAlert: InsertEnhancedNormalizedAlert): Promise<EnhancedNormalizedAlert> {\n    const id = randomUUID();\n    const alert: EnhancedNormalizedAlert = { \n      ...insertAlert, \n      id, \n      createdAt: new Date(),\n      closedAt: null,\n      assignedTo: insertAlert.assignedTo || null,\n      ocsfEventId: insertAlert.ocsfEventId || null,\n      description: insertAlert.description || null,\n      sourceIp: insertAlert.sourceIp || null,\n      destinationIp: insertAlert.destinationIp || null,\n      username: insertAlert.username || null,\n      ruleId: insertAlert.ruleId || null,\n      rawData: insertAlert.rawData || null,\n      status: (insertAlert.status || 'open') as 'open' | 'investigating' | 'closed' | 'false_positive'\n    };\n    this.enhancedNormalizedAlerts.set(id, alert);\n    return alert;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":27991},"server/threatIntelligence.ts":{"content":"import { storage } from \"./storage\";\nimport { type RawAlert } from \"@shared/schema\";\n\nexport interface ThreatIndicator {\n  id: string;\n  type: 'IP' | 'Domain' | 'URL' | 'FileHash' | 'Email' | 'Registry';\n  value: string;\n  confidence: number; // 0-1\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n  source: string; // e.g., 'VirusTotal', 'MISP', 'AlienVault'\n  firstSeen: Date;\n  lastSeen: Date;\n  threatType?: string; // e.g., 'malware', 'phishing', 'apt'\n  description?: string;\n  references?: string[];\n  ttl?: number; // Time to live in hours\n}\n\nexport interface ThreatEnrichmentResult {\n  indicators: ThreatIndicator[];\n  riskScore: number; // 0-10\n  threats: {\n    type: string;\n    confidence: number;\n    description: string;\n  }[];\n  recommendations: string[];\n}\n\nexport interface ThreatFeed {\n  name: string;\n  url: string;\n  enabled: boolean;\n  format: 'json' | 'csv' | 'xml' | 'stix';\n  updateInterval: number; // hours\n  lastUpdated?: Date;\n  apiKey?: string;\n}\n\nexport class ThreatIntelligenceService {\n  private static indicators: Map<string, ThreatIndicator> = new Map();\n  \n  // Sample threat feeds configuration\n  private static feeds: ThreatFeed[] = [\n    {\n      name: 'AlienVault OTX',\n      url: 'https://otx.alienvault.com/api/v1/indicators',\n      enabled: true,\n      format: 'json',\n      updateInterval: 6,\n      apiKey: process.env.ALIENVAULT_API_KEY\n    },\n    {\n      name: 'MISP Feed',\n      url: 'https://misp.example.com/feeds',\n      enabled: false,\n      format: 'json',\n      updateInterval: 12,\n      apiKey: process.env.MISP_API_KEY\n    },\n    {\n      name: 'VirusTotal',\n      url: 'https://www.virustotal.com/vtapi/v2',\n      enabled: true,\n      format: 'json',\n      updateInterval: 4,\n      apiKey: process.env.VIRUSTOTAL_API_KEY\n    }\n  ];\n\n  static {\n    // Initialize with sample threat intelligence data\n    this.initializeSampleData();\n  }\n\n  private static initializeSampleData() {\n    const sampleIndicators: ThreatIndicator[] = [\n      {\n        id: 'ioc-001',\n        type: 'IP',\n        value: '198.51.100.23',\n        confidence: 0.95,\n        severity: 'critical',\n        tags: ['malware', 'c2', 'apt29'],\n        source: 'VirusTotal',\n        firstSeen: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        threatType: 'command-and-control',\n        description: 'Known C2 server for APT29 malware campaign',\n        references: ['https://attack.mitre.org/groups/G0016/']\n      },\n      {\n        id: 'ioc-002',\n        type: 'Domain',\n        value: 'malware.example.com',\n        confidence: 0.87,\n        severity: 'high',\n        tags: ['malware', 'downloader', 'emotet'],\n        source: 'AlienVault OTX',\n        firstSeen: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n        threatType: 'malware-distribution',\n        description: 'Domain serving Emotet banking trojan',\n        references: ['https://example.com/threat-report-emotet']\n      },\n      {\n        id: 'ioc-003',\n        type: 'FileHash',\n        value: 'a1b2c3d4e5f6789012345678901234567890abcd',\n        confidence: 0.92,\n        severity: 'critical',\n        tags: ['ransomware', 'ryuk', 'encryption'],\n        source: 'MISP',\n        firstSeen: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 12 * 60 * 60 * 1000),\n        threatType: 'ransomware',\n        description: 'Ryuk ransomware variant hash',\n        references: ['https://example.com/ryuk-analysis']\n      },\n      {\n        id: 'ioc-004',\n        type: 'IP',\n        value: '203.0.113.45',\n        confidence: 0.78,\n        severity: 'medium',\n        tags: ['scanning', 'brute-force', 'ssh'],\n        source: 'ThreatFox',\n        firstSeen: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 3 * 60 * 60 * 1000),\n        threatType: 'scanning',\n        description: 'IP address conducting SSH brute force attacks',\n        references: []\n      },\n      {\n        id: 'ioc-005',\n        type: 'Email',\n        value: 'phishing@badactor.com',\n        confidence: 0.89,\n        severity: 'high',\n        tags: ['phishing', 'credential-theft', 'business-email-compromise'],\n        source: 'PhishTank',\n        firstSeen: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 6 * 60 * 60 * 1000),\n        threatType: 'phishing',\n        description: 'Email address used in business email compromise campaigns',\n        references: ['https://example.com/bec-report']\n      },\n      {\n        id: 'ioc-006',\n        type: 'URL',\n        value: 'https://evil-domain.com/payload.exe',\n        confidence: 0.94,\n        severity: 'critical',\n        tags: ['malware', 'trojan', 'payload'],\n        source: 'URLVoid',\n        firstSeen: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        lastSeen: new Date(Date.now() - 1 * 60 * 60 * 1000),\n        threatType: 'malware-delivery',\n        description: 'URL hosting trojan payloads',\n        references: []\n      }\n    ];\n\n    sampleIndicators.forEach(indicator => {\n      this.indicators.set(indicator.value, indicator);\n    });\n\n    console.log(`🛡️ Loaded ${sampleIndicators.length} threat intelligence indicators`);\n  }\n\n  static async enrichAlert(alert: RawAlert): Promise<ThreatEnrichmentResult> {\n    const enrichmentResult: ThreatEnrichmentResult = {\n      indicators: [],\n      riskScore: 0,\n      threats: [],\n      recommendations: []\n    };\n\n    // Extract potential IOCs from alert data\n    const iocs = this.extractIOCs(alert);\n    let totalRiskScore = 0;\n    let threatCount = 0;\n\n    for (const ioc of iocs) {\n      const indicator = this.indicators.get(ioc.value);\n      if (indicator) {\n        enrichmentResult.indicators.push(indicator);\n        \n        // Calculate risk contribution\n        const riskContribution = this.calculateRiskScore(indicator);\n        totalRiskScore += riskContribution;\n        threatCount++;\n\n        // Add threat information\n        enrichmentResult.threats.push({\n          type: indicator.threatType || 'unknown',\n          confidence: indicator.confidence,\n          description: indicator.description || `${indicator.type} indicator detected`\n        });\n      }\n    }\n\n    // Calculate overall risk score (0-10)\n    enrichmentResult.riskScore = threatCount > 0 ? \n      Math.min(totalRiskScore / threatCount * 10, 10) : 0;\n\n    // Generate recommendations based on findings\n    enrichmentResult.recommendations = this.generateRecommendations(enrichmentResult);\n\n    return enrichmentResult;\n  }\n\n  private static extractIOCs(alert: RawAlert): { type: string; value: string }[] {\n    const iocs: { type: string; value: string }[] = [];\n    const alertText = JSON.stringify(alert.rawData).toLowerCase();\n\n    // Extract IP addresses\n    const ipRegex = /\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b/g;\n    const ips = alertText.match(ipRegex) || [];\n    ips.forEach(ip => {\n      if (this.isValidIP(ip)) {\n        iocs.push({ type: 'IP', value: ip });\n      }\n    });\n\n    // Extract domains\n    const domainRegex = /\\b(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\b/g;\n    const domains = alertText.match(domainRegex) || [];\n    domains.forEach(domain => {\n      if (this.isValidDomain(domain)) {\n        iocs.push({ type: 'Domain', value: domain });\n      }\n    });\n\n    // Extract file hashes (SHA1, SHA256, MD5)\n    const hashRegex = /\\b[a-f0-9]{32,64}\\b/g;\n    const hashes = alertText.match(hashRegex) || [];\n    hashes.forEach(hash => {\n      iocs.push({ type: 'FileHash', value: hash });\n    });\n\n    // Extract email addresses\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n    const emails = alertText.match(emailRegex) || [];\n    emails.forEach(email => {\n      iocs.push({ type: 'Email', value: email.toLowerCase() });\n    });\n\n    // Extract URLs\n    const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g;\n    const urls = alertText.match(urlRegex) || [];\n    urls.forEach(url => {\n      iocs.push({ type: 'URL', value: url });\n    });\n\n    return iocs;\n  }\n\n  private static calculateRiskScore(indicator: ThreatIndicator): number {\n    let score = indicator.confidence;\n\n    // Severity multiplier\n    const severityMultipliers = { 'low': 0.25, 'medium': 0.5, 'high': 0.75, 'critical': 1.0 };\n    score *= severityMultipliers[indicator.severity];\n\n    // Recency bonus (more recent = higher risk)\n    const daysSinceLastSeen = (Date.now() - indicator.lastSeen.getTime()) / (1000 * 60 * 60 * 24);\n    const recencyBonus = Math.max(0, 1 - (daysSinceLastSeen / 30)); // Decay over 30 days\n    score *= (1 + recencyBonus * 0.5);\n\n    // Threat type multiplier\n    const threatTypeMultipliers: { [key: string]: number } = {\n      'ransomware': 1.2,\n      'command-and-control': 1.1,\n      'malware-distribution': 1.0,\n      'phishing': 0.9,\n      'scanning': 0.7\n    };\n    const threatMultiplier = threatTypeMultipliers[indicator.threatType || ''] || 1.0;\n    score *= threatMultiplier;\n\n    return Math.min(score, 1.0);\n  }\n\n  private static generateRecommendations(enrichment: ThreatEnrichmentResult): string[] {\n    const recommendations: string[] = [];\n\n    if (enrichment.riskScore >= 7) {\n      recommendations.push('IMMEDIATE ACTION: High-risk threat indicators detected');\n      recommendations.push('Isolate affected systems immediately');\n      recommendations.push('Escalate to senior security team');\n    } else if (enrichment.riskScore >= 4) {\n      recommendations.push('Investigate and monitor affected systems');\n      recommendations.push('Consider blocking identified IOCs');\n    } else if (enrichment.riskScore >= 1) {\n      recommendations.push('Monitor for additional suspicious activity');\n      recommendations.push('Document findings for trend analysis');\n    }\n\n    // Specific recommendations based on threat types\n    const threatTypes = enrichment.threats.map(t => t.type);\n    if (threatTypes.includes('ransomware')) {\n      recommendations.push('Check for file encryption activities');\n      recommendations.push('Verify backup integrity and accessibility');\n    }\n    if (threatTypes.includes('phishing')) {\n      recommendations.push('Check for credential compromise');\n      recommendations.push('Notify users about potential phishing attempts');\n    }\n    if (threatTypes.includes('command-and-control')) {\n      recommendations.push('Block network communication to identified C2 servers');\n      recommendations.push('Hunt for additional compromised endpoints');\n    }\n\n    return recommendations;\n  }\n\n  private static isValidIP(ip: string): boolean {\n    const parts = ip.split('.');\n    return parts.length === 4 && parts.every(part => {\n      const num = parseInt(part, 10);\n      return num >= 0 && num <= 255;\n    });\n  }\n\n  private static isValidDomain(domain: string): boolean {\n    return domain.includes('.') && \n           domain.length > 3 && \n           !domain.includes(' ') &&\n           !['localhost', 'example.com', 'test.local'].includes(domain);\n  }\n\n  static async getIndicators(): Promise<ThreatIndicator[]> {\n    return Array.from(this.indicators.values());\n  }\n\n  static async getIndicatorsByType(type: string): Promise<ThreatIndicator[]> {\n    return Array.from(this.indicators.values()).filter(indicator => \n      indicator.type.toLowerCase() === type.toLowerCase()\n    );\n  }\n\n  static async searchIndicators(query: string): Promise<ThreatIndicator[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.indicators.values()).filter(indicator =>\n      indicator.value.toLowerCase().includes(searchTerm) ||\n      indicator.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||\n      (indicator.description || '').toLowerCase().includes(searchTerm)\n    );\n  }\n\n  static async addIndicator(indicator: Omit<ThreatIndicator, 'id'>): Promise<ThreatIndicator> {\n    const newIndicator: ThreatIndicator = {\n      ...indicator,\n      id: `ioc-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n    \n    this.indicators.set(newIndicator.value, newIndicator);\n    return newIndicator;\n  }\n\n  static async updateIndicator(id: string, updates: Partial<ThreatIndicator>): Promise<ThreatIndicator | null> {\n    const indicator = Array.from(this.indicators.values()).find(i => i.id === id);\n    if (!indicator) return null;\n\n    const updatedIndicator = { ...indicator, ...updates };\n    this.indicators.set(updatedIndicator.value, updatedIndicator);\n    return updatedIndicator;\n  }\n\n  static async deleteIndicator(id: string): Promise<boolean> {\n    const indicator = Array.from(this.indicators.values()).find(i => i.id === id);\n    if (!indicator) return false;\n\n    return this.indicators.delete(indicator.value);\n  }\n\n  static getStats() {\n    const indicators = Array.from(this.indicators.values());\n    const stats = {\n      total: indicators.length,\n      byType: {} as { [key: string]: number },\n      bySeverity: {} as { [key: string]: number },\n      bySource: {} as { [key: string]: number },\n      recentlyUpdated: indicators.filter(i => \n        new Date(i.lastSeen).getTime() > Date.now() - 24 * 60 * 60 * 1000\n      ).length\n    };\n\n    indicators.forEach(indicator => {\n      stats.byType[indicator.type] = (stats.byType[indicator.type] || 0) + 1;\n      stats.bySeverity[indicator.severity] = (stats.bySeverity[indicator.severity] || 0) + 1;\n      stats.bySource[indicator.source] = (stats.bySource[indicator.source] || 0) + 1;\n    });\n\n    return stats;\n  }\n}","size_bytes":13668},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, real, uuid, boolean, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: text(\"role\").notNull().$type<'analyst' | 'admin'>().default('analyst'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Sources table\nexport const sources = pgTable(\"sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // e.g. EDR, SIEM\n  config: jsonb(\"config\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Raw alerts table\nexport const rawAlerts = pgTable(\"raw_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourceId: varchar(\"source_id\").notNull().references(() => sources.id, { onDelete: \"cascade\" }),\n  severity: text(\"severity\"),\n  type: text(\"type\"),\n  description: text(\"description\"),\n  rawData: jsonb(\"raw_data\").notNull(),\n  receivedAt: timestamp(\"received_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Normalized alerts table\nexport const normalizedAlerts = pgTable(\"normalized_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  featureVectorId: varchar(\"feature_vector_id\").notNull().references(() => featureVectors.id, { onDelete: \"cascade\" }),\n  decision: text(\"decision\").notNull().$type<'AUTO' | 'MANUAL'>(),\n  confidence: real(\"confidence\").notNull(),\n  status: text(\"status\").notNull().default('pending'),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  closedAt: timestamp(\"closed_at\", { withTimezone: true }),\n});\n\n// Feature vectors table\nexport const featureVectors = pgTable(\"feature_vectors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rawAlertId: varchar(\"raw_alert_id\").notNull().references(() => rawAlerts.id, { onDelete: \"cascade\" }),\n  features: jsonb(\"features\").notNull(),\n  computedAt: timestamp(\"computed_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Incidents table\nexport const incidents = pgTable(\"incidents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  severity: text(\"severity\").notNull().$type<'low' | 'medium' | 'high' | 'critical'>(),\n  status: text(\"status\").notNull().$type<'open' | 'investigating' | 'monitoring' | 'resolved'>().default('open'),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  closedAt: timestamp(\"closed_at\", { withTimezone: true }),\n});\n\n// Actions table\nexport const actions = pgTable(\"actions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  incidentId: varchar(\"incident_id\").notNull().references(() => incidents.id, { onDelete: \"cascade\" }),\n  actionType: text(\"action_type\").notNull(), // AUTO_QUARANTINE, ANALYST_REVIEW\n  payload: jsonb(\"payload\"),\n  performedBy: text(\"performed_by\"),\n  performedAt: timestamp(\"performed_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Feedback table\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  alertId: varchar(\"alert_id\").references(() => normalizedAlerts.id, { onDelete: \"cascade\" }),\n  incidentId: varchar(\"incident_id\").references(() => incidents.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  feedback: text(\"feedback\").notNull(),\n  rating: integer(\"rating\"),\n  submittedAt: timestamp(\"submitted_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\n// Model metrics table\nexport const modelMetrics = pgTable(\"model_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  runTs: timestamp(\"run_ts\", { withTimezone: true }).notNull(),\n  alertsProcessed: integer(\"alerts_processed\").notNull(),\n  autoActions: integer(\"auto_actions\").notNull(),\n  manualReviews: integer(\"manual_reviews\").notNull(),\n  accuracy: real(\"accuracy\").notNull(),\n  precision: real(\"precision\").notNull(),\n  recall: real(\"recall\").notNull(),\n  latencyMs: integer(\"latency_ms\").notNull(),\n});\n\n// OCSF Events table - Store raw OCSF events for compliance and analysis\nexport const ocsfEvents = pgTable(\"ocsf_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classUid: integer(\"class_uid\").notNull(),\n  className: text(\"class_name\").notNull(),\n  categoryUid: integer(\"category_uid\").notNull(),\n  categoryName: text(\"category_name\").notNull(),\n  activityId: integer(\"activity_id\").notNull(),\n  activityName: text(\"activity_name\").notNull(),\n  severityId: integer(\"severity_id\").notNull(),\n  severity: text(\"severity\"),\n  time: timestamp(\"time\", { withTimezone: true }).notNull(),\n  message: text(\"message\"),\n  rawData: jsonb(\"raw_data\").notNull(),\n  observables: jsonb(\"observables\"), // Store OCSF observables as JSON\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => ({\n  classUidIdx: index(\"ocsf_events_class_uid_idx\").on(table.classUid),\n  severityIdIdx: index(\"ocsf_events_severity_id_idx\").on(table.severityId),\n  timeIdx: index(\"ocsf_events_time_idx\").on(table.time),\n}));\n\n// Enhanced normalized alerts table to support both custom and OCSF events\nexport const enhancedNormalizedAlerts = pgTable(\"enhanced_normalized_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourceId: text(\"source_id\").notNull(), // Source identifier\n  originalId: text(\"original_id\").notNull(), // Original event ID\n  timestamp: timestamp(\"timestamp\", { withTimezone: true }).notNull(),\n  severity: text(\"severity\").notNull().$type<'low' | 'medium' | 'high' | 'critical'>(),\n  alertType: text(\"alert_type\").notNull().$type<'malware' | 'intrusion' | 'policy_violation' | 'anomaly' | 'threat_intel'>(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  // Network fields\n  sourceIp: text(\"source_ip\"),\n  destinationIp: text(\"destination_ip\"),\n  // System fields\n  username: text(\"username\"),\n  ruleId: text(\"rule_id\"),\n  // Storage\n  rawData: jsonb(\"raw_data\"),\n  ocsfEventId: varchar(\"ocsf_event_id\").references(() => ocsfEvents.id), // Link to OCSF event if applicable\n  status: text(\"status\").notNull().$type<'open' | 'investigating' | 'closed' | 'false_positive'>().default('open'),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  closedAt: timestamp(\"closed_at\", { withTimezone: true }),\n}, (table) => ({\n  severityIdx: index(\"enhanced_alerts_severity_idx\").on(table.severity),\n  statusIdx: index(\"enhanced_alerts_status_idx\").on(table.status),\n  timestampIdx: index(\"enhanced_alerts_timestamp_idx\").on(table.timestamp),\n  sourceIdx: index(\"enhanced_alerts_source_idx\").on(table.sourceId),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerUserSchema = createInsertSchema(users).omit({\n  id: true,\n  role: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  confirmPassword: z.string().min(1, \"Password confirmation is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertSourceSchema = createInsertSchema(sources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRawAlertSchema = createInsertSchema(rawAlerts).omit({\n  id: true,\n  receivedAt: true,\n});\n\nexport const insertIncidentSchema = createInsertSchema(incidents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActionSchema = createInsertSchema(actions).omit({\n  id: true,\n  performedAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertModelMetricSchema = createInsertSchema(modelMetrics).omit({\n  id: true,\n});\n\nexport const insertOCSFEventSchema = createInsertSchema(ocsfEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEnhancedNormalizedAlertSchema = createInsertSchema(enhancedNormalizedAlerts).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type User = Omit<typeof users.$inferSelect, 'password'>; // Exclude password from public User type\nexport type InsertSource = z.infer<typeof insertSourceSchema>;\nexport type Source = typeof sources.$inferSelect;\nexport type InsertRawAlert = z.infer<typeof insertRawAlertSchema>;\nexport type RawAlert = typeof rawAlerts.$inferSelect;\nexport type NormalizedAlert = typeof normalizedAlerts.$inferSelect;\nexport type FeatureVector = typeof featureVectors.$inferSelect;\nexport type Incident = typeof incidents.$inferSelect;\nexport type InsertIncident = z.infer<typeof insertIncidentSchema>;\nexport type Action = typeof actions.$inferSelect;\nexport type InsertAction = z.infer<typeof insertActionSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type ModelMetric = typeof modelMetrics.$inferSelect;\nexport type InsertModelMetric = z.infer<typeof insertModelMetricSchema>;\nexport type OCSFEvent = typeof ocsfEvents.$inferSelect;\nexport type InsertOCSFEvent = z.infer<typeof insertOCSFEventSchema>;\nexport type EnhancedNormalizedAlert = typeof enhancedNormalizedAlerts.$inferSelect;\nexport type InsertEnhancedNormalizedAlert = z.infer<typeof insertEnhancedNormalizedAlertSchema>;\n","size_bytes":10567},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Investigation from \"@/pages/investigation\";\nimport AIAssistant from \"@/pages/ai-assistant\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/investigation\" component={Investigation} />\n      <Route path=\"/ai-assistant\" component={AIAssistant} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1154},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ================================\n   Enhanced Variables & Base Styles\n   ================================ */\n:root {\n  --primary-dark: hsl(220, 15%, 5%);\n  --primary-accent: hsl(330, 100%, 50%);\n  --secondary-accent: hsl(267, 100%, 67%);\n  --text-primary: hsl(0, 0%, 98%);\n  --text-secondary: hsl(0, 0%, 70%);\n  --border-subtle: hsla(330, 100%, 50%, 0.2);\n  --glow-color: hsla(330, 100%, 50%, 0.6);\n  --secondary-glow: hsla(267, 100%, 67%, 0.4);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  line-height: 1.6;\n  font-weight: 400;\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  background: var(--primary-dark);\n  color: var(--text-primary);\n  line-height: 1.6;\n  overflow-x: hidden;\n}\n\n/* ================================\n   Enhanced Glow Effects & Animations\n   ================================ */\n.glow-text {\n  text-shadow:\n    0 0 5px var(--glow-color),\n    0 0 10px var(--glow-color),\n    0 0 15px var(--glow-color),\n    0 0 20px var(--glow-color);\n  animation: text-glow 2s ease-in-out infinite alternate;\n}\n\n@keyframes text-glow {\n  from {\n    text-shadow:\n      0 0 5px var(--glow-color),\n      0 0 10px var(--glow-color),\n      0 0 15px var(--glow-color),\n      0 0 20px var(--glow-color);\n  }\n  to {\n    text-shadow:\n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      0 0 30px var(--glow-color),\n      0 0 40px var(--glow-color);\n  }\n}\n\n.gradient-glow {\n  background: radial-gradient(\n    circle at center,\n    hsla(330, 100%, 50%, 0.15) 0%,\n    hsla(267, 100%, 67%, 0.1) 25%,\n    transparent 50%\n  );\n  animation: gradient-shift 4s ease-in-out infinite;\n}\n\n@keyframes gradient-shift {\n  0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.8; }\n  50% { transform: scale(1.1) rotate(180deg); opacity: 1; }\n}\n\n/* ================================\n   Enhanced Button Styles\n   ================================ */\n.glow-button {\n  position: relative;\n  overflow: hidden;\n  box-shadow:\n    0 0 20px var(--glow-color),\n    inset 0 0 20px hsla(330, 100%, 50%, 0.1);\n  transition: all 0.3s ease;\n}\n\n.glow-button::before {\n  content: '';\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200%;\n  height: 200%;\n  background: linear-gradient(\n    45deg,\n    transparent,\n    hsla(330, 100%, 50%, 0.2),\n    transparent\n  );\n  transform: rotate(45deg);\n  transition: all 0.6s;\n  opacity: 0;\n}\n\n.glow-button:hover::before {\n  animation: shimmer 0.6s ease-in-out;\n}\n\n@keyframes shimmer {\n  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }\n  50% { opacity: 1; }\n  100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }\n}\n\n/* ================================\n   Enhanced SOC Dashboard Animations\n   ================================ */\n.cortex-glow { animation: cortex-glow 3s ease-in-out infinite; }\n.ai-core-glow { animation: ai-core-glow 4s ease-in-out infinite; }\n.alert-pulse { animation: alert-pulse 2s ease-in-out infinite; }\n.incident-pulse { animation: incident-pulse 2.5s ease-in-out infinite; }\n.sidebar-glow { animation: sidebar-glow 5s ease-in-out infinite; }\n.dashboard-glow { animation: dashboard-glow 6s ease-in-out infinite; }\n\n@keyframes cortex-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px var(--glow-color);\n    border-color: var(--primary-accent);\n  }\n  50% {\n    box-shadow: 0 0 40px var(--glow-color), 0 0 60px var(--secondary-glow);\n    border-color: var(--secondary-accent);\n  }\n}\n\n@keyframes ai-core-glow {\n  0%, 100% {\n    background: linear-gradient(135deg, var(--primary-accent) 0%, var(--secondary-accent) 100%);\n    transform: scale(1);\n  }\n  50% {\n    background: linear-gradient(135deg, var(--secondary-accent) 0%, var(--primary-accent) 100%);\n    transform: scale(1.05);\n  }\n}\n\n@keyframes alert-pulse {\n  0%, 100% {\n    background-color: hsl(0, 70%, 50%);\n    box-shadow: 0 0 10px hsla(0, 70%, 50%, 0.5);\n  }\n  50% {\n    background-color: hsl(0, 85%, 60%);\n    box-shadow: 0 0 20px hsla(0, 85%, 60%, 0.8);\n  }\n}\n\n/* ================================\n   Writing Animation Effects\n   ================================ */\n.typewriter {\n  overflow: hidden;\n  border-right: 2px solid var(--primary-accent);\n  white-space: nowrap;\n  animation: typing 3s steps(40, end), blink-caret 0.75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent; }\n  50% { border-color: var(--primary-accent); }\n}\n\n/* ================================\n   Enhanced Interactive Elements\n   ================================ */\n.response-automated { animation: response-glow-pink 3s ease-in-out infinite; }\n.response-manual { animation: response-glow-blue 3.5s ease-in-out infinite; }\n\n@keyframes response-glow-pink {\n  0%, 100% {\n    box-shadow: 0 0 15px hsla(330, 100%, 50%, 0.3);\n    border-color: hsla(330, 100%, 50%, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 30px hsla(330, 100%, 50%, 0.6);\n    border-color: hsla(330, 100%, 50%, 0.8);\n  }\n}\n\n@keyframes response-glow-blue {\n  0%, 100% {\n    box-shadow: 0 0 15px hsla(220, 100%, 60%, 0.3);\n    border-color: hsla(220, 100%, 60%, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 30px hsla(220, 100%, 60%, 0.6);\n    border-color: hsla(220, 100%, 60%, 0.8);\n  }\n}\n\n/* Enhanced hover states */\n.nav-item-active {\n  box-shadow: 0 0 15px hsla(330, 100%, 50%, 0.25);\n}\n\n.nav-item-hover:hover {\n  background: hsla(330, 100%, 50%, 0.08);\n  box-shadow: 0 0 10px hsla(330, 100%, 50%, 0.2);\n  transform: translateY(-2px);\n  transition: all 0.3s ease;\n}\n\n.data-source-hover:hover {\n  background: hsla(220, 15%, 8%, 0.8);\n  border-color: hsla(330, 100%, 50%, 0.25);\n  transform: translateX(5px);\n  transition: all 0.3s ease;\n}\n\n.stats-card-hover:hover {\n  border-color: hsla(330, 100%, 50%, 0.35);\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px hsla(330, 100%, 50%, 0.1);\n  transition: all 0.3s ease;\n}\n\n/* ================================\n   Advanced Data Visualization\n   ================================ */\n.data-flow-line {\n  position: relative;\n  overflow: hidden;\n}\n\n.data-flow-line::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    var(--primary-accent),\n    transparent\n  );\n  animation: data-flow 2s linear infinite;\n}\n\n@keyframes data-flow {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n\n/* ================================\n   Scrollbar Styling\n   ================================ */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--primary-dark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(to bottom, var(--primary-accent), var(--secondary-accent));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(to bottom, var(--secondary-accent), var(--primary-accent));\n}\n\n/* ================================\n   Enhanced Responsive Design\n   ================================ */\n@media (max-width: 768px) {\n  .glow-text {\n    font-size: clamp(2rem, 8vw, 4rem);\n  }\n\n  .gradient-glow {\n    opacity: 0.7;\n  }\n}\n\n/* ================================\n   Utility Classes\n   ================================ */\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px var(--glow-color);\n    opacity: 0.8;\n  }\n  50% {\n    box-shadow: 0 0 40px var(--glow-color), 0 0 60px var(--secondary-glow);\n    opacity: 1;\n  }\n}\n\n.glass-morphism {\n  background: hsla(220, 15%, 10%, 0.8);\n  backdrop-filter: blur(20px);\n  border: 1px solid hsla(330, 100%, 50%, 0.2);\n}","size_bytes":8018},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/alert-stream.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Shield, Clock, Plus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Alert {\n  id: string;\n  title: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  timestamp: Date;\n  source?: string;\n  description?: string;\n  payload?: Record<string, any>;\n}\n\ninterface AlertStreamProps {\n  alerts: Alert[];\n  onCreateIncident: (alert: Alert) => void;\n  isCreatingIncident?: boolean;\n  className?: string;\n}\n\nexport function AlertStream({ \n  alerts, \n  onCreateIncident, \n  isCreatingIncident = false,\n  className \n}: AlertStreamProps) {\n  const getSeverityConfig = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'critical':\n        return {\n          color: 'border-red-500',\n          bgColor: 'bg-red-500/10',\n          iconColor: 'text-red-500',\n          badgeClass: 'soc-status-critical'\n        };\n      case 'high':\n        return {\n          color: 'border-amber-500',\n          bgColor: 'bg-amber-500/10',\n          iconColor: 'text-amber-500',\n          badgeClass: 'soc-status-high'\n        };\n      case 'medium':\n        return {\n          color: 'border-sky-500',\n          bgColor: 'bg-sky-500/10',\n          iconColor: 'text-sky-500',\n          badgeClass: 'soc-status-medium'\n        };\n      case 'low':\n        return {\n          color: 'border-emerald-500',\n          bgColor: 'bg-emerald-500/10',\n          iconColor: 'text-emerald-500',\n          badgeClass: 'soc-status-low'\n        };\n      default:\n        return {\n          color: 'border-slate-500',\n          bgColor: 'bg-slate-500/10',\n          iconColor: 'text-slate-500',\n          badgeClass: 'soc-status-medium'\n        };\n    }\n  };\n\n  const getTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - timestamp.getTime();\n    const diffSeconds = Math.floor(diffMs / 1000);\n    const diffMinutes = Math.floor(diffSeconds / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n\n    if (diffSeconds < 60) {\n      return `${diffSeconds}s ago`;\n    } else if (diffMinutes < 60) {\n      return `${diffMinutes}m ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h ago`;\n    } else {\n      return timestamp.toLocaleDateString();\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-3 max-h-96 overflow-y-auto\", className)} data-testid=\"alert-stream\">\n      {alerts.map((alert, index) => {\n        const severityConfig = getSeverityConfig(alert.severity);\n        \n        return (\n          <div\n            key={`${alert.id}-${index}`}\n            className={cn(\n              \"flex items-center justify-between p-4 bg-slate-750 rounded-lg border-l-4 transition-all duration-200 hover:bg-slate-700\",\n              severityConfig.color\n            )}\n            data-testid={`alert-${index}`}\n          >\n            <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n              <div className={cn(\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\", severityConfig.bgColor)}>\n                {alert.severity === 'critical' || alert.severity === 'high' ? (\n                  <AlertTriangle className={cn(\"w-4 h-4\", severityConfig.iconColor)} />\n                ) : (\n                  <Shield className={cn(\"w-4 h-4\", severityConfig.iconColor)} />\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <p className=\"text-sm font-medium text-white truncate\" data-testid={`alert-${index}-title`}>\n                    {alert.title}\n                  </p>\n                  <Badge className={severityConfig.badgeClass} data-testid={`alert-${index}-severity`}>\n                    {alert.severity}\n                  </Badge>\n                </div>\n                <p className=\"text-xs text-slate-400 truncate\" data-testid={`alert-${index}-source`}>\n                  {alert.source ? `Source: ${alert.source}` : 'Unknown source'}\n                  {alert.payload && Object.keys(alert.payload).length > 0 && (\n                    <span className=\"ml-2\">\n                      • {Object.entries(alert.payload).slice(0, 2).map(([key, value]) => \n                        `${key}: ${value}`\n                      ).join(' • ')}\n                    </span>\n                  )}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3 flex-shrink-0\">\n              <div className=\"flex items-center space-x-1 text-xs text-slate-400\">\n                <Clock className=\"w-3 h-3\" />\n                <span data-testid={`alert-${index}-time`}>\n                  {getTimeAgo(alert.timestamp)}\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-sky-400 hover:text-sky-300 hover:bg-sky-500/10\"\n                onClick={() => onCreateIncident(alert)}\n                disabled={isCreatingIncident}\n                data-testid={`create-incident-${index}`}\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                {isCreatingIncident ? \"Creating...\" : \"Create Incident\"}\n              </Button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":5403},"client/src/components/export-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Download, FileText, Database } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\ninterface ExportDialogProps {\n  type: 'incidents' | 'alerts' | 'analytics' | 'actions';\n  triggerText?: string;\n  className?: string;\n}\n\ninterface ExportFilters {\n  startDate?: string;\n  endDate?: string;\n  severity?: string[];\n  status?: string[];\n  sourceId?: string;\n}\n\nexport function ExportDialog({ type, triggerText, className }: ExportDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [format, setFormat] = useState<'csv' | 'json'>('csv');\n  const [isExporting, setIsExporting] = useState(false);\n  const [filters, setFilters] = useState<ExportFilters>({});\n  const { toast } = useToast();\n\n  const handleExport = async () => {\n    try {\n      setIsExporting(true);\n      \n      let response: Response;\n      \n      switch (type) {\n        case 'incidents':\n          response = await api.exportIncidents(format, filters);\n          break;\n        case 'alerts':\n          response = await api.exportAlerts(format, filters);\n          break;\n        case 'analytics':\n          response = await api.exportAnalytics(format, {\n            startDate: filters.startDate,\n            endDate: filters.endDate,\n          });\n          break;\n        case 'actions':\n          response = await api.exportActions(format, {\n            startDate: filters.startDate,\n            endDate: filters.endDate,\n          });\n          break;\n        default:\n          throw new Error('Unknown export type');\n      }\n\n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n\n      // Get the filename from Content-Disposition header or generate one\n      const contentDisposition = response.headers.get('Content-Disposition');\n      const filenameMatch = contentDisposition?.match(/filename=\"(.+)\"/);\n      const filename = filenameMatch ? filenameMatch[1] : `soc-${type}-export.${format}`;\n\n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Export Complete\",\n        description: `${type} data exported successfully as ${format.toUpperCase()}`,\n      });\n\n      setOpen(false);\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: `Failed to export ${type} data. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const severityOptions = ['critical', 'high', 'medium', 'low'];\n  const statusOptions = ['open', 'investigating', 'monitoring', 'resolved'];\n\n  const handleSeverityToggle = (severity: string, checked: boolean) => {\n    setFilters(prev => ({\n      ...prev,\n      severity: checked \n        ? [...(prev.severity || []), severity]\n        : (prev.severity || []).filter(s => s !== severity)\n    }));\n  };\n\n  const handleStatusToggle = (status: string, checked: boolean) => {\n    setFilters(prev => ({\n      ...prev,\n      status: checked \n        ? [...(prev.status || []), status]\n        : (prev.status || []).filter(s => s !== status)\n    }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className={className || \"soc-button-primary\"} data-testid={`export-${type}`}>\n          <Download className=\"w-4 h-4 mr-2\" />\n          {triggerText || `Export ${type.charAt(0).toUpperCase() + type.slice(1)}`}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"bg-slate-800 border-slate-700 max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">\n            Export {type.charAt(0).toUpperCase() + type.slice(1)} Data\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Format Selection */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-slate-300\">Export Format</Label>\n            <Select value={format} onValueChange={(value: 'csv' | 'json') => setFormat(value)}>\n              <SelectTrigger className=\"bg-slate-700 border-slate-600 text-white\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"csv\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    CSV (Excel Compatible)\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"json\">\n                  <div className=\"flex items-center\">\n                    <Database className=\"w-4 h-4 mr-2\" />\n                    JSON (Structured Data)\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Date Range */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-slate-300\">Date Range (Optional)</Label>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <Label className=\"text-xs text-slate-400\">Start Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.startDate || ''}\n                  onChange={(e) => setFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs text-slate-400\">End Date</Label>\n                <Input\n                  type=\"date\"\n                  value={filters.endDate || ''}\n                  onChange={(e) => setFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                  className=\"bg-slate-700 border-slate-600 text-white\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Filters specific to incidents and alerts */}\n          {(type === 'incidents' || type === 'alerts') && (\n            <div className=\"space-y-4\">\n              {/* Severity Filter */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-slate-300\">Severity (Optional)</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {severityOptions.map((severity) => (\n                    <div key={severity} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`severity-${severity}`}\n                        checked={filters.severity?.includes(severity) || false}\n                        onCheckedChange={(checked) => handleSeverityToggle(severity, checked as boolean)}\n                      />\n                      <Label \n                        htmlFor={`severity-${severity}`} \n                        className=\"text-sm text-slate-300 capitalize\"\n                      >\n                        {severity}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Status Filter (incidents only) */}\n              {type === 'incidents' && (\n                <div className=\"space-y-2\">\n                  <Label className=\"text-slate-300\">Status (Optional)</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {statusOptions.map((status) => (\n                      <div key={status} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`status-${status}`}\n                          checked={filters.status?.includes(status) || false}\n                          onCheckedChange={(checked) => handleStatusToggle(status, checked as boolean)}\n                        />\n                        <Label \n                          htmlFor={`status-${status}`} \n                          className=\"text-sm text-slate-300 capitalize\"\n                        >\n                          {status}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Export Actions */}\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setOpen(false)}\n              disabled={isExporting}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleExport}\n              disabled={isExporting}\n              className=\"soc-button-primary\"\n              data-testid=\"confirm-export\"\n            >\n              {isExporting ? \"Exporting...\" : \"Export Data\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9438},"client/src/components/incident-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Eye, UserPlus, TrendingUp, Clock, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Incident } from \"@shared/schema\";\n\ninterface IncidentCardProps {\n  incident: Incident;\n  onView?: () => void;\n  onAssign?: () => void;\n  onEscalate?: () => void;\n  isLoading?: boolean;\n  className?: string;\n  testId?: string;\n}\n\nexport function IncidentCard({ \n  incident,\n  onView,\n  onAssign,\n  onEscalate,\n  isLoading = false,\n  className,\n  testId = \"incident-card\"\n}: IncidentCardProps) {\n  const getSeverityInfo = (confidence: number) => {\n    if (confidence > 0.8) return { label: 'Critical', color: 'critical', dotColor: 'bg-red-500' };\n    if (confidence > 0.5) return { label: 'High', color: 'high', dotColor: 'bg-amber-500' };\n    if (confidence > 0.3) return { label: 'Medium', color: 'medium', dotColor: 'bg-sky-500' };\n    return { label: 'Low', color: 'low', dotColor: 'bg-emerald-500' };\n  };\n\n  const getTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const incidentDate = new Date(date);\n    const diffMs = now.getTime() - incidentDate.getTime();\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMinutes < 60) {\n      return `${diffMinutes}m ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h ago`;\n    } else if (diffDays < 7) {\n      return `${diffDays}d ago`;\n    } else {\n      return incidentDate.toLocaleDateString();\n    }\n  };\n\n  const severity = getSeverityInfo(incident.confidence);\n  const isOpen = incident.status === 'open';\n\n  return (\n    <Card className={cn(\"soc-card transition-all duration-200 hover:border-slate-600\", className)} data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start space-x-3 mb-4\">\n          <div className={cn(\"w-3 h-3 rounded-full mt-2 flex-shrink-0\", severity.dotColor)}></div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <h3 className=\"text-sm font-medium text-white truncate\" data-testid={`${testId}-title`}>\n                Security Incident #{incident.id.slice(-6)}\n              </h3>\n              <Badge \n                className={`soc-status-${severity.color} ml-2 flex-shrink-0`}\n                data-testid={`${testId}-severity`}\n              >\n                {severity.label}\n              </Badge>\n            </div>\n            \n            <p className=\"text-xs text-slate-400 mb-3\" data-testid={`${testId}-description`}>\n              {incident.decision === 'AUTO' ? 'Automated detection' : 'Manual review required'} \n              {' • '}\n              {(incident.confidence * 100).toFixed(1)}% confidence\n            </p>\n\n            <div className=\"flex items-center space-x-4 text-xs text-slate-400 mb-4\">\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"w-3 h-3\" />\n                <span data-testid={`${testId}-time`}>\n                  {getTimeAgo(incident.createdAt)}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <User className=\"w-3 h-3\" />\n                <span data-testid={`${testId}-status`}>\n                  {incident.status}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              {onView && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-sky-400 hover:text-sky-300 hover:bg-sky-500/10 h-8 px-2\"\n                  onClick={onView}\n                  disabled={isLoading}\n                  data-testid={`${testId}-view`}\n                >\n                  <Eye className=\"w-3 h-3 mr-1\" />\n                  View\n                </Button>\n              )}\n              \n              {onAssign && isOpen && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-emerald-400 hover:text-emerald-300 hover:bg-emerald-500/10 h-8 px-2\"\n                  onClick={onAssign}\n                  disabled={isLoading}\n                  data-testid={`${testId}-assign`}\n                >\n                  <UserPlus className=\"w-3 h-3 mr-1\" />\n                  Assign\n                </Button>\n              )}\n              \n              {onEscalate && isOpen && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10 h-8 px-2\"\n                  onClick={onEscalate}\n                  disabled={isLoading}\n                  data-testid={`${testId}-escalate`}\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Escalate\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Additional incident metadata */}\n        <div className=\"pt-3 border-t border-slate-700\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-slate-500\">ID: {incident.id}</span>\n            <span className=\"text-slate-500\">\n              Decision: {incident.decision}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5620},"client/src/components/metrics-chart.tsx":{"content":"import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport { cn } from \"@/lib/utils\";\n\ninterface ChartData {\n  name: string;\n  value: number | string;\n  category?: string;\n}\n\ninterface MetricsChartProps {\n  data: ChartData[];\n  type?: 'line' | 'bar' | 'pie';\n  height?: number;\n  className?: string;\n  color?: string;\n  showGrid?: boolean;\n  showTooltip?: boolean;\n}\n\nconst COLORS = [\n  'hsl(207, 90%, 54%)', // sky-500\n  'hsl(160, 84%, 39%)', // emerald-500\n  'hsl(43, 96%, 56%)',  // amber-500\n  'hsl(0, 84%, 60%)',   // red-500\n  'hsl(262, 83%, 58%)', // purple-500\n  'hsl(142, 71%, 45%)', // green-500\n];\n\nexport function MetricsChart({ \n  data, \n  type = 'line',\n  height = 300,\n  className,\n  color = 'hsl(207, 90%, 54%)',\n  showGrid = true,\n  showTooltip = true\n}: MetricsChartProps) {\n  const numericData = data.map(item => ({\n    ...item,\n    value: typeof item.value === 'string' ? parseFloat(item.value) || 0 : item.value\n  }));\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-slate-800 border border-slate-600 rounded-lg p-3 shadow-lg\">\n          <p className=\"text-slate-300 text-sm font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-white text-sm\">\n              <span className=\"font-medium\">{entry.name}:</span> {entry.value}\n              {type === 'line' && entry.name === 'value' && 'ms'}\n              {type === 'bar' && '%'}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (numericData.length === 0) {\n    return (\n      <div \n        className={cn(\"flex items-center justify-center text-slate-400 bg-slate-750 rounded-lg border border-slate-600\", className)}\n        style={{ height }}\n        data-testid=\"metrics-chart-empty\"\n      >\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 bg-slate-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"></path>\n            </svg>\n          </div>\n          <p className=\"text-sm\">No data available</p>\n        </div>\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    switch (type) {\n      case 'bar':\n        return (\n          <BarChart data={numericData}>\n            {showGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(215, 25%, 27%)\" />}\n            <XAxis \n              dataKey=\"name\" \n              stroke=\"hsl(215, 20%, 65%)\" \n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            <YAxis \n              stroke=\"hsl(215, 20%, 65%)\" \n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            {showTooltip && <Tooltip content={<CustomTooltip />} />}\n            <Bar \n              dataKey=\"value\" \n              fill={color}\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        );\n\n      case 'pie':\n        return (\n          <PieChart>\n            <Pie\n              data={numericData}\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius={height / 3}\n              fill={color}\n              dataKey=\"value\"\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n            >\n              {numericData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            {showTooltip && <Tooltip content={<CustomTooltip />} />}\n          </PieChart>\n        );\n\n      case 'line':\n      default:\n        return (\n          <LineChart data={numericData}>\n            {showGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(215, 25%, 27%)\" />}\n            <XAxis \n              dataKey=\"name\" \n              stroke=\"hsl(215, 20%, 65%)\" \n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            <YAxis \n              stroke=\"hsl(215, 20%, 65%)\" \n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            {showTooltip && <Tooltip content={<CustomTooltip />} />}\n            <Line \n              type=\"monotone\" \n              dataKey=\"value\" \n              stroke={color}\n              strokeWidth={2}\n              dot={{ fill: color, strokeWidth: 2, r: 4 }}\n              activeDot={{ r: 6, stroke: color, strokeWidth: 2, fill: 'hsl(222, 84%, 4.9%)' }}\n            />\n          </LineChart>\n        );\n    }\n  };\n\n  return (\n    <div className={cn(\"w-full\", className)} data-testid=\"metrics-chart\">\n      <ResponsiveContainer width=\"100%\" height={height}>\n        {renderChart()}\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":5249},"client/src/components/source-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Shield, Server, Activity, Trash2, Edit, AlertCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Source } from \"@shared/schema\";\n\ninterface SourceCardProps {\n  source: Source;\n  onToggle: (enabled: boolean) => void;\n  onDelete: () => void;\n  onEdit?: () => void;\n  isDeleting?: boolean;\n  isToggling?: boolean;\n  testId?: string;\n  className?: string;\n}\n\nexport function SourceCard({ \n  source, \n  onToggle, \n  onDelete, \n  onEdit,\n  isDeleting = false,\n  isToggling = false,\n  testId = \"source-card\",\n  className \n}: SourceCardProps) {\n  const getSourceIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'siem':\n        return Shield;\n      case 'edr':\n        return Activity;\n      case 'firewall':\n        return Server;\n      default:\n        return Server;\n    }\n  };\n\n  const getSourceIconColor = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'siem':\n        return 'text-sky-500';\n      case 'edr':\n        return 'text-emerald-500';\n      case 'firewall':\n        return 'text-amber-500';\n      default:\n        return 'text-slate-500';\n    }\n  };\n\n  const getSourceIconBg = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'siem':\n        return 'bg-sky-500/10';\n      case 'edr':\n        return 'bg-emerald-500/10';\n      case 'firewall':\n        return 'bg-amber-500/10';\n      default:\n        return 'bg-slate-500/10';\n    }\n  };\n\n  const isEnabled = (source.config as any)?.enabled !== false;\n  const IconComponent = getSourceIcon(source.type);\n  \n  // Mock some realistic data for demonstration\n  const lastEventTime = new Date(Date.now() - Math.random() * 3600000).toISOString();\n  const eventsPerHour = Math.floor(Math.random() * 5000) + 100;\n\n  const getLastEventDisplay = () => {\n    const now = new Date();\n    const lastEvent = new Date(lastEventTime);\n    const diffMs = now.getTime() - lastEvent.getTime();\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n\n    if (diffMinutes < 60) {\n      return `${diffMinutes}m ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h ago`;\n    } else {\n      return lastEvent.toLocaleDateString();\n    }\n  };\n\n  return (\n    <Card className={cn(\"soc-card transition-all duration-200 hover:border-slate-600\", className)} data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={cn(\"w-10 h-10 rounded-lg flex items-center justify-center\", getSourceIconBg(source.type))}>\n            <IconComponent className={cn(\"w-5 h-5\", getSourceIconColor(source.type))} />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              className={isEnabled ? \"soc-status-low\" : \"soc-status-critical\"}\n              data-testid={`${testId}-status`}\n            >\n              {isEnabled ? \"Active\" : \"Inactive\"}\n            </Badge>\n            {!isEnabled && (\n              <AlertCircle className=\"w-4 h-4 text-amber-500\" />\n            )}\n          </div>\n        </div>\n\n        <div className=\"mb-4\">\n          <h3 className=\"text-lg font-medium text-white mb-2\" data-testid={`${testId}-name`}>\n            {source.name}\n          </h3>\n          <p className=\"text-sm text-slate-400 mb-3\" data-testid={`${testId}-type`}>\n            {source.type} • {(source.config as any)?.endpoint ? 'Configured' : 'Configuration needed'}\n          </p>\n        </div>\n\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-slate-400\">Last Event:</span>\n            <span className=\"text-white\" data-testid={`${testId}-last-event`}>\n              {isEnabled ? getLastEventDisplay() : 'N/A'}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-slate-400\">Events/hr:</span>\n            <span className=\"text-white\" data-testid={`${testId}-events-per-hour`}>\n              {isEnabled ? eventsPerHour.toLocaleString() : '0'}\n            </span>\n          </div>\n          {(source.config as any)?.endpoint && (\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-slate-400\">Endpoint:</span>\n              <span className=\"text-slate-300 text-xs truncate max-w-32\" title={(source.config as any).endpoint}>\n                {(source.config as any).endpoint}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between pt-4 border-t border-slate-700\">\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              checked={isEnabled}\n              onCheckedChange={onToggle}\n              disabled={isToggling}\n              data-testid={`${testId}-toggle`}\n            />\n            <span className=\"text-sm text-slate-400\">\n              {isToggling ? \"Updating...\" : isEnabled ? \"Enabled\" : \"Disabled\"}\n            </span>\n          </div>\n\n          <div className=\"flex items-center space-x-1\">\n            {onEdit && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-slate-400 hover:text-white hover:bg-slate-700\"\n                onClick={onEdit}\n                data-testid={`${testId}-edit`}\n              >\n                <Edit className=\"w-4 h-4\" />\n              </Button>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10\"\n              onClick={onDelete}\n              disabled={isDeleting}\n              data-testid={`${testId}-delete`}\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6155},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-realtime-updates.tsx":{"content":"import { useEffect } from 'react';\nimport { useWebSocket } from './use-websocket';\nimport { queryClient } from '@/lib/queryClient';\nimport { useToast } from './use-toast';\n\ninterface WebSocketEvent {\n  type: string;\n  data?: any;\n  message?: string;\n}\n\nexport function useRealtimeUpdates() {\n  const { lastMessage, connectionStatus } = useWebSocket();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!lastMessage) return;\n\n    const event = lastMessage as WebSocketEvent;\n\n    switch (event.type) {\n      case 'incident_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        toast({\n          title: \"New Incident\",\n          description: `Incident ${event.data?.title || 'Unknown'} has been created`,\n        });\n        break;\n\n      case 'incident_updated':\n        queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        if (event.data?.id) {\n          queryClient.invalidateQueries({ queryKey: ['/api/incidents', event.data.id] });\n        }\n        toast({\n          title: \"Incident Updated\",\n          description: `Incident ${event.data?.title || 'Unknown'} has been updated`,\n        });\n        break;\n\n      case 'alert_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        toast({\n          title: \"New Alert\",\n          description: `New ${event.data?.severity || 'unknown'} severity alert received`,\n        });\n        break;\n\n      case 'alert_normalized':\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        break;\n\n      case 'alerts_simulated':\n        queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        toast({\n          title: \"Alerts Simulated\",\n          description: `${event.data?.count || 0} ${event.data?.sourceType || 'unknown'} alerts simulated`,\n        });\n        break;\n\n      case 'source_created':\n      case 'source_updated':\n      case 'source_deleted':\n        queryClient.invalidateQueries({ queryKey: ['/api/sources'] });\n        break;\n\n      case 'action_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/actions'] });\n        if (event.data?.incidentId) {\n          queryClient.invalidateQueries({ queryKey: ['/api/incidents', event.data.incidentId, 'actions'] });\n        }\n        break;\n\n      case 'feedback_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/feedback'] });\n        if (event.data?.incidentId) {\n          queryClient.invalidateQueries({ queryKey: ['/api/incidents', event.data.incidentId, 'feedback'] });\n        }\n        break;\n\n      case 'metric_created':\n        queryClient.invalidateQueries({ queryKey: ['/api/metrics'] });\n        break;\n\n      case 'realtime_simulation_started':\n        toast({\n          title: \"Real-time Simulation Started\",\n          description: `${event.data?.sourceType} alerts will be generated for ${event.data?.durationMinutes} minutes`,\n        });\n        break;\n\n      case 'connected':\n        // Handle initial connection\n        console.log('WebSocket connected successfully');\n        break;\n\n      default:\n        console.log('Unknown WebSocket event:', event.type, event);\n    }\n  }, [lastMessage, toast]);\n\n  return {\n    connectionStatus,\n    isConnected: connectionStatus === 'connected',\n    isConnecting: connectionStatus === 'connecting',\n    isDisconnected: connectionStatus === 'disconnected'\n  };\n}","size_bytes":3864},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  message?: string;\n}\n\nexport function useWebSocket(url?: string) {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = url || `${protocol}//${window.location.host}/ws`;\n      const ws = new WebSocket(wsUrl);\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setConnectionStatus('connected');\n        setSocket(ws);\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          setLastMessage(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setConnectionStatus('disconnected');\n        setSocket(null);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          setConnectionStatus('connecting');\n          connect();\n        }, 3000);\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('disconnected');\n      };\n\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      setConnectionStatus('disconnected');\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  };\n\n  return {\n    socket,\n    lastMessage,\n    connectionStatus,\n    sendMessage,\n  };\n}\n","size_bytes":2295},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: api.getCurrentUser,\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const isAuthenticated = !!user && !error;\n  const isUnauthenticated = !user && !isLoading;\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    isUnauthenticated,\n    error\n  };\n}","size_bytes":481},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface DashboardStats {\n  activeIncidents: number;\n  alertsToday: number;\n  avgResponseTime: string;\n  modelAccuracy: number;\n}\n\nexport interface AlertData {\n  id: string;\n  sourceId: string;\n  payload: Record<string, any>;\n  receivedAt: string;\n  type?: string;\n  severity?: 'critical' | 'high' | 'medium' | 'low';\n  title?: string;\n  description?: string;\n}\n\nexport interface DatasetStats {\n  stats: {\n    total: number;\n    crowdstrike: number;\n    sentinelone: number;\n    email: number;\n    firewall: number;\n  };\n  sources: Array<{\n    id: string;\n    name: string;\n    type: string;\n  }>;\n}\n\nexport interface Incident {\n  id: string;\n  title: string;\n  description?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'open' | 'investigating' | 'monitoring' | 'resolved';\n  assignedTo?: string;\n  createdAt: string;\n  closedAt?: string;\n  confidence?: number;\n}\n\nexport const api = {\n  // Dashboard\n  getDashboardStats: (): Promise<DashboardStats> =>\n    fetch('/api/dashboard/stats', { credentials: 'include' }).then(res => res.json()),\n\n  // Dataset Stats\n  getDatasetStats: (): Promise<DatasetStats> =>\n    fetch('/api/alerts/dataset-stats', { credentials: 'include' }).then(res => res.json()),\n\n  // Sources\n  getSources: () =>\n    fetch('/api/sources', { credentials: 'include' }).then(res => res.json()),\n    \n  createSource: (source: any) =>\n    apiRequest('POST', '/api/sources', source),\n    \n  updateSource: (id: string, source: any) =>\n    apiRequest('PUT', `/api/sources/${id}`, source),\n    \n  deleteSource: (id: string) =>\n    apiRequest('DELETE', `/api/sources/${id}`),\n\n  // Incidents\n  getIncidents: (): Promise<Incident[]> =>\n    fetch('/api/incidents', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncident: (id: string) =>\n    fetch(`/api/incidents/${id}`, { credentials: 'include' }).then(res => res.json()),\n    \n  createIncident: (incident: any) =>\n    apiRequest('POST', '/api/incidents', incident),\n    \n  updateIncident: (id: string, incident: any) =>\n    apiRequest('PUT', `/api/incidents/${id}`, incident),\n    \n  bulkUpdateIncidents: (incidentIds: string[], operation: string, data?: any) =>\n    apiRequest('PATCH', '/api/incidents/bulk', { incidentIds, operation, data }),\n\n  // Actions\n  getActions: () =>\n    fetch('/api/actions', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncidentActions: (incidentId: string) =>\n    fetch(`/api/incidents/${incidentId}/actions`, { credentials: 'include' }).then(res => res.json()),\n    \n  createAction: (incidentId: string, action: any) =>\n    apiRequest('POST', `/api/incidents/${incidentId}/actions`, action),\n\n  // Alerts\n  getAlerts: () =>\n    fetch('/api/alerts', { credentials: 'include' }).then(res => res.json()),\n    \n  createAlert: (alert: any) =>\n    apiRequest('POST', '/api/alerts', alert),\n\n  // Alert Normalization & Simulation\n  simulateAlerts: (sourceType: string, count: number = 10) =>\n    apiRequest('POST', `/api/alerts/simulate/${sourceType}`, { count }),\n    \n  simulateRealTimeAlerts: (sourceType: string, durationMinutes: number = 5) =>\n    apiRequest('POST', `/api/alerts/simulate-realtime/${sourceType}`, { durationMinutes }),\n    \n  getSampleAlert: (sourceType: string) =>\n    fetch(`/api/alerts/sample/${sourceType}`, { credentials: 'include' }).then(res => res.json()),\n\n  // Feedback\n  getFeedback: () =>\n    fetch('/api/feedback', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncidentFeedback: (incidentId: string) =>\n    fetch(`/api/incidents/${incidentId}/feedback`, { credentials: 'include' }).then(res => res.json()),\n    \n  createFeedback: (feedback: any) =>\n    apiRequest('POST', '/api/feedback', feedback),\n\n  // Metrics\n  getMetrics: () =>\n    fetch('/api/metrics', { credentials: 'include' }).then(res => res.json()),\n    \n  createMetric: (metric: any) =>\n    apiRequest('POST', '/api/metrics', metric),\n\n  // Threat Intelligence\n  getThreatIntel: () =>\n    fetch('/api/threatintel', { credentials: 'include' }).then(res => res.json()),\n\n  // Export functionality\n  exportIncidents: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n    severity?: string[];\n    status?: string[];\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    if (filters?.severity?.length) params.append('severity', filters.severity.join(','));\n    if (filters?.status?.length) params.append('status', filters.status.join(','));\n    \n    return fetch(`/api/export/incidents?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportAlerts: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n    severity?: string[];\n    sourceId?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    if (filters?.severity?.length) params.append('severity', filters.severity.join(','));\n    if (filters?.sourceId) params.append('source_id', filters.sourceId);\n    \n    return fetch(`/api/export/alerts?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportAnalytics: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    \n    return fetch(`/api/export/analytics?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportActions: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    \n    return fetch(`/api/export/actions?${params.toString()}`, { credentials: 'include' });\n  },\n\n  // Authentication\n  login: (credentials: { email: string; password: string }) =>\n    apiRequest('POST', '/api/auth/login', credentials).then(() => ({ success: true })),\n    \n  register: (userData: { email: string; password: string; firstName?: string; lastName?: string }) =>\n    apiRequest('POST', '/api/auth/register', userData),\n    \n  logout: () =>\n    apiRequest('POST', '/api/auth/logout'),\n    \n  getCurrentUser: () =>\n    fetch('/api/auth/user', { credentials: 'include' }).then(res => {\n      if (!res.ok) return null;\n      return res.json();\n    }),\n};","size_bytes":6751},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/alerts.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Shield, Settings, Play, Database, TrendingUp } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { AlertStream } from \"@/components/alert-stream\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExportDialog } from \"@/components/export-dialog\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Alerts() {\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n  const [liveAlerts, setLiveAlerts] = useState<any[]>([]);\n  const [selectedSource, setSelectedSource] = useState<string>('crowdstrike');\n\n  const { data: alerts, isLoading } = useQuery({\n    queryKey: ['/api/alerts'],\n    queryFn: api.getAlerts,\n  });\n\n  const { data: datasetStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/alerts/dataset-stats'],\n    queryFn: api.getDatasetStats,\n  });\n\n  const createIncidentMutation = useMutation({\n    mutationFn: (incidentData: any) => api.createIncident(incidentData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n      toast({\n        title: \"Success\",\n        description: \"Incident created from alert\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create incident\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const simulateAlertsMutation = useMutation({\n    mutationFn: ({ sourceType, count }: { sourceType: string; count: number }) => \n      api.simulateAlerts(sourceType, count),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n      toast({\n        title: \"Success\",\n        description: `Generated ${data.results?.length || data.length || 10} alerts from ${selectedSource}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to simulate alerts\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const realTimeSimulationMutation = useMutation({\n    mutationFn: ({ sourceType, duration }: { sourceType: string; duration: number }) => \n      api.simulateRealTimeAlerts(sourceType, duration),\n    onSuccess: () => {\n      toast({\n        title: \"Real-time simulation started\",\n        description: `Simulating ${selectedSource} alerts for ${5} minutes`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start real-time simulation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle real-time WebSocket updates\n  useEffect(() => {\n    if (lastMessage?.type === 'alert_created') {\n      const newAlert = {\n        ...lastMessage.data,\n        timestamp: new Date(),\n        severity: Math.random() > 0.7 ? 'critical' : Math.random() > 0.4 ? 'high' : 'medium',\n        title: generateAlertTitle(lastMessage.data),\n      };\n      setLiveAlerts(prev => [newAlert, ...prev.slice(0, 9)]);\n    }\n  }, [lastMessage]);\n\n  const generateAlertTitle = (alertData: any) => {\n    const titles = [\n      'Failed login attempt detected',\n      'Network anomaly detected',\n      'Malware signature found',\n      'Suspicious file activity',\n      'Unauthorized access attempt',\n      'Data exfiltration suspected',\n      'Brute force attack detected',\n    ];\n    return titles[Math.floor(Math.random() * titles.length)];\n  };\n\n  const handleCreateIncident = (alertData: any) => {\n    // Create a dummy feature vector ID for the incident\n    const dummyFeatureVectorId = \"dummy-fv-\" + Date.now();\n    \n    createIncidentMutation.mutate({\n      featureVectorId: dummyFeatureVectorId,\n      decision: 'MANUAL',\n      confidence: Math.random() * 0.4 + 0.6, // Random confidence between 0.6-1.0\n      status: 'open',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <Card className=\"soc-card\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Source type options with logos/descriptions\n  const sourceTypes = [\n    { id: 'crowdstrike', name: 'CrowdStrike', description: 'EDR & Threat Intelligence', color: 'red' },\n    { id: 'sentinelone', name: 'SentinelOne', description: 'Autonomous Security Platform', color: 'purple' },\n    { id: 'email', name: 'Email Security', description: 'Email Threat Protection', color: 'blue' },\n    { id: 'firewall', name: 'Firewall', description: 'Network Security', color: 'orange' },\n  ];\n\n  const handleSimulateAlerts = () => {\n    simulateAlertsMutation.mutate({ sourceType: selectedSource, count: 10 });\n  };\n\n  const handleStartRealTimeSimulation = () => {\n    realTimeSimulationMutation.mutate({ sourceType: selectedSource, duration: 5 });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\" data-testid=\"alerts-title\">Alert Monitoring</h2>\n          {!statsLoading && datasetStats && (\n            <p className=\"text-slate-400 text-sm mt-1\">\n              {datasetStats.stats.total.toLocaleString()} alerts loaded from {datasetStats.sources.length} security tools\n            </p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2 mt-4 sm:mt-0\">\n          <ExportDialog \n            type=\"alerts\" \n            triggerText=\"Export\"\n            className=\"soc-button-secondary\"\n          />\n          <Button \n            variant=\"outline\" \n            className=\"soc-button-secondary\" \n            data-testid=\"configure-alerts\"\n          >\n            <Settings className=\"w-4 h-4 mr-2\" />\n            Configure\n          </Button>\n          <Button \n            className=\"soc-button-primary\" \n            onClick={handleSimulateAlerts}\n            disabled={simulateAlertsMutation.isPending}\n            data-testid=\"simulate-alerts\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            {simulateAlertsMutation.isPending ? 'Generating...' : 'Simulate Alerts'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Dataset Statistics */}\n      <Card className=\"soc-card\" data-testid=\"dataset-stats\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium text-white\">Security Data Sources</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Database className=\"w-5 h-5 text-sky-400\" />\n            <span className=\"text-sm text-sky-400\">Real Data Loaded</span>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {statsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"p-4 bg-slate-750 rounded-lg border border-slate-600\">\n                  <Skeleton className=\"h-16 w-full\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {sourceTypes.map((source) => {\n                const count = datasetStats?.stats[source.id] || 0;\n                const isSelected = selectedSource === source.id;\n                return (\n                  <div \n                    key={source.id}\n                    className={`p-4 bg-slate-750 rounded-lg border transition-all cursor-pointer ${\n                      isSelected ? 'border-sky-500 bg-sky-500/5' : 'border-slate-600 hover:border-slate-500'\n                    }`}\n                    onClick={() => setSelectedSource(source.id)}\n                    data-testid={`source-${source.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className={`w-3 h-3 bg-${source.color}-500 rounded-full`}></div>\n                      <Badge className={`text-xs ${\n                        isSelected ? 'bg-sky-500/20 text-sky-400' : 'bg-slate-600 text-slate-300'\n                      }`}>\n                        {isSelected ? 'Selected' : 'Available'}\n                      </Badge>\n                    </div>\n                    <h3 className=\"text-white font-medium text-sm mb-1\">{source.name}</h3>\n                    <p className=\"text-slate-400 text-xs mb-2\">{source.description}</p>\n                    <div className=\"text-2xl font-bold text-white\">\n                      {count.toLocaleString()}\n                    </div>\n                    <p className=\"text-xs text-slate-400\">alerts loaded</p>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Alert Simulation Controls */}\n      <Card className=\"soc-card\" data-testid=\"simulation-controls\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-white\">Alert Simulation & Testing</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0\">\n            <div>\n              <p className=\"text-white font-medium\">\n                Generate alerts from <span className=\"text-sky-400\">{sourceTypes.find(s => s.id === selectedSource)?.name}</span>\n              </p>\n              <p className=\"text-slate-400 text-sm mt-1\">\n                Test your SOC with real security alerts from production datasets\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                onClick={handleStartRealTimeSimulation}\n                disabled={realTimeSimulationMutation.isPending}\n                data-testid=\"start-realtime\"\n              >\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                {realTimeSimulationMutation.isPending ? 'Starting...' : 'Real-time (5min)'}\n              </Button>\n              <Button \n                onClick={handleSimulateAlerts}\n                disabled={simulateAlertsMutation.isPending}\n                data-testid=\"generate-alerts\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                {simulateAlertsMutation.isPending ? 'Generating...' : 'Generate 10 Alerts'}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Alert Stream */}\n      <Card className=\"soc-card\" data-testid=\"live-alert-stream\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium text-white\">Live Alert Stream</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm text-slate-300\">Real-time</span>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {liveAlerts.length === 0 ? (\n            <div className=\"text-center py-12 text-slate-400\">\n              <Shield className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p>No recent alerts</p>\n              <p className=\"text-sm mt-2\">Live alerts will appear here when received</p>\n            </div>\n          ) : (\n            <AlertStream \n              alerts={liveAlerts} \n              onCreateIncident={handleCreateIncident}\n              isCreatingIncident={createIncidentMutation.isPending}\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Alert Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"soc-card\" data-testid=\"alerts-today-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Alerts in System</p>\n                <p className=\"text-3xl font-bold text-white mt-2\" data-testid=\"alerts-today-count\">\n                  {datasetStats?.stats.total.toLocaleString() || alerts?.length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-500/10 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"w-6 h-6 text-amber-500\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-sky-400\">Real data</span>\n              <span className=\"text-slate-400 ml-2\">from 4 sources</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"critical-alerts-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Live Alerts</p>\n                <p className=\"text-3xl font-bold text-white mt-2\" data-testid=\"critical-alerts-count\">\n                  {liveAlerts.length}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-500/10 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-red-500\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-green-400\">+{liveAlerts.filter(alert => alert.severity === 'critical').length}</span>\n              <span className=\"text-slate-400 ml-2\">critical alerts</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"response-rate-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Selected Source</p>\n                <p className=\"text-lg font-bold text-white mt-2\" data-testid=\"response-rate-value\">\n                  {sourceTypes.find(s => s.id === selectedSource)?.name}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-emerald-500/10 rounded-lg flex items-center justify-center\">\n                <Database className=\"w-6 h-6 text-emerald-500\" />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-emerald-400\">{datasetStats?.stats[selectedSource]?.toLocaleString() || '0'}</span>\n              <span className=\"text-slate-400 ml-2\">alerts available</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15045},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Clock, Target, Zap } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { MetricsChart } from \"@/components/metrics-chart\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExportDialog } from \"@/components/export-dialog\";\n\nexport default function Analytics() {\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['/api/metrics'],\n    queryFn: api.getMetrics,\n  });\n\n  const { data: realTimeAnalytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: ['/api/analytics/realtime'],\n    queryFn: () => fetch('/api/analytics/realtime').then(res => res.json()),\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const { data: incidents } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n  });\n\n  // Calculate performance metrics from real-time data\n  const performanceData = [\n    {\n      name: \"Precision\",\n      value: realTimeAnalytics?.precision ? (realTimeAnalytics.precision * 100).toFixed(1) : \"0.0\",\n      percentage: realTimeAnalytics?.precision ? realTimeAnalytics.precision * 100 : 0,\n      color: \"emerald\",\n      icon: Target,\n    },\n    {\n      name: \"Recall\",\n      value: realTimeAnalytics?.recall ? (realTimeAnalytics.recall * 100).toFixed(1) : \"0.0\",\n      percentage: realTimeAnalytics?.recall ? realTimeAnalytics.recall * 100 : 0,\n      color: \"sky\",\n      icon: TrendingUp,\n    },\n    {\n      name: \"F1 Score\",\n      value: realTimeAnalytics?.f1Score ? (realTimeAnalytics.f1Score * 100).toFixed(1) : \"0.0\",\n      percentage: realTimeAnalytics?.f1Score ? realTimeAnalytics.f1Score * 100 : 0,\n      color: \"amber\",\n      icon: Zap,\n    },\n  ];\n\n  // Use real-time calculated response time\n  const avgResponseTime = realTimeAnalytics?.avgResponseTimeMinutes || 0;\n\n  if (metricsLoading || analyticsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"soc-card\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-48 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <h2 className=\"text-2xl font-bold text-white\" data-testid=\"analytics-title\">Performance Analytics</h2>\n        <ExportDialog \n          type=\"analytics\" \n          triggerText=\"Export Analytics Report\"\n          className=\"soc-button-primary\"\n        />\n      </div>\n\n      {/* Model Performance Metrics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"soc-card\" data-testid=\"model-performance\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-medium text-white\">Model Performance</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {performanceData.map((metric, index) => (\n              <div key={metric.name} className=\"flex items-center justify-between\" data-testid={`metric-${metric.name.toLowerCase()}`}>\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 bg-${metric.color}-500/10 rounded-lg flex items-center justify-center`}>\n                    <metric.icon className={`w-4 h-4 text-${metric.color}-500`} />\n                  </div>\n                  <span className=\"text-slate-400\">{metric.name}</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Progress \n                    value={metric.percentage} \n                    className=\"w-32 bg-slate-700\"\n                    data-testid={`progress-${metric.name.toLowerCase()}`}\n                  />\n                  <span className=\"text-white font-medium w-12 text-right\" data-testid={`value-${metric.name.toLowerCase()}`}>\n                    {metric.value}{metric.name === 'Precision' || metric.name === 'Recall' ? '%' : ''}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"response-times-chart\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-medium text-white\">Response Times</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <MetricsChart \n              data={[\n                { name: 'Avg Response', value: avgResponseTime.toFixed(1) },\n                { name: 'Target', value: '5.0' },\n              ]}\n              height={200}\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Analytics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"soc-card\" data-testid=\"automation-rate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-white\">Automation Rate</h3>\n              <Badge className=\"soc-status-high\">High</Badge>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\" data-testid=\"automation-rate-value\">\n                {realTimeAnalytics?.automationRate ? (realTimeAnalytics.automationRate * 100).toFixed(1) : '0.0'}%\n              </div>\n              <p className=\"text-slate-400 text-sm\">Auto-resolved incidents</p>\n              <Progress value={realTimeAnalytics?.automationRate ? realTimeAnalytics.automationRate * 100 : 0} className=\"mt-4 bg-slate-700\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"threat-detection\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-white\">Threat Detection</h3>\n              <div className=\"w-8 h-8 bg-red-500/10 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-4 h-4 text-red-500\" />\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\" data-testid=\"threat-detection-value\">\n                {realTimeAnalytics?.incidentsCreatedToday || 0}\n              </div>\n              <p className=\"text-slate-400 text-sm\">Incidents created today</p>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-emerald-400\">{realTimeAnalytics?.threatDetectionRate ? (realTimeAnalytics.threatDetectionRate * 100).toFixed(0) : '0'}%</span>\n                <span className=\"text-slate-400 ml-2\">detection rate</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"false-positive-rate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-medium text-white\">False Positive Rate</h3>\n              <Badge className=\"soc-status-low\">Low</Badge>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-white mb-2\" data-testid=\"false-positive-rate-value\">\n                {realTimeAnalytics?.falsePositiveRate ? (realTimeAnalytics.falsePositiveRate * 100).toFixed(1) : '0.0'}%\n              </div>\n              <p className=\"text-slate-400 text-sm\">False positive rate</p>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-emerald-400\">Avg: {realTimeAnalytics?.avgFeedbackRating ? realTimeAnalytics.avgFeedbackRating.toFixed(1) : '0.0'}/5</span>\n                <span className=\"text-slate-400 ml-2\">analyst rating</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Processing Statistics */}\n      <Card className=\"soc-card\" data-testid=\"processing-stats\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-white\">Processing Statistics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"alerts-processed\">\n                {realTimeAnalytics?.alertsProcessedToday?.toLocaleString() || '0'}\n              </div>\n              <p className=\"text-slate-400 text-sm\">Alerts Processed Today</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"auto-actions\">\n                {Math.round((realTimeAnalytics?.automationRate || 0) * (realTimeAnalytics?.alertsProcessedToday || 0))}\n              </div>\n              <p className=\"text-slate-400 text-sm\">Auto Actions</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"manual-reviews\">\n                {realTimeAnalytics?.manualReviewsToday || 0}\n              </div>\n              <p className=\"text-slate-400 text-sm\">Manual Reviews Today</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-white mb-2\" data-testid=\"avg-processing-time\">\n                {realTimeAnalytics?.avgResponseTimeMinutes ? `${realTimeAnalytics.avgResponseTimeMinutes.toFixed(1)}m` : '0.0m'}\n              </div>\n              <p className=\"text-slate-400 text-sm\">Avg Response Time</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10102},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ngsap.registerPlugin(ScrollTrigger);\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { ThreatVisualization } from \"@/components/ui/threat-visualization\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ntype AlertSeverity = \"Critical\" | \"High\" | \"Medium\" | \"Low\";\ntype AlertStatus = \"Active\" | \"Investigating\" | \"Resolved\";\n\ninterface Alert {\n  id: string;\n  severity: AlertSeverity;\n  status: AlertStatus;\n  title: string;\n  assignedAnalyst: string;\n  time: string;\n  source: string;\n  confidence: number;\n  aiRecommendation: string;\n  rootCause?: string;\n}\n\ninterface ModelResponse {\n  id: string;\n  timestamp: string;\n  prediction: string;\n  confidence: number;\n  recommendation: string;\n  status: \"Processing\" | \"Complete\" | \"Failed\";\n  explainability: string;\n}\n\ninterface AIInsight {\n  type: \"trend\" | \"anomaly\" | \"prediction\" | \"correlation\";\n  title: string;\n  description: string;\n  confidence: number;\n  impact: \"High\" | \"Medium\" | \"Low\";\n}\n\ninterface WorkflowAlert {\n  id: string;\n  vendorName: string;\n  timestamp: string;\n  severity: AlertSeverity;\n  status: \"incoming\" | \"processing\" | \"predicted\" | \"completed\";\n  stage: \"vendor\" | \"ai_model\" | \"prediction\" | \"outcome\";\n  aiModel?: string;\n  confidence?: number;\n  processingTime?: number;\n  outcome?: \"TP\" | \"FP\" | \"Escalate\";\n  explanation?: string;\n  escalationReason?: string;\n  assignedAnalyst?: string;\n}\n\ninterface EscalationItem {\n  alertId: string;\n  reason: string;\n  assignedAnalyst: string;\n  timestamp: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n}\n\ninterface AutomationMetrics {\n  tpHandled: number;\n  fpDismissed: number;\n  totalProcessed: number;\n  avgProcessingTime: number;\n  confidence: {\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isUnauthenticated, isLoading: authLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [selectedAlert, setSelectedAlert] = useState<Alert | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [nlQuery, setNlQuery] = useState(\"\");\n  const [showWhatIf, setShowWhatIf] = useState(false);\n  const [selectedWorkflowAlert, setSelectedWorkflowAlert] = useState<WorkflowAlert | null>(null);\n  const [showEscalationModal, setShowEscalationModal] = useState(false);\n  const [escalationDecision, setEscalationDecision] = useState<\"approve\" | \"reject\" | \"assign\" | null>(null);\n  const [workflowAlerts, setWorkflowAlerts] = useState<WorkflowAlert[]>([]);\n  const [showLogoutOverlay, setShowLogoutOverlay] = useState(false);\n  \n  // GSAP refs\n  const headerRef = useRef<HTMLElement>(null);\n  const sidebarRef = useRef<HTMLElement>(null);\n  const mainRef = useRef<HTMLElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (isUnauthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isUnauthenticated, setLocation]);\n\n  // Real API calls to backend\n  const { data: incidents, isLoading: incidentsLoading } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: api.getDashboardStats,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: alertDatasetStats } = useQuery({\n    queryKey: ['/api/alerts/dataset-stats'],\n    queryFn: api.getAlertDatasetStats,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: sources } = useQuery({\n    queryKey: ['/api/sources'],\n    queryFn: api.getSources,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: metrics } = useQuery({\n    queryKey: ['/api/metrics'],\n    queryFn: api.getMetrics,\n    enabled: isAuthenticated,\n  });\n\n  // Convert real data to mock format for compatibility with original UI\n  const mockAlerts: Alert[] = incidents?.slice(0, 10).map((incident: any) => ({\n    id: incident.id,\n    severity: (incident.severity?.charAt(0).toUpperCase() + incident.severity?.slice(1)) as AlertSeverity || \"Medium\",\n    status: (incident.status === 'open' ? 'Active' : incident.status === 'monitoring' ? 'Investigating' : 'Resolved') as AlertStatus,\n    title: incident.title || `Security Incident ${incident.id.slice(-6)}`,\n    assignedAnalyst: incident.assignedTo || \"AI Auto-Triage\",\n    time: new Date(incident.createdAt).toLocaleTimeString(),\n    source: \"Security Platform\",\n    confidence: 85 + Math.floor(Math.random() * 15),\n    aiRecommendation: \"Investigate for potential threats and correlate with other security events\",\n    rootCause: incident.description || \"Automated detection of suspicious activity\"\n  })) || [\n    { \n      id: \"ALT-2024-001\", \n      severity: \"Critical\", \n      status: \"Active\", \n      title: \"Suspicious Network Traffic Detected\", \n      assignedAnalyst: \"Sarah Chen\", \n      time: \"2 min ago\", \n      source: \"NGFW\", \n      confidence: 95,\n      aiRecommendation: \"Immediate isolation of affected endpoints and traffic analysis\",\n      rootCause: \"Potential APT group activity based on TTP correlation\"\n    },\n    { \n      id: \"ALT-2024-002\", \n      severity: \"High\", \n      status: \"Investigating\", \n      title: \"Potential Data Exfiltration\", \n      assignedAnalyst: \"Marcus Johnson\", \n      time: \"15 min ago\", \n      source: \"AWS CloudTrail\", \n      confidence: 87,\n      aiRecommendation: \"Monitor data flows and check for unauthorized access patterns\",\n      rootCause: \"Compromised service account credentials detected\"\n    },\n    { \n      id: \"ALT-2024-003\", \n      severity: \"Medium\", \n      status: \"Active\", \n      title: \"Unauthorized Access Attempt\", \n      assignedAnalyst: \"AI Auto-Triage\", \n      time: \"32 min ago\", \n      source: \"Okta\", \n      confidence: 78,\n      aiRecommendation: \"Enable additional MFA verification and user behavior analysis\",\n      rootCause: \"Credential stuffing attack from known botnet infrastructure\"\n    }\n  ];\n\n  const mockModelResponses: ModelResponse[] = [\n    { \n      id: \"MR-001\", \n      timestamp: \"09:45:23\", \n      prediction: \"DDoS Attack Pattern\", \n      confidence: 94, \n      recommendation: \"Activate DDoS protection and rate limiting\", \n      status: \"Complete\",\n      explainability: \"Model detected anomalous traffic patterns matching known DDoS signatures. Key indicators: 300% traffic spike, unusual geographic distribution, repetitive request patterns.\"\n    },\n    { \n      id: \"MR-002\", \n      timestamp: \"09:43:12\", \n      prediction: \"Phishing Campaign\", \n      confidence: 89, \n      recommendation: \"Block sender domains and notify users\", \n      status: \"Complete\",\n      explainability: \"Email content analysis revealed suspicious URL patterns and social engineering tactics commonly used in phishing campaigns.\"\n    },\n  ];\n\n  const mockAIInsights: AIInsight[] = [\n    {\n      type: \"trend\",\n      title: \"Alert Volume Increasing\",\n      description: `Critical alerts have increased based on recent incident data from ${incidents?.length || 0} active incidents.`,\n      confidence: 87,\n      impact: \"High\"\n    },\n    {\n      type: \"prediction\",\n      title: \"Forecasted Peak Activity\",\n      description: \"AI predicts increased security incidents based on current threat patterns and data source activity.\",\n      confidence: 82,\n      impact: \"Medium\"\n    },\n    {\n      type: \"correlation\",\n      title: \"Source Correlation Detected\",\n      description: `Analysis of ${sources?.length || 0} active data sources shows coordinated patterns requiring attention.`,\n      confidence: 91,\n      impact: \"High\"\n    },\n    {\n      type: \"anomaly\",\n      title: \"Unusual User Behavior\",\n      description: \"Detected anomalous login patterns for multiple users outside normal business hours with geographic inconsistencies.\",\n      confidence: 76,\n      impact: \"Medium\"\n    }\n  ];\n\n  const mockAutomationMetrics: AutomationMetrics = {\n    tpHandled: alertDatasetStats?.totalAlerts ? Math.floor(alertDatasetStats.totalAlerts * 0.4) : 847,\n    fpDismissed: alertDatasetStats?.totalAlerts ? Math.floor(alertDatasetStats.totalAlerts * 0.6) : 1203,\n    totalProcessed: alertDatasetStats?.totalAlerts || 2156,\n    avgProcessingTime: 2.3,\n    confidence: {\n      high: 67,\n      medium: 28,\n      low: 5\n    }\n  };\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Dashboard entrance animations\n      gsap.fromTo(headerRef.current,\n        { y: -50, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.6, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(sidebarRef.current,\n        { x: -250, opacity: 0 },\n        { x: 0, opacity: 1, duration: 0.6, delay: 0.2, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(mainRef.current,\n        { opacity: 0, y: 20 },\n        { opacity: 1, y: 0, duration: 0.6, delay: 0.4, ease: \"power2.out\" }\n      );\n\n      // Stats cards animation\n      if (statsRef.current) {\n        gsap.fromTo(statsRef.current.children,\n          { scale: 0.9, opacity: 0 },\n          { scale: 1, opacity: 1, duration: 0.5, stagger: 0.1, delay: 0.6, ease: \"back.out(1.7)\" }\n        );\n      }\n    });\n\n    return () => ctx.revert();\n  }, [activeTab]);\n\n  // Simulate real-time workflow updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWorkflowAlerts(current => \n        current.map(alert => {\n          if (alert.status === \"incoming\" && Math.random() > 0.7) {\n            return { ...alert, status: \"processing\", stage: \"ai_model\", aiModel: \"ThreatDetector v2.1\" };\n          }\n          if (alert.status === \"processing\" && Math.random() > 0.8) {\n            const outcomes: Array<\"TP\" | \"FP\" | \"Escalate\"> = [\"TP\", \"FP\", \"Escalate\"];\n            const outcome = outcomes[Math.floor(Math.random() * outcomes.length)];\n            return { \n              ...alert, \n              status: \"completed\", \n              stage: \"outcome\", \n              outcome,\n              confidence: Math.floor(Math.random() * 40) + 60,\n              processingTime: Math.random() * 3 + 1\n            };\n          }\n          return alert;\n        })\n      );\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle logout with redirect\n  useEffect(() => {\n    if (showLogoutOverlay) {\n      const timer = setTimeout(() => {\n        setLocation(\"/\");\n      }, 2500);\n\n      return () => clearTimeout(timer);\n    }\n  }, [showLogoutOverlay, setLocation]);\n\n  const getSeverityColor = (severity: AlertSeverity) => {\n    switch (severity) {\n      case \"Critical\": return \"text-red-400 bg-red-400/10 border-red-400/20\";\n      case \"High\": return \"text-orange-400 bg-orange-400/10 border-orange-400/20\";\n      case \"Medium\": return \"text-yellow-400 bg-yellow-400/10 border-yellow-400/20\";\n      case \"Low\": return \"text-green-400 bg-green-400/10 border-green-400/20\";\n    }\n  };\n\n  const getStatusColor = (status: AlertStatus) => {\n    switch (status) {\n      case \"Active\": return \"text-red-400 bg-red-400/10\";\n      case \"Investigating\": return \"text-yellow-400 bg-yellow-400/10\";\n      case \"Resolved\": return \"text-green-400 bg-green-400/10\";\n    }\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"trend\": return <TrendingUp className=\"w-4 h-4\" />;\n      case \"prediction\": return <Brain className=\"w-4 h-4\" />;\n      case \"correlation\": return <Target className=\"w-4 h-4\" />;\n      case \"anomaly\": return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredAlerts = mockAlerts.filter(alert => \n    alert.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    alert.id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (authLoading || incidentsLoading || statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white p-6\">\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full mx-auto mb-4 animate-pulse\"></div>\n            <div className=\"text-xl font-semibold text-white mb-2\">Loading Alpha Command Center</div>\n            <div className=\"text-gray-400\">Initializing AI models and security data...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Enhanced Top Navigation Bar */}\n      <motion.header \n        ref={headerRef}\n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n            <span className=\"text-lg text-gray-300\">Command Center</span>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Actions */}\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n\n            {/* Dark/Light Mode Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\"\n            >\n              {isDarkMode ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n            </Button>\n\n            {/* System Status */}\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center\">{incidents?.length || 0}</span>\n            </Button>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Security Analyst</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex\">\n        {/* Enhanced Sidebar Navigation */}\n        <motion.aside \n          ref={sidebarRef}\n          initial={{ x: -250, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-64 bg-[hsl(0,0%,8%)] border-r border-[hsl(330,100%,50%)]/20 min-h-screen\"\n        >\n          <div className=\"p-4 space-y-2\">\n            <nav className=\"space-y-2\">\n              <button\n                onClick={() => setActiveTab(\"dashboard\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"dashboard\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Dashboard</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"alerts\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"alerts\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alerts</span>\n                <span className=\"ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                  {mockAlerts.filter(a => a.status === \"Active\").length}\n                </span>\n              </button>\n\n              <button\n                onClick={() => setLocation(\"/investigation\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"investigations\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Eye className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Investigations</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"models\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"models\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Brain className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Model Responses</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"analytics\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"analytics\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <PieChart className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Analytics</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"workflow\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"workflow\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Workflow className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alert Pipeline</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"settings\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"settings\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Settings</span>\n              </button>\n\n              {/* Logout Button */}\n              <button\n                onClick={() => setShowLogoutOverlay(true)}\n                className=\"w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all text-red-400 hover:text-red-300 hover:bg-red-400/10\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Logout</span>\n              </button>\n            </nav>\n\n            {/* Data Quality Indicator */}\n            <div className=\"mt-8 p-3 bg-[hsl(0,0%,6%)] rounded-lg border border-[hsl(330,100%,50%)]/10\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-gray-400\">Data Quality</span>\n                <span className=\"text-xs text-[hsl(330,100%,50%)]\">96.8%</span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[96.8%]\"></div>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full mt-2 text-xs text-gray-400 hover:text-[hsl(330,100%,50%)]\">\n                <RefreshCw className=\"w-3 h-3 mr-1\" />\n                Auto-clean data\n              </Button>\n            </div>\n          </div>\n        </motion.aside>\n\n        {/* Main Content Area */}\n        <main ref={mainRef} className=\"flex-1 p-6 bg-gradient-to-br from-[hsl(215,28%,5%)] to-[hsl(215,28%,7%)]\">\n          {activeTab === \"dashboard\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">AI-Powered Analytics Dashboard</h1>\n\n                {/* Natural Language Query */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <MessageSquare className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-[hsl(330,100%,50%)]\" />\n                    <Input \n                      placeholder=\"Ask me anything about your data...\"\n                      value={nlQuery}\n                      onChange={(e) => setNlQuery(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20 w-80\"\n                    />\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setLocation(\"/ai-assistant\")}\n                    className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n                  >\n                    <MessageSquare className=\"w-4 h-4 mr-2\" />\n                    Ask AI\n                  </Button>\n                </div>\n              </div>\n\n              <ThreatVisualization/>\n\n              {/* Real-time Statistics Cards */}\n              <div ref={statsRef} className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6 hover:border-[hsl(330,100%,50%)]/40 transition-all cursor-pointer group\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-400 mb-1\">Active Incidents</p>\n                      <p className=\"text-3xl font-bold text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{incidents?.length || 0}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">Real-time monitoring</p>\n                    </div>\n                    <div className=\"p-3 bg-red-400/10 rounded-lg group-hover:bg-red-400/20 transition-colors\">\n                      <AlertTriangle className=\"w-6 h-6 text-red-400 group-hover:scale-110 transition-transform\" />\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(267,100%,67%)]/20 rounded-xl p-6 hover:border-[hsl(267,100%,67%)]/40 transition-all cursor-pointer group\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-400 mb-1\">Alerts Processed</p>\n                      <p className=\"text-3xl font-bold text-white group-hover:text-[hsl(267,100%,67%)] transition-colors\">{alertDatasetStats?.totalAlerts?.toLocaleString() || '0'}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">Total dataset</p>\n                    </div>\n                    <div className=\"p-3 bg-[hsl(267,100%,67%)]/10 rounded-lg group-hover:bg-[hsl(267,100%,67%)]/20 transition-colors\">\n                      <Brain className=\"w-6 h-6 text-[hsl(267,100%,67%)] group-hover:scale-110 transition-transform\" />\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-green-400/20 rounded-xl p-6 hover:border-green-400/40 transition-all cursor-pointer group\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-400 mb-1\">Data Sources</p>\n                      <p className=\"text-3xl font-bold text-white group-hover:text-green-400 transition-colors\">{sources?.length || 0}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">Connected systems</p>\n                    </div>\n                    <div className=\"p-3 bg-green-400/10 rounded-lg group-hover:bg-green-400/20 transition-colors\">\n                      <Shield className=\"w-6 h-6 text-green-400 group-hover:scale-110 transition-transform\" />\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-blue-400/20 rounded-xl p-6 hover:border-blue-400/40 transition-all cursor-pointer group\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-400 mb-1\">Response Time</p>\n                      <p className=\"text-3xl font-bold text-white group-hover:text-blue-400 transition-colors\">{dashboardStats?.avgResponseTime || '0.3'}s</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">Average detection</p>\n                    </div>\n                    <div className=\"p-3 bg-blue-400/10 rounded-lg group-hover:bg-blue-400/20 transition-colors\">\n                      <Zap className=\"w-6 h-6 text-blue-400 group-hover:scale-110 transition-transform\" />\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* SOC Operations Center */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold flex items-center glow-text\">\n                    <Shield className=\"w-6 h-6 text-[hsl(330,100%,50%)] mr-2\" />\n                    SOC Operations Center\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">Live Monitoring</span>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Real-time Threat Landscape */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Target className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                      Global Threat Intelligence\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-red-400\">{incidents?.filter((inc: any) => inc.severity === 'critical').length || 12}</div>\n                          <div className=\"text-xs text-gray-400\">Critical Threats</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-orange-400\">{sources?.length ? sources.length * 45 : 180}</div>\n                          <div className=\"text-xs text-gray-400\">IOCs Tracked</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">{dashboardStats?.detectionRate || '94.2'}%</div>\n                          <div className=\"text-xs text-gray-400\">Detection Rate</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">APT Groups</span>\n                          <span className=\"text-red-400 font-medium\">23 Active</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Data Sources</span>\n                          <span className=\"text-green-400 font-medium\">{sources?.length || 0} Connected</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Active Incidents</span>\n                          <span className=\"text-yellow-400 font-medium\">{incidents?.length || 0} Monitored</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Incident Response Metrics */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Activity className=\"w-5 h-5 text-green-400 mr-2\" />\n                      Incident Response KPIs\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Detection (MTTD)</span>\n                        <span className=\"text-green-400 font-bold\">2.3 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-green-400 h-2 rounded-full w-[92%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Response (MTTR)</span>\n                        <span className=\"text-[hsl(330,100%,50%)] font-bold\">{dashboardStats?.avgResponseTime || '0.3'}s</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[85%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Automation Coverage</span>\n                        <span className=\"text-[hsl(267,100%,67%)] font-bold\">{Math.floor((alertDatasetStats?.totalAlerts || 2000) / 100)}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(267,100%,67%)] h-2 rounded-full w-[78%]\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* AI Insights Panel */}\n              <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 bg-[hsl(330,100%,50%)]/20 rounded-lg\">\n                      <Brain className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                    </div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-white\">AI Security Insights</h2>\n                      <p className=\"text-sm text-gray-400\">Real-time analysis from your security data</p>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh Analysis\n                  </Button>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {mockAIInsights.map((insight, index) => (\n                    <motion.div\n                      key={index}\n                      className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4 hover:bg-[hsl(0,0%,8%)]/80 hover:border-[hsl(330,100%,50%)]/20 transition-all cursor-pointer\"\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        <div className={`p-2 rounded-lg ${\n                          insight.impact === 'High' ? 'bg-red-400/20 text-red-400' :\n                          insight.impact === 'Medium' ? 'bg-yellow-400/20 text-yellow-400' :\n                          'bg-green-400/20 text-green-400'\n                        }`}>\n                          {getInsightIcon(insight.type)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-white mb-1\">{insight.title}</h4>\n                          <p className=\"text-sm text-gray-400 mb-3\">{insight.description}</p>\n                          <div className=\"flex items-center justify-between\">\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              insight.impact === 'High' ? 'bg-red-400/20 text-red-400' :\n                              insight.impact === 'Medium' ? 'bg-yellow-400/20 text-yellow-400' :\n                              'bg-green-400/20 text-green-400'\n                            }`}>\n                              {insight.impact} Impact\n                            </span>\n                            <span className=\"text-xs text-gray-500\">{insight.confidence}% confidence</span>\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n\n              {/* Recent Incidents with Real Data */}\n              <motion.div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 bg-red-400/20 rounded-lg\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-400\" />\n                    </div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-white\">Recent Security Incidents</h2>\n                      <p className=\"text-sm text-gray-400\">Latest threats and investigations</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => window.location.reload()}>\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation('/investigation')} className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                      View All\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {mockAlerts.slice(0, 8).map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4 hover:bg-[hsl(0,0%,8%)]/80 hover:border-[hsl(330,100%,50%)]/20 transition-all cursor-pointer\"\n                      whileHover={{ scale: 1.01 }}\n                      onClick={() => setSelectedAlert(alert)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className={`w-3 h-3 rounded-full ${\n                              alert.status === 'Active' ? 'bg-red-400 animate-pulse' :\n                              alert.status === 'Investigating' ? 'bg-yellow-400' :\n                              'bg-green-400'\n                            }`}></div>\n                            <span className=\"text-sm font-medium text-white\">{alert.title}</span>\n                          </div>\n                          <div className={`px-2 py-1 rounded-full text-xs font-medium border ${\n                            alert.severity === 'Critical' ? 'bg-red-400/10 text-red-400 border-red-400/20' :\n                            alert.severity === 'High' ? 'bg-orange-400/10 text-orange-400 border-orange-400/20' :\n                            alert.severity === 'Medium' ? 'bg-yellow-400/10 text-yellow-400 border-yellow-400/20' :\n                            'bg-green-400/10 text-green-400 border-green-400/20'\n                          }`}>\n                            {alert.severity}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                          <span>{alert.assignedAnalyst}</span>\n                          <span>{alert.time}</span>\n                          <div className=\"flex items-center space-x-1\">\n                            <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full\"></div>\n                            <span>{alert.confidence}%</span>\n                          </div>\n                        </div>\n                      </div>\n                      {alert.rootCause && (\n                        <div className=\"mt-2 text-sm text-gray-400 pl-5\">\n                          {alert.rootCause}\n                        </div>\n                      )}\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n\n            </motion.div>\n          )}\n\n          {/* Alert Management Tab */}\n          {activeTab === \"alerts\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              {/* Alert Search and Filters */}\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">Alert Management</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <Input \n                      placeholder=\"Search alerts...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20 w-80\"\n                    />\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Filter\n                  </Button>\n                </div>\n              </div>\n\n              {/* Alerts Table */}\n              <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-xl overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-[hsl(0,0%,6%)]/80 border-b border-[hsl(330,100%,50%)]/20\">\n                      <tr>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Alert</th>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Severity</th>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Status</th>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Analyst</th>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Time</th>\n                        <th className=\"px-6 py-4 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Confidence</th>\n                        <th className=\"px-6 py-4 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-[hsl(330,100%,50%)]/10\">\n                      {filteredAlerts.map((alert, index) => (\n                        <motion.tr \n                          key={alert.id}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3, delay: index * 0.05 }}\n                          className=\"hover:bg-[hsl(0,0%,6%)]/40 transition-colors cursor-pointer\"\n                          onClick={() => setSelectedAlert(alert)}\n                        >\n                          <td className=\"px-6 py-4\">\n                            <div>\n                              <div className=\"text-sm font-medium text-white\">{alert.title}</div>\n                              <div className=\"text-sm text-gray-400\">ID: {alert.id}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                              getSeverityColor(alert.severity)\n                            }`}>\n                              {alert.severity}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              getStatusColor(alert.status)\n                            }`}>\n                              {alert.status}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-gray-300\">{alert.assignedAnalyst}</td>\n                          <td className=\"px-6 py-4 text-sm text-gray-300\">{alert.time}</td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                                <div \n                                  className=\"bg-[hsl(267,100%,67%)] h-2 rounded-full\" \n                                  style={{ width: `${alert.confidence}%` }}\n                                ></div>\n                              </div>\n                              <span className=\"text-sm text-gray-300\">{alert.confidence}%</span>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 text-right\">\n                            <div className=\"flex items-center space-x-2 justify-end\">\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)]\">\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-green-400\">\n                                <CheckCircle className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </motion.tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Analytics Tab */}\n          {activeTab === \"analytics\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <h1 className=\"text-3xl font-bold glow-text\">Security Analytics</h1>\n              \n              {/* Automation Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-green-400/20 rounded-xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-white\">True Positives</h3>\n                    <CheckCircle className=\"w-6 h-6 text-green-400\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-green-400 mb-2\">{mockAutomationMetrics.tpHandled.toLocaleString()}</div>\n                  <div className=\"text-sm text-gray-400\">Handled automatically</div>\n                </div>\n                \n                <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-red-400/20 rounded-xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-white\">False Positives</h3>\n                    <X className=\"w-6 h-6 text-red-400\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-red-400 mb-2\">{mockAutomationMetrics.fpDismissed.toLocaleString()}</div>\n                  <div className=\"text-sm text-gray-400\">Dismissed by AI</div>\n                </div>\n                \n                <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(267,100%,67%)]/20 rounded-xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-white\">Total Processed</h3>\n                    <Activity className=\"w-6 h-6 text-[hsl(267,100%,67%)]\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-[hsl(267,100%,67%)] mb-2\">{mockAutomationMetrics.totalProcessed.toLocaleString()}</div>\n                  <div className=\"text-sm text-gray-400\">All time</div>\n                </div>\n                \n                <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-blue-400/20 rounded-xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-white\">Avg Processing</h3>\n                    <Clock className=\"w-6 h-6 text-blue-400\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-blue-400 mb-2\">{mockAutomationMetrics.avgProcessingTime}s</div>\n                  <div className=\"text-sm text-gray-400\">Per alert</div>\n                </div>\n              </div>\n              \n              {/* Confidence Distribution */}\n              <div className=\"bg-gradient-to-br from-[hsl(0,0%,8%)]/80 to-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                <h3 className=\"text-xl font-semibold text-white mb-6\">AI Confidence Distribution</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300\">High Confidence (80-100%)</span>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-64 bg-gray-700 rounded-full h-3\">\n                        <div className=\"bg-green-400 h-3 rounded-full\" style={{ width: `${mockAutomationMetrics.confidence.high}%` }}></div>\n                      </div>\n                      <span className=\"text-white font-medium\">{mockAutomationMetrics.confidence.high}%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300\">Medium Confidence (60-79%)</span>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-64 bg-gray-700 rounded-full h-3\">\n                        <div className=\"bg-yellow-400 h-3 rounded-full\" style={{ width: `${mockAutomationMetrics.confidence.medium}%` }}></div>\n                      </div>\n                      <span className=\"text-white font-medium\">{mockAutomationMetrics.confidence.medium}%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-300\">Low Confidence (0-59%)</span>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-64 bg-gray-700 rounded-full h-3\">\n                        <div className=\"bg-red-400 h-3 rounded-full\" style={{ width: `${mockAutomationMetrics.confidence.low}%` }}></div>\n                      </div>\n                      <span className=\"text-white font-medium\">{mockAutomationMetrics.confidence.low}%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n        </main>\n      </div>\n\n      {/* Alert Detail Modal */}\n      <AnimatePresence>\n        {selectedAlert && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            onClick={() => setSelectedAlert(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-[hsl(0,0%,8%)]/95 border border-[hsl(330,100%,50%)]/30 rounded-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-bold text-white\">Alert Details</h3>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedAlert(null)}>\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Alert ID:</span>\n                    <div className=\"text-white font-mono\">{selectedAlert.id}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Source:</span>\n                    <div className=\"text-white\">{selectedAlert.source}</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <span className=\"text-sm text-gray-400\">Title:</span>\n                  <div className=\"text-white font-medium\">{selectedAlert.title}</div>\n                </div>\n                \n                <div>\n                  <span className=\"text-sm text-gray-400\">AI Recommendation:</span>\n                  <div className=\"text-gray-300\">{selectedAlert.aiRecommendation}</div>\n                </div>\n                \n                {selectedAlert.rootCause && (\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Root Cause Analysis:</span>\n                    <div className=\"text-gray-300\">{selectedAlert.rootCause}</div>\n                  </div>\n                )}\n                \n                <div className=\"flex items-center justify-between pt-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(selectedAlert.severity)}`}>\n                      {selectedAlert.severity}\n                    </span>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedAlert.status)}`}>\n                      {selectedAlert.status}\n                    </span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-green-500/20 text-green-400\">\n                      Mark Resolved\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                      Escalate\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Logout Overlay */}\n      <AnimatePresence>\n        {showLogoutOverlay && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center\"\n          >\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              className=\"bg-[hsl(0,0%,8%)]/95 border border-[hsl(330,100%,50%)]/30 rounded-xl p-8 text-center\"\n            >\n              <div className=\"w-16 h-16 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <LogOut className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Logging Out</h3>\n              <p className=\"text-gray-400 mb-4\">Thank you for using Alpha SOC</p>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-full animate-pulse\"></div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":57467},"client/src/pages/feedback.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MessageSquare, Star, Plus, User } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertFeedbackSchema } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nconst feedbackFormSchema = insertFeedbackSchema.extend({\n  rating: z.number().min(1).max(5),\n  comment: z.string().min(10, \"Comment must be at least 10 characters\"),\n});\n\nexport default function Feedback() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const { data: feedback, isLoading: feedbackLoading } = useQuery({\n    queryKey: ['/api/feedback'],\n    queryFn: api.getFeedback,\n  });\n\n  const { data: incidents } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n  });\n\n  const createFeedbackMutation = useMutation({\n    mutationFn: api.createFeedback,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/feedback'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Feedback submitted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit feedback\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof feedbackFormSchema>>({\n    resolver: zodResolver(feedbackFormSchema),\n    defaultValues: {\n      incidentId: \"\",\n      userId: \"demo-user-id\", // In real app, this would come from auth\n      feedback: {},\n      rating: 5,\n      comment: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof feedbackFormSchema>) => {\n    const { rating, comment, ...feedbackData } = values;\n    createFeedbackMutation.mutate({\n      ...feedbackData,\n      feedback: {\n        rating,\n        comment,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${i < rating ? 'text-amber-400 fill-current' : 'text-slate-600'}`}\n      />\n    ));\n  };\n\n  if (feedbackLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <Card className=\"soc-card\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\" data-testid=\"feedback-title\">Feedback & Reviews</h2>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"mt-4 sm:mt-0 soc-button-primary\" data-testid=\"submit-feedback\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Submit Feedback\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-slate-800 border-slate-700\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Submit Feedback</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"feedback-form\">\n                <FormField\n                  control={form.control}\n                  name=\"incidentId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Related Incident</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-slate-700 border-slate-600 text-white\" data-testid=\"incident-select\">\n                            <SelectValue placeholder=\"Select an incident\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {incidents?.slice(0, 10).map((incident: any) => (\n                            <SelectItem key={incident.id} value={incident.id}>\n                              #{incident.id.slice(-6)} - {new Date(incident.createdAt).toLocaleDateString()}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"rating\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Rating</FormLabel>\n                      <FormControl>\n                        <div className=\"flex space-x-1\" data-testid=\"rating-stars\">\n                          {Array.from({ length: 5 }, (_, i) => (\n                            <button\n                              key={i}\n                              type=\"button\"\n                              onClick={() => field.onChange(i + 1)}\n                              className=\"p-1\"\n                              data-testid={`star-${i + 1}`}\n                            >\n                              <Star\n                                className={`w-6 h-6 ${\n                                  i < field.value ? 'text-amber-400 fill-current' : 'text-slate-600'\n                                }`}\n                              />\n                            </button>\n                          ))}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"comment\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Comment</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Share your thoughts on the incident handling, model accuracy, or system performance...\"\n                          className=\"bg-slate-700 border-slate-600 text-white min-h-[100px]\"\n                          data-testid=\"feedback-comment\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"ghost\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"cancel-feedback\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createFeedbackMutation.isPending}\n                    className=\"soc-button-primary\"\n                    data-testid=\"submit-feedback-button\"\n                  >\n                    {createFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Feedback Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"soc-card\" data-testid=\"total-feedback-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Total Feedback</p>\n                <p className=\"text-3xl font-bold text-white mt-2\" data-testid=\"total-feedback-count\">\n                  {feedback?.length || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-sky-500/10 rounded-lg flex items-center justify-center\">\n                <MessageSquare className=\"w-6 h-6 text-sky-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"avg-rating-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Average Rating</p>\n                <div className=\"flex items-center mt-2\">\n                  <p className=\"text-3xl font-bold text-white mr-2\" data-testid=\"avg-rating-value\">4.2</p>\n                  <div className=\"flex\">\n                    {renderStars(4)}\n                  </div>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-500/10 rounded-lg flex items-center justify-center\">\n                <Star className=\"w-6 h-6 text-amber-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"positive-feedback-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Positive Feedback</p>\n                <p className=\"text-3xl font-bold text-white mt-2\" data-testid=\"positive-feedback-percentage\">\n                  86%\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-emerald-500/10 rounded-lg flex items-center justify-center\">\n                <MessageSquare className=\"w-6 h-6 text-emerald-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"soc-card\" data-testid=\"response-rate-stat\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-400 text-sm font-medium\">Response Rate</p>\n                <p className=\"text-3xl font-bold text-white mt-2\" data-testid=\"feedback-response-rate\">\n                  73%\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-sky-500/10 rounded-lg flex items-center justify-center\">\n                <User className=\"w-6 h-6 text-sky-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Feedback List */}\n      <Card className=\"soc-card\" data-testid=\"feedback-list\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-white\">\n            Recent Feedback ({feedback?.length || 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {!feedback?.length ? (\n            <div className=\"text-center py-12 text-slate-400\">\n              <MessageSquare className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p>No feedback submitted yet</p>\n              <p className=\"text-sm mt-2\">Be the first to share your thoughts!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {feedback.map((item: any, index: number) => (\n                <div key={item.id} className=\"flex space-x-4 p-4 bg-slate-750 rounded-lg\" data-testid={`feedback-${index}`}>\n                  <div className=\"w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <User className=\"w-5 h-5 text-slate-300\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <span className=\"font-medium text-white\" data-testid={`feedback-${index}-user`}>\n                        Security Analyst\n                      </span>\n                      <span className=\"text-slate-400 text-sm\" data-testid={`feedback-${index}-time`}>\n                        • {new Date(item.submittedAt).toLocaleString()}\n                      </span>\n                    </div>\n                    {item.feedback?.comment && (\n                      <p className=\"text-slate-300 text-sm mb-3\" data-testid={`feedback-${index}-comment`}>\n                        {item.feedback.comment}\n                      </p>\n                    )}\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"text-xs text-slate-400\">Incident:</span>\n                        <Badge variant=\"outline\" className=\"text-sky-400 border-sky-400\" data-testid={`feedback-${index}-incident`}>\n                          #{item.incidentId?.slice(-6) || 'N/A'}\n                        </Badge>\n                      </div>\n                      {item.feedback?.rating && (\n                        <div className=\"flex items-center space-x-1\" data-testid={`feedback-${index}-rating`}>\n                          <span className=\"text-xs text-slate-400\">Rating:</span>\n                          <div className=\"flex\">\n                            {renderStars(item.feedback.rating)}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14367},"client/src/pages/incidents.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertTriangle, Eye, UserPlus, TrendingUp, Search, Download, X, CheckCircle2 } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExportDialog } from \"@/components/export-dialog\";\nimport { useState } from \"react\";\n\nexport default function Incidents() {\n  const { toast } = useToast();\n  const [filterSeverity, setFilterSeverity] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedIncidents, setSelectedIncidents] = useState<string[]>([]);\n  const [bulkOperation, setBulkOperation] = useState<string>('');\n  const [showBulkDialog, setShowBulkDialog] = useState(false);\n\n  const { data: incidents, isLoading } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n  });\n\n  const updateIncidentMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => api.updateIncident(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n      toast({\n        title: \"Success\",\n        description: \"Incident updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update incident\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createActionMutation = useMutation({\n    mutationFn: ({ incidentId, action }: { incidentId: string; action: any }) => \n      api.createAction(incidentId, action),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n      toast({\n        title: \"Success\",\n        description: \"Action created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create action\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkUpdateMutation = useMutation({\n    mutationFn: ({ incidentIds, operation, data }: { incidentIds: string[]; operation: string; data?: any }) =>\n      api.bulkUpdateIncidents(incidentIds, operation, data),\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/incidents'] });\n      setSelectedIncidents([]);\n      setShowBulkDialog(false);\n      toast({\n        title: \"Bulk Operation Complete\",\n        description: `Updated ${result.updated} incidents${result.errorCount > 0 ? ` (${result.errorCount} errors)` : ''}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to perform bulk operation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredIncidents = incidents?.filter((incident: any) => {\n    const severityMatch = filterSeverity === 'all' || \n      (filterSeverity === 'critical' && incident.confidence > 0.8) ||\n      (filterSeverity === 'high' && incident.confidence <= 0.8 && incident.confidence > 0.5) ||\n      (filterSeverity === 'medium' && incident.confidence <= 0.5 && incident.confidence > 0.3) ||\n      (filterSeverity === 'low' && incident.confidence <= 0.3);\n    \n    const searchMatch = searchTerm === '' || \n      incident.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      incident.status.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return severityMatch && searchMatch;\n  }) || [];\n\n  const getSeverityInfo = (confidence: number) => {\n    if (confidence > 0.8) return { label: 'Critical', color: 'critical' };\n    if (confidence > 0.5) return { label: 'High', color: 'high' };\n    if (confidence > 0.3) return { label: 'Medium', color: 'medium' };\n    return { label: 'Low', color: 'low' };\n  };\n\n  const handleAssignIncident = (incidentId: string) => {\n    createActionMutation.mutate({\n      incidentId,\n      action: {\n        actionType: 'ANALYST_ASSIGNMENT',\n        payload: { assignedTo: 'current_user' },\n        performedBy: 'system',\n      },\n    });\n  };\n\n  const handleEscalateIncident = (incidentId: string) => {\n    createActionMutation.mutate({\n      incidentId,\n      action: {\n        actionType: 'ESCALATE',\n        payload: { escalatedTo: 'senior_analyst' },\n        performedBy: 'system',\n      },\n    });\n  };\n\n  const handleSelectIncident = (incidentId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIncidents(prev => [...prev, incidentId]);\n    } else {\n      setSelectedIncidents(prev => prev.filter(id => id !== incidentId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedIncidents(filteredIncidents.map((inc: any) => inc.id));\n    } else {\n      setSelectedIncidents([]);\n    }\n  };\n\n  const handleBulkOperation = (operation: string) => {\n    setBulkOperation(operation);\n    setShowBulkDialog(true);\n  };\n\n  const confirmBulkOperation = () => {\n    if (selectedIncidents.length === 0 || !bulkOperation) return;\n    \n    const data: any = { performedBy: 'analyst' };\n    \n    if (bulkOperation === 'assign') {\n      data.assignedTo = 'current_user'; // In real app, this would be selected\n    } else if (bulkOperation === 'close') {\n      data.reason = 'Bulk closure by analyst';\n    }\n    \n    bulkUpdateMutation.mutate({\n      incidentIds: selectedIncidents,\n      operation: bulkOperation,\n      data\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <Card className=\"soc-card\">\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"flex items-center gap-4\">\n          <h2 className=\"text-2xl font-bold text-white\" data-testid=\"incidents-title\">Incident Management</h2>\n          {selectedIncidents.length > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {selectedIncidents.length} selected\n              </Badge>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedIncidents([])}\n                className=\"text-slate-400 hover:text-white\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-wrap gap-3\">\n          {selectedIncidents.length > 0 && (\n            <>\n              <Button\n                onClick={() => handleBulkOperation('assign')}\n                disabled={bulkUpdateMutation.isPending}\n                className=\"soc-button-secondary\"\n                data-testid=\"bulk-assign\"\n              >\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Assign ({selectedIncidents.length})\n              </Button>\n              <Button\n                onClick={() => handleBulkOperation('escalate')}\n                disabled={bulkUpdateMutation.isPending}\n                className=\"soc-button-warning\"\n                data-testid=\"bulk-escalate\"\n              >\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Escalate ({selectedIncidents.length})\n              </Button>\n              <Button\n                onClick={() => handleBulkOperation('close')}\n                disabled={bulkUpdateMutation.isPending}\n                className=\"soc-button-success\"\n                data-testid=\"bulk-close\"\n              >\n                <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                Close ({selectedIncidents.length})\n              </Button>\n            </>\n          )}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search incidents...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"bg-slate-700 border-slate-600 pl-10 text-white placeholder-slate-400 w-64\"\n              data-testid=\"incidents-search\"\n            />\n          </div>\n          <Select value={filterSeverity} onValueChange={setFilterSeverity}>\n            <SelectTrigger className=\"bg-slate-700 border-slate-600 text-white w-40\" data-testid=\"severity-filter\">\n              <SelectValue placeholder=\"All Incidents\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Incidents</SelectItem>\n              <SelectItem value=\"critical\">Critical</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n            </SelectContent>\n          </Select>\n          <ExportDialog \n            type=\"incidents\" \n            triggerText=\"Export Report\"\n            className=\"soc-button-primary\"\n          />\n        </div>\n      </div>\n\n      {/* Incidents Table */}\n      <Card className=\"soc-card\" data-testid=\"incidents-table\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-white\">\n            Active Incidents ({filteredIncidents.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredIncidents.length === 0 ? (\n            <div className=\"text-center py-12 text-slate-400\">\n              <AlertTriangle className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n              <p>No incidents found matching your criteria</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-slate-750\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider w-12\">\n                      <Checkbox\n                        checked={selectedIncidents.length === filteredIncidents.length && filteredIncidents.length > 0}\n                        onCheckedChange={handleSelectAll}\n                        data-testid=\"select-all-checkbox\"\n                      />\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">ID</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">Description</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">Severity</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">Created</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-slate-700\">\n                  {filteredIncidents.map((incident: any, index: number) => {\n                    const severity = getSeverityInfo(incident.confidence);\n                    return (\n                      <tr key={incident.id} className=\"hover:bg-slate-750\" data-testid={`incident-row-${index}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Checkbox\n                            checked={selectedIncidents.includes(incident.id)}\n                            onCheckedChange={(checked) => handleSelectIncident(incident.id, checked as boolean)}\n                            data-testid={`select-incident-${index}`}\n                          />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-slate-300\" data-testid={`incident-id-${index}`}>\n                          #{incident.id.slice(-6)}\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-white\">\n                          <div>\n                            <p className=\"font-medium\" data-testid={`incident-title-${index}`}>\n                              Security Incident Detection\n                            </p>\n                            <p className=\"text-slate-400\" data-testid={`incident-description-${index}`}>\n                              Automated detection with {(incident.confidence * 100).toFixed(1)}% confidence\n                            </p>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge className={`soc-status-${severity.color}`} data-testid={`incident-severity-${index}`}>\n                            {severity.label}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge \n                            variant={incident.status === 'open' ? 'destructive' : 'secondary'}\n                            data-testid={`incident-status-${index}`}\n                          >\n                            {incident.status}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-300\" data-testid={`incident-created-${index}`}>\n                          {new Date(incident.createdAt).toLocaleString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-sky-400 hover:text-sky-300\"\n                            data-testid={`view-incident-${index}`}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            View\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-emerald-400 hover:text-emerald-300\"\n                            onClick={() => handleAssignIncident(incident.id)}\n                            disabled={createActionMutation.isPending}\n                            data-testid={`assign-incident-${index}`}\n                          >\n                            <UserPlus className=\"w-4 h-4 mr-1\" />\n                            Assign\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-400 hover:text-red-300\"\n                            onClick={() => handleEscalateIncident(incident.id)}\n                            disabled={createActionMutation.isPending}\n                            data-testid={`escalate-incident-${index}`}\n                          >\n                            <TrendingUp className=\"w-4 h-4 mr-1\" />\n                            Escalate\n                          </Button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Bulk Operation Confirmation Dialog */}\n      <Dialog open={showBulkDialog} onOpenChange={setShowBulkDialog}>\n        <DialogContent className=\"bg-slate-800 border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Confirm Bulk Operation</DialogTitle>\n            <DialogDescription className=\"text-slate-400\">\n              You are about to {bulkOperation} {selectedIncidents.length} incident{selectedIncidents.length !== 1 ? 's' : ''}. \n              This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"bg-slate-750 p-4 rounded-lg\">\n              <h4 className=\"text-white font-medium mb-2\">Selected Incidents:</h4>\n              <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                {selectedIncidents.map((incidentId, index) => {\n                  const incident = filteredIncidents.find((inc: any) => inc.id === incidentId);\n                  return (\n                    <div key={incidentId} className=\"text-sm text-slate-300\">\n                      #{incident?.id.slice(-6)} - {incident?.status || 'Unknown'}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowBulkDialog(false)}\n                disabled={bulkUpdateMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={confirmBulkOperation}\n                disabled={bulkUpdateMutation.isPending}\n                className=\"soc-button-primary\"\n                data-testid=\"confirm-bulk-operation\"\n              >\n                {bulkUpdateMutation.isPending ? \"Processing...\" : `Confirm ${bulkOperation}`}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18169},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, AlertTriangle, Eye, TrendingUp } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-slate-700 bg-slate-800\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"w-8 h-8 text-blue-500\" />\n            <h1 className=\"text-2xl font-bold text-white\">SOC Dashboard</h1>\n          </div>\n          <Button onClick={handleLogin} className=\"bg-blue-600 hover:bg-blue-700\">\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"flex-1 container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-5xl font-bold text-white mb-6\">\n            Advanced Security Operations Center\n          </h2>\n          <p className=\"text-xl text-slate-400 mb-8 max-w-3xl mx-auto\">\n            Real-time threat detection, automated incident response, and comprehensive analytics \n            for modern cybersecurity teams.\n          </p>\n          <Button onClick={handleLogin} size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-lg px-8 py-3\">\n            Get Started\n          </Button>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <AlertTriangle className=\"w-10 h-10 text-red-500 mb-4\" />\n              <CardTitle className=\"text-white\">Real-time Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-slate-400\">\n                Instant threat detection and alerting from multiple security sources.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <Eye className=\"w-10 h-10 text-blue-500 mb-4\" />\n              <CardTitle className=\"text-white\">Incident Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-slate-400\">\n                Streamlined incident tracking, assignment, and resolution workflows.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <TrendingUp className=\"w-10 h-10 text-green-500 mb-4\" />\n              <CardTitle className=\"text-white\">Analytics & Reporting</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-slate-400\">\n                Comprehensive performance metrics and automated reporting.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-slate-700\">\n            <CardHeader>\n              <Shield className=\"w-10 h-10 text-purple-500 mb-4\" />\n              <CardTitle className=\"text-white\">Threat Intelligence</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-slate-400\">\n                Advanced threat correlation and intelligence integration.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Statistics */}\n        <div className=\"bg-slate-800 rounded-lg p-8 border border-slate-700\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-8\">\n            Trusted by Security Teams Worldwide\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-blue-500 mb-2\">99.9%</div>\n              <div className=\"text-slate-400\">Uptime Reliability</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-green-500 mb-2\">&lt;2min</div>\n              <div className=\"text-slate-400\">Average Response Time</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-purple-500 mb-2\">24/7</div>\n              <div className=\"text-slate-400\">Continuous Monitoring</div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t border-slate-700 bg-slate-800 py-8\">\n        <div className=\"container mx-auto px-4 text-center text-slate-400\">\n          <p>&copy; 2024 SOC Dashboard. Secure by design.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":4830},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertTriangle, Shield, Eye, EyeOff, LogIn } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { api } from \"@/lib/api\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const demoUsers = [\n    { email: \"john.smith@company.com\", password: \"password123\", role: \"Analyst\", name: \"John Smith\" },\n    { email: \"sarah.johnson@company.com\", password: \"admin123\", role: \"Admin\", name: \"Sarah Johnson\" },\n    { email: \"mike.wilson@company.com\", password: \"password123\", role: \"Analyst\", name: \"Mike Wilson\" }\n  ];\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !password) {\n      setError(\"Please enter both email and password\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      await api.login({ email, password });\n      // Redirect to dashboard on success\n      setLocation(\"/dashboard\");\n    } catch (err: any) {\n      setError(err.message || \"Login failed\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const quickLogin = (user: typeof demoUsers[0]) => {\n    setEmail(user.email);\n    setPassword(user.password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter'] flex items-center justify-center p-6\">\n      {/* Background Effect */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(330,100%,50%)]/10 via-transparent to-[hsl(267,100%,67%)]/10\"></div>\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-[hsl(330,100%,50%)]/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-[hsl(267,100%,67%)]/5 rounded-full blur-3xl\"></div>\n      </div>\n\n      {/* Login Card */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"relative z-10 w-full max-w-md\"\n      >\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-white\" />\n            </div>\n            <span className=\"text-2xl font-bold\">Alpha SOC</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-white mb-2\">Security Operations Center</h1>\n          <p className=\"text-gray-400\">Sign in to access your cybersecurity dashboard</p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Sign In</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-300\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"bg-[hsl(0,0%,10%)]/60 border-[hsl(330,100%,50%)]/20 text-white placeholder:text-gray-400\"\n                  placeholder=\"Enter your email\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-300\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"bg-[hsl(0,0%,10%)]/60 border-[hsl(330,100%,50%)]/20 text-white placeholder:text-gray-400 pr-10\"\n                    placeholder=\"Enter your password\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {error && (\n                <div className=\"flex items-center space-x-2 p-3 bg-red-500/10 border border-red-500/20 rounded-lg\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-400\" />\n                  <span className=\"text-red-400 text-sm\">{error}</span>\n                </div>\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,60%)] text-white\"\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                    <span>Signing in...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <LogIn className=\"w-4 h-4\" />\n                    <span>Sign In</span>\n                  </div>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Demo Accounts */}\n        <Card className=\"mt-6 bg-[hsl(0,0%,8%)]/60 border-[hsl(330,100%,50%)]/10\">\n          <CardHeader>\n            <CardTitle className=\"text-sm text-gray-300\">Demo Accounts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {demoUsers.map((user, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 cursor-pointer hover:bg-[hsl(0,0%,10%)]/60 transition-colors\"\n                  onClick={() => quickLogin(user)}\n                >\n                  <div>\n                    <div className=\"text-white font-medium\">{user.name}</div>\n                    <div className=\"text-xs text-gray-400\">{user.email}</div>\n                  </div>\n                  <Badge className={user.role === 'Admin' ? 'bg-purple-500/20 text-purple-400' : 'bg-blue-500/20 text-blue-400'}>\n                    {user.role}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n            <p className=\"text-xs text-gray-500 mt-3\">Click any account to auto-fill credentials</p>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-6\">\n          <p className=\"text-xs text-gray-500\">\n            Alpha SOC Platform • Secure • Real-time Threat Detection\n          </p>\n        </div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":7834},"client/src/pages/not-found.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Home, ArrowLeft, Shield } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-[hsl(215,28%,5%)] text-white\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"w-full max-w-md mx-4\"\n      >\n        <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n          <CardContent className=\"pt-6 text-center\">\n            <motion.div\n              initial={{ scale: 0.8 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.1 }}\n              className=\"flex flex-col items-center mb-6\"\n            >\n              <div className=\"w-16 h-16 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full flex items-center justify-center mb-4 glow-button\">\n                <AlertCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <h1 className=\"text-3xl font-bold text-white mb-2 glow-text\">404</h1>\n              <h2 className=\"text-xl font-semibold text-gray-300\">Page Not Found</h2>\n            </motion.div>\n\n            <p className=\"text-sm text-gray-400 mb-6\">\n              The security module you're looking for doesn't exist in our SOC platform.\n            </p>\n\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n              className=\"space-y-3\"\n            >\n              <Button \n                onClick={() => setLocation(\"/dashboard\")}\n                className=\"w-full bg-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,60%)] text-white\"\n              >\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Return to SOC Dashboard\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => setLocation(\"/\")}\n                className=\"w-full border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10\"\n              >\n                <Home className=\"w-4 h-4 mr-2\" />\n                Go to Home\n              </Button>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.6, delay: 0.5 }}\n              className=\"mt-6 pt-4 border-t border-[hsl(330,100%,50%)]/20\"\n            >\n              <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-500\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span>Alpha SOC Platform - All Systems Operational</span>\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":3133},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Eye, EyeOff } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterUser) => {\n      const response = await apiRequest('POST', '/api/auth/register', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully! You are now logged in.\",\n      });\n      \n      // Invalidate auth queries to refresh user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      \n      // Redirect to dashboard\n      setLocation('/');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterUser) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-slate-800 border-slate-700\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Shield className=\"w-12 h-12 text-blue-500\" />\n          </div>\n          <CardTitle className=\"text-2xl text-white\">Create Account</CardTitle>\n          <p className=\"text-slate-400\">Join the SOC Dashboard</p>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          value={field.value || \"\"}\n                          placeholder=\"John\"\n                          className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400\"\n                          disabled={registerMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          value={field.value || \"\"}\n                          placeholder=\"Doe\"\n                          className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400\"\n                          disabled={registerMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400\"\n                        disabled={registerMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a password\"\n                          className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400 pr-10\"\n                          disabled={registerMutation.isPending}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 text-slate-400 hover:text-white\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirm your password\"\n                          className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400 pr-10\"\n                          disabled={registerMutation.isPending}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 text-slate-400 hover:text-white\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"w-4 h-4\" />\n                          ) : (\n                            <Eye className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-slate-400\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-blue-400 hover:text-blue-300\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8964},"client/src/pages/sources.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Shield, Server, Plus, Edit, Trash2, Activity } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SourceCard } from \"@/components/source-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertSourceSchema } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nconst sourceFormSchema = insertSourceSchema.extend({\n  endpoint: z.string().url().optional(),\n});\n\nexport default function Sources() {\n  const { toast } = useToast();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const { data: sources, isLoading } = useQuery({\n    queryKey: ['/api/sources'],\n    queryFn: api.getSources,\n  });\n\n  const createSourceMutation = useMutation({\n    mutationFn: api.createSource,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sources'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Source created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create source\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSourceMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => api.updateSource(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sources'] });\n      toast({\n        title: \"Success\",\n        description: \"Source updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update source\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSourceMutation = useMutation({\n    mutationFn: api.deleteSource,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sources'] });\n      toast({\n        title: \"Success\",\n        description: \"Source deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete source\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof sourceFormSchema>>({\n    resolver: zodResolver(sourceFormSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"\",\n      config: {},\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof sourceFormSchema>) => {\n    const { endpoint, ...sourceData } = values;\n    const config = endpoint ? { ...(sourceData.config || {}), endpoint } : (sourceData.config || {});\n    \n    createSourceMutation.mutate({\n      ...sourceData,\n      config,\n    });\n  };\n\n  const handleToggleSource = (sourceId: string, currentStatus: boolean) => {\n    updateSourceMutation.mutate({\n      id: sourceId,\n      data: { config: { enabled: !currentStatus } },\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"soc-card\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-48 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\" data-testid=\"sources-title\">Data Sources</h2>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"mt-4 sm:mt-0 soc-button-primary\" data-testid=\"add-source\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Source\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-slate-800 border-slate-700\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Add New Data Source</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"create-source-form\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Source Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          className=\"bg-slate-700 border-slate-600 text-white\"\n                          data-testid=\"source-name-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Source Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-slate-700 border-slate-600 text-white\" data-testid=\"source-type-select\">\n                            <SelectValue placeholder=\"Select source type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"SIEM\">SIEM</SelectItem>\n                          <SelectItem value=\"EDR\">EDR</SelectItem>\n                          <SelectItem value=\"Firewall\">Firewall</SelectItem>\n                          <SelectItem value=\"IDS\">IDS</SelectItem>\n                          <SelectItem value=\"Antivirus\">Antivirus</SelectItem>\n                          <SelectItem value=\"Network\">Network Monitor</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"endpoint\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-slate-200\">Endpoint URL (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"https://source.example.com/api\"\n                          className=\"bg-slate-700 border-slate-600 text-white\"\n                          data-testid=\"source-endpoint-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"ghost\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"cancel-source-button\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createSourceMutation.isPending}\n                    className=\"soc-button-primary\"\n                    data-testid=\"create-source-button\"\n                  >\n                    {createSourceMutation.isPending ? \"Creating...\" : \"Create Source\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Sources Grid */}\n      {sources?.length === 0 ? (\n        <Card className=\"soc-card\">\n          <CardContent className=\"text-center py-12\">\n            <Server className=\"w-12 h-12 mx-auto mb-4 text-slate-600\" />\n            <p className=\"text-slate-400 text-lg mb-2\">No data sources configured</p>\n            <p className=\"text-slate-500 text-sm\">Add your first data source to start monitoring</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {sources?.map((source: any, index: number) => (\n            <SourceCard\n              key={source.id}\n              source={source}\n              onToggle={(enabled) => handleToggleSource(source.id, !enabled)}\n              onDelete={() => deleteSourceMutation.mutate(source.id)}\n              isDeleting={deleteSourceMutation.isPending}\n              isToggling={updateSourceMutation.isPending}\n              testId={`source-${index}`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9675},"client/src/components/layout/header.tsx":{"content":"import { Search, Bell, Menu, LogOut, User } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface HeaderProps {\n  onMobileMenuToggle: () => void;\n  connectionStatus: 'connecting' | 'connected' | 'disconnected';\n  user?: UserType;\n}\n\nexport function Header({ onMobileMenuToggle, connectionStatus, user }: HeaderProps) {\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      // Reload page to trigger authentication check\n      window.location.reload();\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Fallback: reload anyway\n      window.location.reload();\n    }\n  };\n\n  const getUserInitials = (user: UserType) => {\n    const firstName = user.firstName || '';\n    const lastName = user.lastName || '';\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || user.email?.charAt(0).toUpperCase() || 'U';\n  };\n  return (\n    <header className=\"bg-slate-800 border-b border-slate-700 px-4 lg:px-8 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          {/* Mobile menu button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onMobileMenuToggle}\n            className=\"lg:hidden mr-4 text-slate-400 hover:text-white hover:bg-slate-700\"\n            data-testid=\"mobile-menu-button\"\n          >\n            <Menu className=\"w-6 h-6\" />\n          </Button>\n          \n          <div>\n            <h1 className=\"text-2xl font-semibold text-white\">Security Operations Dashboard</h1>\n            <p className=\"text-sm text-slate-400 mt-1\">Real-time monitoring and incident response</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Real-time status indicator */}\n          <div className=\"flex items-center space-x-2\" data-testid=\"connection-status\">\n            <div \n              className={`w-2 h-2 rounded-full ${\n                connectionStatus === 'connected' ? 'bg-green-500 animate-pulse' :\n                connectionStatus === 'connecting' ? 'bg-amber-500 animate-pulse' :\n                'bg-red-500'\n              }`} \n            />\n            <span className=\"text-sm text-slate-300 capitalize\">{connectionStatus}</span>\n          </div>\n          \n          {/* Search */}\n          <div className=\"hidden md:block\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search incidents...\"\n                className=\"bg-slate-700 border-slate-600 pl-10 pr-4 text-white placeholder-slate-400 focus:ring-sky-500 focus:border-transparent w-64\"\n                data-testid=\"search-input\"\n              />\n            </div>\n          </div>\n          \n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"relative text-slate-400 hover:text-white\"\n            data-testid=\"notifications-button\"\n          >\n            <Bell className=\"w-6 h-6\" />\n            <span className=\"absolute top-0 right-0 block h-2 w-2 bg-red-400 rounded-full\"></span>\n          </Button>\n\n          {/* User Profile */}\n          {user && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user.profileImageUrl || undefined} alt=\"Profile\" />\n                    <AvatarFallback className=\"bg-slate-600 text-white text-sm\">\n                      {getUserInitials(user)}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 bg-slate-800 border-slate-700\" align=\"end\" forceMount>\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none text-white\">\n                      {user.firstName || user.lastName \n                        ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                        : 'User'\n                      }\n                    </p>\n                    <p className=\"text-xs leading-none text-slate-400\">\n                      {user.email}\n                    </p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator className=\"bg-slate-700\" />\n                <DropdownMenuItem \n                  className=\"text-slate-300 hover:bg-slate-700 hover:text-white cursor-pointer\"\n                  onClick={handleLogout}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5554},"client/src/components/layout/sidebar.tsx":{"content":"import { Shield, BarChart3, AlertTriangle, Server, TrendingUp, MessageSquare } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  currentSection: string;\n  onSectionChange: (section: string) => void;\n  className?: string;\n}\n\nconst navigationItems = [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    icon: BarChart3,\n    badge: null,\n  },\n  {\n    id: 'incidents',\n    label: 'Incidents',\n    icon: AlertTriangle,\n    badge: { count: 5, variant: 'destructive' as const },\n  },\n  {\n    id: 'alerts',\n    label: 'Alerts',\n    icon: Shield,\n    badge: { count: 23, variant: 'warning' as const },\n  },\n  {\n    id: 'sources',\n    label: 'Sources',\n    icon: Server,\n    badge: null,\n  },\n  {\n    id: 'analytics',\n    label: 'Analytics',\n    icon: TrendingUp,\n    badge: null,\n  },\n  {\n    id: 'feedback',\n    label: 'Feedback',\n    icon: MessageSquare,\n    badge: null,\n  },\n];\n\nexport function Sidebar({ currentSection, onSectionChange, className }: SidebarProps) {\n  return (\n    <nav className={cn(\"flex flex-col w-full\", className)}>\n      {/* Logo */}\n      <div className=\"flex items-center px-6 py-4 border-b border-slate-700\">\n        <div className=\"w-8 h-8 bg-sky-500 rounded-lg flex items-center justify-center\">\n          <Shield className=\"w-5 h-5 text-white\" />\n        </div>\n        <span className=\"ml-3 text-xl font-semibold text-white\">SOC Platform</span>\n      </div>\n      \n      {/* Navigation Menu */}\n      <div className=\"flex-1 px-3 py-4 space-y-1\">\n        {navigationItems.map((item) => (\n          <button\n            key={item.id}\n            onClick={() => onSectionChange(item.id)}\n            data-testid={`nav-${item.id}`}\n            className={cn(\n              \"flex items-center w-full px-3 py-2 text-sm font-medium rounded-md group transition-colors\",\n              currentSection === item.id\n                ? \"bg-slate-700 text-white\"\n                : \"text-slate-300 hover:bg-slate-700 hover:text-white\"\n            )}\n          >\n            <item.icon className=\"mr-3 w-5 h-5\" />\n            {item.label}\n            {item.badge && (\n              <span\n                className={cn(\n                  \"ml-auto text-xs rounded-full px-2 py-1\",\n                  item.badge.variant === 'destructive' && \"bg-red-500 text-white\",\n                  item.badge.variant === 'warning' && \"bg-amber-500 text-white\"\n                )}\n                data-testid={`badge-${item.id}`}\n              >\n                {item.badge.count}\n              </span>\n            )}\n          </button>\n        ))}\n      </div>\n      \n      {/* User Profile */}\n      <div className=\"px-3 py-4 border-t border-slate-700\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-white\">JS</span>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm font-medium text-white\">John Smith</p>\n            <p className=\"text-xs text-slate-400\">Security Analyst</p>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3145},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        glow: \"bg-gradient-to-r from-[hsl(170,100%,48%)] to-[hsl(267,100%,67%)] text-[hsl(215,28%,5%)] font-semibold glow-button hover:scale-105 active:scale-95\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        xl: \"h-12 rounded-lg px-8 text-lg\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2033},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"NewFrontend/alpha-platform/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"NewFrontend/alpha-platform/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"NewFrontend/alpha-platform/replit.md":{"content":"# Agentic AI SOC Platform\n\n## Overview\n\nThis is a modern cybersecurity SaaS landing page for \"Alpha\" - an \"Agentic AI SOC Platform\" built with React, TypeScript, and Express.js. The application features a sleek, dark-themed design with neon glow accents targeting cybersecurity professionals. The platform serves as a marketing website with demo request functionality, showcasing an AI-powered Security Operations Center solution that promises intelligent automation and 24/7 threat monitoring.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n**Frontend Architecture**\n- React 18 with TypeScript for type safety and modern development\n- Vite as the build tool for fast development and optimized production builds\n- Tailwind CSS for utility-first styling with custom cybersecurity theme colors\n- Shadcn/ui component library for consistent, accessible UI components\n- Framer Motion for smooth animations and transitions\n- React Hook Form with Zod validation for form handling\n- TanStack Query for server state management and API calls\n- Wouter for lightweight client-side routing\n\n**Backend Architecture**  \n- Express.js server with TypeScript for API endpoints\n- RESTful API design with proper error handling and request logging\n- In-memory storage implementation (MemStorage) as the current data layer\n- Modular route registration system for scalable API organization\n- Built-in development middleware for request/response logging\n\n**Database Schema**\n- Drizzle ORM with PostgreSQL dialect configured for production use\n- Two main entities: users (authentication) and demo_requests (lead capture)\n- Schema validation using Drizzle-Zod for type-safe database operations\n- Migration system ready for database schema changes\n\n**Styling and Design System**\n- Dark theme with cybersecurity-focused color palette\n- CSS custom properties for consistent theming\n- Neon teal (#00F6D2) and glowing purple (#A259FF) accent colors\n- Deep black (#0B0C10) primary background\n- Custom button variants including \"glow\" effects\n- Responsive design with mobile-first approach\n\n**Development and Build Process**\n- ESBuild for server-side bundling in production\n- Hot module replacement in development via Vite\n- TypeScript strict mode for enhanced type safety\n- Path mapping for clean imports (@/, @shared/, @assets/)\n- Separate client and server build processes\n\n**Form Handling and Validation**\n- Demo request form with comprehensive field validation\n- Email validation, required field checking, and optional field support  \n- Toast notifications for user feedback\n- Optimistic UI updates with proper error handling\n\n**State Management**\n- TanStack Query for server state with automatic caching\n- React Context for UI state (toasts, mobile detection)\n- Form state managed by React Hook Form\n- Component-level state for UI interactions\n\n**API Design**\n- POST /api/demo-requests for lead capture\n- GET /api/demo-requests for admin access to submissions\n- Consistent error response format with proper HTTP status codes\n- Request validation using Zod schemas\n- CORS and security middleware ready for production\n\n## External Dependencies\n\n**UI and Styling**\n- Radix UI primitives for accessible, unstyled components\n- Tailwind CSS for utility-first styling and responsive design\n- Framer Motion for animations and micro-interactions\n- Lucide React for consistent iconography\n\n**Forms and Validation**\n- React Hook Form for performant form handling\n- Zod for runtime type validation and schema definition\n- Hookform/resolvers for seamless Zod integration\n\n**Development Tools**\n- Vite with React plugin for fast development builds\n- TypeScript for static type checking\n- ESLint and Prettier configurations (implied by project structure)\n- Replit-specific development tools and error overlays\n\n**Server Dependencies**\n- Express.js for HTTP server and middleware\n- Drizzle ORM for database operations and migrations\n- Connect-pg-simple for session storage (configured but not actively used)\n- Date-fns for date manipulation utilities\n\n**Database**\n- PostgreSQL as the primary database (configured via Drizzle)\n- Neon Database serverless driver for cloud database connectivity\n- Database connection configured via DATABASE_URL environment variable\n\n**Build and Runtime**\n- Node.js ESM modules for modern JavaScript features\n- tsx for TypeScript execution in development\n- esbuild for production server bundling\n- PostCSS for CSS processing and autoprefixing","size_bytes":4488},"NewFrontend/alpha-platform/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"NewFrontend/alpha-platform/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:5000\",\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n});\n","size_bytes":1108},"NewFrontend/alpha-platform/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n  log(`serving on port ${port}`);\n});\n})();\n","size_bytes":2020},"NewFrontend/alpha-platform/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertDemoRequestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Demo request submission endpoint\n  app.post(\"/api/demo-requests\", async (req, res) => {\n    try {\n      const validatedData = insertDemoRequestSchema.parse(req.body);\n      const demoRequest = await storage.createDemoRequest(validatedData);\n      res.json({ success: true, id: demoRequest.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Invalid request data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Internal server error\" \n        });\n      }\n    }\n  });\n\n  // Get all demo requests (admin endpoint)\n  app.get(\"/api/demo-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getDemoRequests();\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Internal server error\" \n      });\n    }\n  });\n\n  // Signup endpoint\n  app.post(\"/api/signup\", async (req, res) => {\n    try {\n      const signupSchema = z.object({\n        name: z.string().min(1, \"Name is required\"),\n        email: z.string().email(\"Invalid email address\"),\n        company: z.string().min(1, \"Company name is required\"),\n        jobTitle: z.string().optional(),\n        phoneNumber: z.string().optional(),\n        password: z.string()\n          .min(8, \"Password must be at least 8 characters\")\n          .regex(/[A-Z]/, \"Password must contain uppercase letter\")\n          .regex(/[a-z]/, \"Password must contain lowercase letter\")\n          .regex(/[0-9]/, \"Password must contain a number\")\n          .regex(/[^A-Za-z0-9]/, \"Password must contain special character\"),\n        message: z.string().optional(),\n      });\n\n      const validatedData = signupSchema.parse(req.body);\n      \n      // In a real application, you would hash the password and save to database\n      // For demo purposes, we'll just return success\n      res.json({ \n        success: true, \n        message: \"Account created successfully\",\n        user: {\n          id: Date.now().toString(),\n          name: validatedData.name,\n          email: validatedData.email,\n          company: validatedData.company\n        }\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Invalid request data\",\n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Internal server error\" \n        });\n      }\n    }\n  });\n\n  // User signup endpoint\n  app.post(\"/api/signup\", async (req, res) => {\n    try {\n      const { name, email, company, jobTitle, phoneNumber, password, message } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail?.(email);\n      if (existingUser) {\n        return res.status(400).json({\n          success: false,\n          message: \"User with this email already exists\"\n        });\n      }\n\n      // Create user account (you'll need to implement password hashing in a real app)\n      const user = await storage.createUser({\n        username: email,\n        name,\n        email,\n        company,\n        jobTitle,\n        phoneNumber,\n        message\n      });\n\n      res.json({ \n        success: true, \n        message: \"Account created successfully\",\n        userId: user.id \n      });\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Internal server error\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3958},"NewFrontend/alpha-platform/server/storage.ts":{"content":"import { type User, type InsertUser, type DemoRequest, type InsertDemoRequest } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createDemoRequest(demoRequest: InsertDemoRequest): Promise<DemoRequest>;\n  getDemoRequests(): Promise<DemoRequest[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private demoRequests: Map<string, DemoRequest>;\n\n  constructor() {\n    this.users = new Map();\n    this.demoRequests = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createDemoRequest(insertDemoRequest: InsertDemoRequest): Promise<DemoRequest> {\n    const id = randomUUID();\n    const demoRequest: DemoRequest = {\n      ...insertDemoRequest,\n      id,\n      createdAt: new Date(),\n    };\n    this.demoRequests.set(id, demoRequest);\n    return demoRequest;\n  }\n\n  async getDemoRequests(): Promise<DemoRequest[]> {\n    return Array.from(this.demoRequests.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1586},"NewFrontend/alpha-platform/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"NewFrontend/alpha-platform/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const demoRequests = pgTable(\"demo_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\").notNull(),\n  jobTitle: text(\"job_title\"),\n  phoneNumber: text(\"phone_number\"),\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertDemoRequestSchema = createInsertSchema(demoRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertDemoRequest = z.infer<typeof insertDemoRequestSchema>;\nexport type DemoRequest = typeof demoRequests.$inferSelect;\n","size_bytes":1230},"client/src/components/demo-request-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2 } from \"lucide-react\";\nimport SignupDialog from \"./signup-dialog\";\n\nconst demoRequestSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().min(1, \"Company name is required\"),\n  jobTitle: z.string().optional(),\n  phoneNumber: z.string().optional(),\n  message: z.string().optional(),\n});\n\ntype DemoRequestForm = z.infer<typeof demoRequestSchema>;\n\ninterface DemoRequestDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function DemoRequestDialog({ open, onOpenChange }: DemoRequestDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showSignup, setShowSignup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<DemoRequestForm>({\n    resolver: zodResolver(demoRequestSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      jobTitle: \"\",\n      phoneNumber: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitDemoRequest = useMutation({\n    mutationFn: async (data: DemoRequestForm) => {\n      return await apiRequest(\"POST\", \"/api/demo-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo request submitted!\",\n        description: \"We'll be in touch within 24 hours to schedule your demo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/demo-requests\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error submitting request\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DemoRequestForm) => {\n    submitDemoRequest.mutate(data);\n  };\n\n  return (\n    <>\n      <SignupDialog open={showSignup} onOpenChange={setShowSignup} />\n      <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] bg-[hsl(215,28%,5%)] border-[hsl(170,100%,48%)]/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text\">Request a Demo</DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            See how Prophet Security can transform your security operations. We'll schedule a personalized demo for your team.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"John Doe\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Email *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"john@company.com\" \n                        type=\"email\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Company *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"ACME Corp\" \n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"jobTitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Job Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"CISO\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"+1 (555) 123-4567\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Message</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Tell us about your current security challenges...\" \n                      rows={3}\n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)] resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1 bg-transparent border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"glow\"\n                disabled={submitDemoRequest.isPending}\n                className=\"flex-1\"\n              >\n                {submitDemoRequest.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  \"Request Demo\"\n                )}\n              </Button>\n            </div>\n\n            <div className=\"text-center pt-4 border-t border-gray-700\">\n              <p className=\"text-sm text-gray-400 mb-3\">\n                Ready to get started immediately?\n              </p>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  onOpenChange(false);\n                  setShowSignup(true);\n                }}\n                className=\"w-full bg-[hsl(330,100%,50%)]/10 border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n              >\n                Create Account Instead\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n    </>\n  );\n}","size_bytes":9353},"client/src/components/error-boundary.tsx":{"content":"\nimport { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"min-h-screen bg-[hsl(220,15%,5%)] text-white flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Something went wrong</h2>\n            <p className=\"text-gray-300 mb-4\">We're experiencing technical difficulties</p>\n            <button \n              className=\"bg-[hsl(330,100%,50%)] hover:opacity-90 px-4 py-2 rounded\"\n              onClick={() => this.setState({ hasError: false })}\n            >\n              Try again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":1215},"client/src/components/login-dialog.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Shield,\n  Lock,\n  CheckCircle2,\n  Eye,\n  EyeOff,\n  Zap,\n  AlertCircle,\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface LoginDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function LoginDialog({ open, onOpenChange }: LoginDialogProps) {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginStep, setLoginStep] = useState(0); // 0: locked, 1: email entered, 2: password entered, 3: success\n  const [showLaserGrid, setShowLaserGrid] = useState(true);\n  const [showFirewall, setShowFirewall] = useState(true);\n  const [gateOpen, setGateOpen] = useState(false);\n\n  // Reset state when dialog opens/closes\n  useEffect(() => {\n    if (open) {\n      setEmail(\"\");\n      setPassword(\"\");\n      setLoginStep(0);\n      setShowLaserGrid(true);\n      setShowFirewall(true);\n      setGateOpen(false);\n    }\n  }, [open]);\n\n  // Update barriers based on input progress\n  useEffect(() => {\n    if (email && email.includes(\"@\")) {\n      setLoginStep(1);\n      setShowLaserGrid(false);\n    } else {\n      setLoginStep(0);\n      setShowLaserGrid(true);\n    }\n\n    if (password && password.length >= 6) {\n      setLoginStep(2);\n      setShowFirewall(false);\n    } else if (email && email.includes(\"@\")) {\n      setLoginStep(1);\n      setShowFirewall(true);\n    }\n  }, [email, password]);\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    \n    // Simulate login process\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setLoginStep(3);\n    setGateOpen(true);\n    \n    // Close dialog and redirect to dashboard after successful animation\n    setTimeout(() => {\n      setIsLoading(false);\n      onOpenChange(false);\n      setLocation(\"/dashboard\");\n    }, 2000);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] bg-[hsl(215,28%,5%)] border-[hsl(330,100%,50%)]/30 overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" />\n            Access Control Vault\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Enter your credentials to access the secured digital environment.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* DNA of Cyber Attack Animation */}\n        <div className=\"relative h-40 mb-6 overflow-hidden rounded-lg bg-gradient-to-br from-[hsl(220,15%,5%)] to-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20\">\n          {/* Attack Chain Background */}\n          <div className=\"absolute inset-0 opacity-10\">\n            <div className=\"grid grid-cols-6 grid-rows-4 h-full\">\n              {Array.from({ length: 24 }).map((_, i) => (\n                <div key={i} className=\"border border-[hsl(330,100%,50%)]/5\" />\n              ))}\n            </div>\n          </div>\n\n          {/* Attack Stages */}\n          <div className=\"absolute inset-0 flex items-center justify-between px-4\">\n            {[\n              { id: 1, label: \"Phishing\", icon: \"📧\", color: \"red\", progress: loginStep >= 0 ? 100 : 0 },\n              { id: 2, label: \"Credential\", icon: \"🔑\", color: \"orange\", progress: loginStep >= 1 ? 100 : 0 },\n              { id: 3, label: \"Lateral Move\", icon: \"🌐\", color: \"yellow\", progress: loginStep >= 2 ? 100 : 0 },\n              { id: 4, label: \"Exfiltration\", icon: \"📤\", color: \"red\", progress: loginStep >= 3 ? 100 : 0 }\n            ].map((stage, index) => (\n              <div key={stage.id} className=\"relative flex flex-col items-center\">\n                {/* Attack Stage */}\n                <motion.div\n                  initial={{ scale: 0.5, opacity: 0.3 }}\n                  animate={{ \n                    scale: stage.progress > 0 ? 1 : 0.5,\n                    opacity: stage.progress > 0 ? 1 : 0.3,\n                    boxShadow: stage.progress > 0 ? `0 0 20px ${stage.color === 'red' ? '#ef4444' : stage.color === 'orange' ? '#f97316' : '#eab308'}` : 'none'\n                  }}\n                  transition={{ duration: 0.6, delay: index * 0.2 }}\n                  className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs ${\n                    stage.progress > 0 \n                      ? `border-${stage.color}-500 bg-${stage.color}-500/20` \n                      : 'border-gray-600 bg-gray-600/20'\n                  }`}\n                >\n                  <span>{stage.icon}</span>\n                </motion.div>\n                \n                {/* Stage Label */}\n                <motion.div\n                  initial={{ opacity: 0, y: 5 }}\n                  animate={{ opacity: stage.progress > 0 ? 1 : 0.5, y: 0 }}\n                  transition={{ duration: 0.4, delay: index * 0.2 + 0.3 }}\n                  className=\"text-xs text-gray-300 mt-1 text-center\"\n                >\n                  {stage.label}\n                </motion.div>\n\n                {/* Connection Line */}\n                {index < 3 && (\n                  <motion.div\n                    initial={{ scaleX: 0, opacity: 0 }}\n                    animate={{ \n                      scaleX: stage.progress > 0 ? 1 : 0,\n                      opacity: stage.progress > 0 ? 1 : 0.3\n                    }}\n                    transition={{ duration: 0.8, delay: index * 0.2 + 0.4 }}\n                    className=\"absolute top-4 left-8 w-8 h-0.5 bg-gradient-to-r from-red-500 to-orange-500 origin-left\"\n                  />\n                )}\n\n                {/* Countermeasure */}\n                <AnimatePresence>\n                  {stage.progress > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0, y: -20 }}\n                      animate={{ opacity: 1, scale: 1, y: -25 }}\n                      exit={{ opacity: 0, scale: 0, y: -20 }}\n                      transition={{ duration: 0.5, delay: index * 0.2 + 0.6 }}\n                      className=\"absolute top-0 bg-green-500/20 border border-green-500/50 rounded px-1 py-0.5 text-xs text-green-400\"\n                    >\n                      {stage.id === 1 && \"Email Blocked\"}\n                      {stage.id === 2 && \"MFA Required\"}\n                      {stage.id === 3 && \"Network Isolated\"}\n                      {stage.id === 4 && \"Data Protected\"}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n            ))}\n          </div>\n\n          {/* Attack Flow Visualization */}\n          <motion.div\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: loginStep >= 3 ? 1 : loginStep / 3 }}\n            transition={{ duration: 2, ease: \"easeInOut\" }}\n            className=\"absolute inset-0\"\n          >\n            <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n              <motion.path\n                d=\"M 10 50 Q 30 30, 50 50 Q 70 70, 90 50\"\n                stroke=\"url(#attackGradient)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: loginStep / 3 }}\n                transition={{ duration: 1.5, ease: \"easeInOut\" }}\n              />\n              <defs>\n                <linearGradient id=\"attackGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                  <stop offset=\"50%\" stopColor=\"#f97316\" />\n                  <stop offset=\"100%\" stopColor=\"#eab308\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </motion.div>\n          {/* Success State - All Threats Neutralized */}\n          <AnimatePresence>\n            {gateOpen && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"absolute inset-0\"\n              >\n                {/* Success Overlay */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 1, delay: 0.5 }}\n                  className=\"absolute inset-0 bg-gradient-to-br from-green-500/20 via-[hsl(330,100%,50%)]/20 to-blue-500/20 flex items-center justify-center\"\n                >\n                  <div className=\"text-green-400 font-bold text-lg flex items-center gap-2\">\n                    <CheckCircle2 className=\"w-6 h-6\" />\n                    THREATS NEUTRALIZED\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Security Status Indicator */}\n          <div className=\"absolute top-2 right-2\">\n            <motion.div\n              animate={{ \n                backgroundColor: loginStep === 3 ? \"#10b981\" : loginStep >= 1 ? \"#f59e0b\" : \"#ef4444\",\n                boxShadow: loginStep === 3 ? \"0 0 10px rgba(16, 185, 129, 0.6)\" : loginStep >= 1 ? \"0 0 10px rgba(245, 158, 11, 0.6)\" : \"0 0 10px rgba(239, 68, 68, 0.6)\"\n              }}\n              className=\"w-3 h-3 rounded-full\"\n            />\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"agent@example.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"bg-[hsl(0,0%,8%)] border-[hsl(330,100%,50%)]/30 focus:border-[hsl(330,100%,50%)]\"\n              disabled={isLoading || gateOpen}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter your secure password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-[hsl(0,0%,8%)] border-[hsl(330,100%,50%)]/30 focus:border-[hsl(330,100%,50%)] pr-10\"\n                disabled={isLoading || gateOpen}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                disabled={isLoading || gateOpen}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Security Progress Indicator */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <div className=\"flex gap-1\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div\n                  key={i}\n                  className={`w-2 h-2 rounded-full transition-colors duration-300 ${\n                    i < loginStep ? \"bg-[hsl(330,100%,50%)]\" : \"bg-gray-600\"\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"text-gray-400\">\n              {loginStep === 0 && \"Identify attack vector: Phishing detected\"}\n              {loginStep === 1 && \"Credentials compromised: Deploy MFA\"}\n              {loginStep === 2 && \"Lateral movement blocked: Isolate network\"}\n              {loginStep === 3 && \"All threats neutralized: Access secure\"}\n            </span>\n          </div>\n\n          <Button\n            onClick={handleLogin}\n            disabled={!email || !password || password.length < 6 || isLoading || gateOpen}\n            className=\"w-full bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] hover:opacity-90 disabled:opacity-50\"\n            size=\"lg\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full\"\n                />\n                Authenticating...\n              </div>\n            ) : gateOpen ? (\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle2 className=\"w-4 h-4\" />\n                Access Granted\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"w-4 h-4\" />\n                Access Vault\n              </div>\n            )}\n          </Button>\n\n          <div className=\"text-center text-sm text-gray-400\">\n            Don't have access credentials?{\" \"}\n            <Button variant=\"link\" className=\"p-0 h-auto text-[hsl(330,100%,50%)] hover:text-[hsl(330,100%,60%)]\">\n              Request Access\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13799},"client/src/components/signup-dialog.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, Shield, Lock, CheckCircle2, AlertCircle } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().min(1, \"Company name is required\"),\n  jobTitle: z.string().optional(),\n  phoneNumber: z.string().optional(),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain a number\")\n    .regex(/[^A-Za-z0-9]/, \"Password must contain special character\"),\n  confirmPassword: z.string(),\n  message: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\ninterface SignupDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function SignupDialog({ open, onOpenChange }: SignupDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [passwordScore, setPasswordScore] = useState(0);\n  const [showBarriers, setShowBarriers] = useState(true);\n\n  const form = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      jobTitle: \"\",\n      phoneNumber: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      message: \"\",\n    },\n  });\n\n  const password = form.watch(\"password\");\n\n  useEffect(() => {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n    \n    setPasswordScore(score);\n    setShowBarriers(score < 5);\n  }, [password]);\n\n  const submitSignup = useMutation({\n    mutationFn: async (data: SignupForm) => {\n      const { confirmPassword, ...submitData } = data;\n      return await apiRequest(\"POST\", \"/api/signup\", submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Welcome to Prophet Security. You can now access your dashboard.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating account\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupForm) => {\n    submitSignup.mutate(data);\n  };\n\n  const passwordCriteria = [\n    { test: (p: string) => p.length >= 8, label: \"8+ characters\" },\n    { test: (p: string) => /[A-Z]/.test(p), label: \"Uppercase letter\" },\n    { test: (p: string) => /[a-z]/.test(p), label: \"Lowercase letter\" },\n    { test: (p: string) => /[0-9]/.test(p), label: \"Number\" },\n    { test: (p: string) => /[^A-Za-z0-9]/.test(p), label: \"Special character\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] bg-[hsl(215,28%,5%)] border-[hsl(170,100%,48%)]/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-[hsl(170,100%,48%)]\" />\n            Join Prophet Security\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Create your account to access our advanced AI-powered SOC platform.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* DNA of Cyber Attack - Advanced Version */}\n        <div className=\"relative h-24 mb-4 overflow-hidden rounded-lg bg-[hsl(0,0%,10%)]/50 border border-[hsl(170,100%,48%)]/20\">\n          {/* Background DNA Helix Pattern */}\n          <div className=\"absolute inset-0 opacity-10\">\n            <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n              <motion.path\n                d=\"M 0 30 Q 25 10, 50 30 Q 75 50, 100 30\"\n                stroke=\"url(#helixGradient1)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: 1 }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              />\n              <motion.path\n                d=\"M 0 70 Q 25 50, 50 70 Q 75 90, 100 70\"\n                stroke=\"url(#helixGradient2)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: 1 }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 1 }}\n              />\n              <defs>\n                <linearGradient id=\"helixGradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                  <stop offset=\"100%\" stopColor=\"#f97316\" />\n                </linearGradient>\n                <linearGradient id=\"helixGradient2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#10b981\" />\n                  <stop offset=\"100%\" stopColor=\"#06d6a0\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </div>\n\n          {/* Attack Stages Timeline */}\n          <div className=\"absolute inset-0 flex items-center justify-between px-3\">\n            {[\n              { id: 1, label: \"Recon\", icon: \"🔍\", threat: \"Social Engineering\", countermeasure: \"Awareness Training\" },\n              { id: 2, label: \"Initial\", icon: \"🎯\", threat: \"Phishing Email\", countermeasure: \"Email Security\" },\n              { id: 3, label: \"Execution\", icon: \"⚡\", threat: \"Malware Deployed\", countermeasure: \"EDR Detection\" },\n              { id: 4, label: \"Persistence\", icon: \"🔗\", threat: \"Backdoor Created\", countermeasure: \"Behavior Analysis\" },\n              { id: 5, label: \"Escalation\", icon: \"⬆️\", threat: \"Privilege Escalation\", countermeasure: \"Zero Trust\" },\n              { id: 6, label: \"Exfiltration\", icon: \"📤\", threat: \"Data Theft\", countermeasure: \"DLP Protection\" }\n            ].map((stage, index) => {\n              const isActive = passwordScore > index;\n              return (\n                <div key={stage.id} className=\"relative flex flex-col items-center\">\n                  {/* Attack Stage Circle */}\n                  <motion.div\n                    initial={{ scale: 0.3, opacity: 0.2 }}\n                    animate={{ \n                      scale: isActive ? 1 : 0.3,\n                      opacity: isActive ? 1 : 0.2,\n                      boxShadow: isActive ? `0 0 15px rgba(239, 68, 68, 0.6)` : 'none'\n                    }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className={`w-6 h-6 rounded-full border flex items-center justify-center text-xs ${\n                      isActive \n                        ? 'border-red-500 bg-red-500/20 text-red-400' \n                        : 'border-gray-600 bg-gray-600/20 text-gray-500'\n                    }`}\n                  >\n                    <span className=\"text-xs\">{stage.icon}</span>\n                  </motion.div>\n\n                  {/* Connection DNA Strand */}\n                  {index < 5 && (\n                    <motion.div\n                      initial={{ scaleX: 0 }}\n                      animate={{ scaleX: isActive ? 1 : 0 }}\n                      transition={{ duration: 0.6, delay: index * 0.1 + 0.3 }}\n                      className=\"absolute top-3 left-6 w-4 h-0.5 bg-gradient-to-r from-red-500 to-orange-500 origin-left\"\n                    />\n                  )}\n\n                  {/* Threat Label */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 5 }}\n                    animate={{ opacity: isActive ? 1 : 0.3, y: 0 }}\n                    className=\"absolute -top-6 text-xs text-red-400 whitespace-nowrap\"\n                    style={{ fontSize: '10px' }}\n                  >\n                    {stage.threat}\n                  </motion.div>\n\n                  {/* Countermeasure Animation */}\n                  <AnimatePresence>\n                    {isActive && (\n                      <motion.div\n                        initial={{ opacity: 0, scale: 0, y: 10 }}\n                        animate={{ opacity: 1, scale: 1, y: 8 }}\n                        exit={{ opacity: 0, scale: 0, y: 10 }}\n                        transition={{ duration: 0.4, delay: index * 0.1 + 0.5 }}\n                        className=\"absolute top-8 bg-green-500/20 border border-green-500/50 rounded px-1 py-0.5 text-green-400 whitespace-nowrap\"\n                        style={{ fontSize: '9px' }}\n                      >\n                        ✓ {stage.countermeasure}\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Progress Indicator */}\n          <motion.div\n            initial={{ width: \"0%\" }}\n            animate={{ width: `${(passwordScore / 6) * 100}%` }}\n            transition={{ duration: 0.3 }}\n            className=\"absolute bottom-0 left-0 h-1 bg-gradient-to-r from-red-500 via-orange-500 to-green-500\"\n          />\n\n          {/* Complete Security Animation */}\n          <AnimatePresence>\n            {passwordScore >= 5 && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-r from-green-500/20 to-[hsl(170,100%,48%)]/20 backdrop-blur-sm\"\n              >\n                <div className=\"text-xs font-bold text-[hsl(170,100%,48%)] flex items-center gap-1\">\n                  <CheckCircle2 className=\"w-3 h-3\" />\n                  SECURITY CHAIN COMPLETE\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"John Doe\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Email *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"john@company.com\" \n                        type=\"email\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Company *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"ACME Corp\" \n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"jobTitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Job Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"CISO\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"+1 (555) 123-4567\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Password *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"••••••••\" \n                        type=\"password\"\n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Confirm Password *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"••••••••\" \n                        type=\"password\"\n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Password Requirements */}\n            {password && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: \"auto\" }}\n                className=\"bg-[hsl(0,0%,10%)]/30 rounded-lg p-3 border border-[hsl(170,100%,48%)]/20\"\n              >\n                <div className=\"text-sm text-gray-300 mb-2\">Password Requirements:</div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {passwordCriteria.map((criteria, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -10 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-center gap-2 text-xs ${\n                        criteria.test(password) ? \"text-green-400\" : \"text-gray-500\"\n                      }`}\n                    >\n                      {criteria.test(password) ? (\n                        <CheckCircle2 className=\"w-3 h-3\" />\n                      ) : (\n                        <AlertCircle className=\"w-3 h-3\" />\n                      )}\n                      {criteria.label}\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Message</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Tell us about your security requirements...\" \n                      rows={3}\n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)] resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1 bg-transparent border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"glow\"\n                disabled={submitSignup.isPending || showBarriers}\n                className=\"flex-1\"\n              >\n                {submitSignup.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Creating Account...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Create Account\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19607},"client/src/hooks/use-gsap-animations.ts":{"content":"\nimport { useEffect, useRef, MutableRefObject } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport const useGSAPFadeIn = (trigger?: string, delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element,\n        { opacity: 0, y: 30 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.8,\n          delay,\n          ease: \"power2.out\",\n          scrollTrigger: trigger ? {\n            trigger: element,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          } : undefined\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [trigger, delay]);\n\n  return ref;\n};\n\nexport const useGSAPScaleIn = (delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element,\n        { scale: 0.8, opacity: 0 },\n        {\n          scale: 1,\n          opacity: 1,\n          duration: 0.6,\n          delay,\n          ease: \"back.out(1.7)\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [delay]);\n\n  return ref;\n};\n\nexport const useGSAPStagger = (selector: string, delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element.querySelectorAll(selector),\n        { opacity: 0, y: 20 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.5,\n          stagger: 0.1,\n          delay,\n          ease: \"power2.out\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [selector, delay]);\n\n  return ref;\n};\n\nexport const useGSAPSlideIn = (direction: 'left' | 'right' | 'up' | 'down' = 'up', delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const getTransform = () => {\n      switch (direction) {\n        case 'left': return { x: -50, y: 0 };\n        case 'right': return { x: 50, y: 0 };\n        case 'up': return { x: 0, y: 50 };\n        case 'down': return { x: 0, y: -50 };\n        default: return { x: 0, y: 50 };\n      }\n    };\n\n    const ctx = gsap.context(() => {\n      const { x, y } = getTransform();\n      gsap.fromTo(element,\n        { opacity: 0, x, y },\n        {\n          opacity: 1,\n          x: 0,\n          y: 0,\n          duration: 0.8,\n          delay,\n          ease: \"power3.out\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [direction, delay]);\n\n  return ref;\n};\n\nexport const useGSAPFloat = (intensity = 10, duration = 2) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.to(element, {\n        y: -intensity,\n        duration,\n        yoyo: true,\n        repeat: -1,\n        ease: \"power2.inOut\"\n      });\n    }, ref);\n\n    return () => ctx.revert();\n  }, [intensity, duration]);\n\n  return ref;\n};\n","size_bytes":3271},"client/src/pages/ai-assistant-old.tsx":{"content":"\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, Send, Mic, Paperclip, MoreHorizontal, Copy, ExternalLink, ChevronDown, Network, Server, Users, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ChatMessage {\n  id: string;\n  type: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\ninterface AlertSummary {\n  alertId: string;\n  severity: \"Critical\" | \"High\" | \"Medium\" | \"Low\";\n  status: \"Active\" | \"Investigating\" | \"Resolved\";\n  detected: string;\n  lastUpdated: string;\n  assignedAnalyst: string;\n  riskScore: number;\n  aiConfidence: number;\n  sourceIp: string;\n  destinationIp: string;\n  destinationPort: string;\n  protocol: string;\n  detectedBy: string;\n  actionTaken: string;\n  geoLocation: string;\n}\n\ninterface NetworkFlow {\n  flowId: string;\n  startTime: string;\n  endTime: string;\n  bytesSent: string;\n  bytesReceived: string;\n  packets: string;\n  flags: string;\n  application: string;\n}\n\ninterface ImpactedEntity {\n  type: \"user\" | \"device\" | \"server\";\n  name: string;\n  identifier: string;\n  icon: typeof User | typeof Server | typeof Network;\n}\n\ninterface IoC {\n  id: string;\n  type: string;\n  value: string;\n  confidence: string;\n}\n\nexport default function AIAssistant() {\n  const [, setLocation] = useLocation();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const alertData: AlertSummary = {\n    alertId: \"ALT-2804-001\",\n    severity: \"Critical\",\n    status: \"Active\",\n    detected: \"2024-07-26 16:30 UTC\",\n    lastUpdated: \"2024-07-26 16:45 UTC\",\n    assignedAnalyst: \"Sarah Chen\",\n    riskScore: 92,\n    aiConfidence: 88,\n    sourceIp: \"192.168.1.105\",\n    destinationIp: \"185.199.108.153\",\n    destinationPort: \"443\",\n    protocol: \"TCP\",\n    detectedBy: \"IDS/IPS Rule 703\",\n    actionTaken: \"Blocked by Firewall\",\n    geoLocation: \"Destination Russia\"\n  };\n\n  const impactedEntities: ImpactedEntity[] = [\n    { type: \"user\", name: \"jane.doe@example.com\", identifier: \"User Account\", icon: User },\n    { type: \"device\", name: \"HR-Laptop-007\", identifier: \"Device\", icon: Network },\n    { type: \"server\", name: \"prod-web-server-01\", identifier: \"Server\", icon: Server }\n  ];\n\n  const indicators: IoC[] = [\n    { id: \"1\", type: \"IP\", value: \"185.199.108.153\", confidence: \"High\" },\n    { id: \"2\", type: \"Hash\", value: \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\", confidence: \"Medium\" },\n    { id: \"3\", type: \"Domain\", value: \"malicious-c2server.ru\", confidence: \"High\" }\n  ];\n\n  const networkFlow: NetworkFlow = {\n    flowId: \"0x48C0123EF04\",\n    startTime: \"2024-07-26 14:30:15\",\n    endTime: \"2024-07-26 14:33:15\",\n    bytesSent: \"1.2 GB\",\n    bytesReceived: \"45.6 MB\",\n    packets: \"15,200\",\n    flags: \"SYN, ACK, PSH, FIN\",\n    application: \"HTTPS\"\n  };\n\n  const initialMessages: ChatMessage[] = [\n    {\n      id: \"1\",\n      type: \"assistant\",\n      content: \"I've detected unusual outbound traffic originating from '192.168.1.105' to a known malicious IP '185.199.108.153' on port '443' (HTTPS). This activity is highly indicative of potential command and control (C2) communication.\\n\\nSource IP: 192.168.1.105\\nDestination IP: 185.199.108.153\\nDestination Port: 443\\nProtocol: TCP\\nAnomaly Type: Outbound C2 Traffic\",\n      timestamp: new Date()\n    },\n    {\n      id: \"2\",\n      type: \"user\",\n      content: \"What process initiated this connection on 192.168.1.105?\",\n      timestamp: new Date()\n    },\n    {\n      id: \"3\",\n      type: \"assistant\",\n      content: \"Analysis indicates the connection was initiated by 'cmd.exe' running under a compromised user account. Further investigation into process tree and executed commands is recommended. Would you like me to initiate an automated scan?\",\n      timestamp: new Date()\n    }\n  ];\n\n  const suggestedActions = [\n    \"Run Automated Scan\",\n    \"View Process Tree\", \n    \"Show me the full network flow data for this connection\",\n    \"Run full vulnerability scan\",\n    \"Isolate impacted host\",\n    \"Generate incident report\",\n    \"Check user login activity\",\n    \"Analyze\"\n  ];\n\n  useEffect(() => {\n    setMessages(initialMessages);\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const simulateTyping = (content: string, callback: () => void) => {\n    setIsTyping(true);\n    setTimeout(() => {\n      setIsTyping(false);\n      callback();\n    }, 1000 + Math.random() * 2000);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n\n    // Simulate AI response\n    simulateTyping(\"\", () => {\n      const aiResponses = [\n        \"Here is a summary of the network flow for the suspicious connection. High volume outbound traffic observed. The connection persisted for 3 minutes before being terminated by the firewall.\\n\\nFlow ID: 0x48C0123EF04\\nStart Time: 2024-07-26 14:30:15\\nEnd Time: 2024-07-26 14:33:15\\nBytes Sent: 1.2 GB\\nBytes Received: 45.6 MB\\nPackets: 15,200\\nFlags: SYN, ACK, PSH, FIN\\nApplication: HTTPS\",\n        \"Based on my analysis, this appears to be a coordinated attack. I recommend immediate isolation of the affected host and initiation of incident response procedures.\",\n        \"I've completed the vulnerability scan. The system shows 3 critical vulnerabilities that need immediate attention. Would you like me to generate a remediation plan?\",\n        \"The automated scan has been initiated. I'll monitor the progress and notify you of any findings. Estimated completion time: 5 minutes.\"\n      ];\n\n      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: \"assistant\",\n        content: randomResponse,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    });\n  };\n\n  const handleSuggestedAction = (action: string) => {\n    setInputValue(action);\n    handleSendMessage();\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'Critical': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'High': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      case 'Medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30';\n      case 'Investigating': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-green-500/20 text-green-400 border-green-500/30';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Smart Alert Management</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Left Panel - AI Assistant Chat */}\n        <motion.div \n          initial={{ x: -50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6 }}\n          className=\"w-1/2 border-r border-[hsl(330,100%,50%)]/20 flex flex-col\"\n        >\n          <div className=\"bg-[hsl(0,0%,8%)]/80 border-b border-[hsl(330,100%,50%)]/20 px-6 py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full flex items-center justify-center\">\n                <Bot className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold text-white\">AI Assistant</h2>\n                <p className=\"text-sm text-gray-400\">Analyzing suspicious network traffic...</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n            <AnimatePresence>\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div className={`max-w-[80%] ${\n                    message.type === 'user' \n                      ? 'bg-[hsl(330,100%,50%)]/20 border border-[hsl(330,100%,50%)]/30 rounded-l-lg rounded-tr-lg' \n                      : 'bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg'\n                  } p-4`}>\n                    <div className=\"whitespace-pre-wrap text-sm text-gray-100\">\n                      {message.content}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-2\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex justify-start\"\n              >\n                <div className=\"bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">AI is analyzing...</span>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Suggested Actions */}\n          <div className=\"px-6 py-3 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex flex-wrap gap-2 mb-3\">\n              {suggestedActions.slice(0, 4).map((action, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                  onClick={() => handleSuggestedAction(action)}\n                  className=\"text-xs bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 hover:border-[hsl(330,100%,50%)]/40 text-gray-300 hover:text-white px-3 py-1 rounded-full transition-all\"\n                >\n                  {action}\n                </motion.button>\n              ))}\n            </div>\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-6 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex-1 relative\">\n                <Input\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  placeholder=\"Ask the AI for more details...\"\n                  className=\"bg-[hsl(0,0%,10%)]/60 border-[hsl(330,100%,50%)]/20 text-white placeholder:text-gray-400 pr-20\"\n                />\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Mic className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Paperclip className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                </div>\n              </div>\n              <Button \n                onClick={handleSendMessage}\n                className=\"bg-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,60%)] text-white\"\n                size=\"icon\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Right Panel - Alert Details */}\n        <motion.div \n          initial={{ x: 50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-1/2 overflow-y-auto\"\n        >\n          <div className=\"p-6 space-y-6\">\n            {/* Alert Header */}\n            <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-400\" />\n                  <h2 className=\"text-xl font-bold text-white\">Suspicious Network Traffic Detected</h2>\n                </div>\n                <Button variant=\"outline\" className=\"border-green-500/20 text-green-400\">\n                  Bulk Auto-Triage\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                <div>\n                  <span className=\"text-xs text-gray-400\">Risk Score:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(330,100%,50%)]\">{alertData.riskScore}%</span>\n                    <Progress value={alertData.riskScore} className=\"flex-1\" />\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-xs text-gray-400\">AI Confidence:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(267,100%,67%)]\">{alertData.aiConfidence}%</span>\n                    <Progress value={alertData.aiConfidence} className=\"flex-1\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-400\">Alert ID:</span>\n                  <div className=\"text-white font-mono\">{alertData.alertId}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Detected:</span>\n                  <div className=\"text-white\">{alertData.detected}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Last Updated:</span>\n                  <div className=\"text-white\">{alertData.lastUpdated}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex space-x-2\">\n                  <Badge className={getSeverityColor(alertData.severity)}>\n                    {alertData.severity}\n                  </Badge>\n                  <Badge className={getStatusColor(alertData.status)}>\n                    {alertData.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                  <User className=\"w-4 h-4\" />\n                  <span>{alertData.assignedAnalyst}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Alert Summary */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400\">Source IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.sourceIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.destinationIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination Port:</span>\n                    <div className=\"text-white\">{alertData.destinationPort}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Protocol:</span>\n                    <div className=\"text-white\">{alertData.protocol}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Detected By:</span>\n                    <div className=\"text-white\">{alertData.detectedBy}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Action Taken:</span>\n                    <div className=\"text-white\">{alertData.actionTaken}</div>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <span className=\"text-gray-400\">Geo-Location:</span>\n                    <div className=\"text-white\">{alertData.geoLocation}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Impacted Entities */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Impacted Entities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {impactedEntities.map((entity, index) => {\n                    const Icon = entity.icon;\n                    return (\n                      <div key={index} className=\"flex items-center space-x-3 p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                        <Icon className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                        <div className=\"flex-1\">\n                          <div className=\"text-white font-medium\">{entity.name}</div>\n                          <div className=\"text-xs text-gray-400\">{entity.identifier}</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Indicators of Compromise */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Indicators of Compromise (IOCs)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {indicators.map((ioc) => (\n                    <div key={ioc.id} className=\"flex items-center justify-between p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant=\"outline\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                          {ioc.type}\n                        </Badge>\n                        <span className=\"text-white font-mono text-sm\">{ioc.value}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={ioc.confidence === 'High' ? 'bg-red-500/20 text-red-400' : 'bg-yellow-500/20 text-yellow-400'}>\n                          {ioc.confidence}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23444},"client/src/pages/ai-assistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, Send, Mic, Paperclip, MoreHorizontal, Copy, ExternalLink, ChevronDown, Network, Server, Users, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface ChatMessage {\n  id: string;\n  type: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\ninterface AlertSummary {\n  alertId: string;\n  severity: \"Critical\" | \"High\" | \"Medium\" | \"Low\";\n  status: \"Active\" | \"Investigating\" | \"Resolved\";\n  detected: string;\n  lastUpdated: string;\n  assignedAnalyst: string;\n  riskScore: number;\n  aiConfidence: number;\n  sourceIp: string;\n  destinationIp: string;\n  destinationPort: string;\n  protocol: string;\n  detectedBy: string;\n  actionTaken: string;\n  geoLocation: string;\n}\n\ninterface NetworkFlow {\n  flowId: string;\n  startTime: string;\n  endTime: string;\n  bytesSent: string;\n  bytesReceived: string;\n  packets: string;\n  flags: string;\n  application: string;\n}\n\ninterface ImpactedEntity {\n  type: \"user\" | \"device\" | \"server\";\n  name: string;\n  identifier: string;\n  icon: typeof User | typeof Server | typeof Network;\n}\n\ninterface IoC {\n  id: string;\n  type: string;\n  value: string;\n  confidence: string;\n}\n\nexport default function AIAssistant() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isUnauthenticated, isLoading: authLoading } = useAuth();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (isUnauthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isUnauthenticated, setLocation]);\n\n  // Real API calls to backend\n  const { data: incidents, isLoading: incidentsLoading } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: alerts, isLoading: alertsLoading } = useQuery({\n    queryKey: ['/api/alerts'],\n    queryFn: api.getAlerts,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: threatIntel } = useQuery({\n    queryKey: ['/api/threatintel'],\n    queryFn: api.getThreatIntel,\n    enabled: isAuthenticated,\n  });\n  \n  const { data: sources } = useQuery({\n    queryKey: ['/api/sources'],\n    queryFn: api.getSources,\n    enabled: isAuthenticated,\n  });\n\n  // Convert real data to original UI format for compatibility\n  const getCurrentAlert = (): AlertSummary => {\n    const alert = alerts?.find((a: any) => a.severity === 'critical' || a.severity === 'high') || alerts?.[0];\n    const incident = incidents?.find((i: any) => i.severity === 'critical' || i.severity === 'high') || incidents?.[0];\n    \n    if (alert || incident) {\n      const baseData = alert || incident;\n      return {\n        alertId: `ALT-${baseData.id.slice(-7)}`,\n        severity: (baseData.severity?.charAt(0).toUpperCase() + baseData.severity?.slice(1)) as AlertSummary['severity'] || \"Medium\",\n        status: (baseData.status === 'open' ? 'Active' : baseData.status === 'monitoring' ? 'Investigating' : 'Resolved') as AlertSummary['status'],\n        detected: new Date(baseData.createdAt || baseData.receivedAt).toLocaleString(),\n        lastUpdated: new Date(baseData.updatedAt || baseData.receivedAt).toLocaleString(),\n        assignedAnalyst: baseData.assignedTo || \"AI Auto-Triage\",\n        riskScore: Math.floor(Math.random() * 30) + 70,\n        aiConfidence: Math.floor(Math.random() * 20) + 80,\n        sourceIp: \"192.168.1.105\",\n        destinationIp: \"185.199.108.153\",\n        destinationPort: \"443\",\n        protocol: \"TCP\",\n        detectedBy: baseData.sourceId || \"Advanced Detection Rule\",\n        actionTaken: \"Analyzed by AI - \" + (baseData.status || 'monitoring'),\n        geoLocation: \"Suspicious Geographic Pattern\"\n      };\n    }\n    \n    return {\n      alertId: \"ALT-2804-001\",\n      severity: \"Critical\",\n      status: \"Active\", \n      detected: new Date().toLocaleString(),\n      lastUpdated: new Date().toLocaleString(),\n      assignedAnalyst: \"AI Auto-Triage\",\n      riskScore: 92,\n      aiConfidence: 88,\n      sourceIp: \"192.168.1.105\",\n      destinationIp: \"185.199.108.153\",\n      destinationPort: \"443\",\n      protocol: \"TCP\",\n      detectedBy: \"Advanced ML Detection\",\n      actionTaken: \"Real-time Monitoring\",\n      geoLocation: \"Global Threat Pattern\"\n    };\n  };\n\n  const alertData = getCurrentAlert();\n\n  const impactedEntities: ImpactedEntity[] = incidents?.slice(0, 3).map((incident: any, index: number) => {\n    const types = [\"user\", \"device\", \"server\"] as const;\n    const icons = [User, Network, Server];\n    return {\n      type: types[index % 3],\n      name: incident.title || `${types[index % 3]}-${incident.id.slice(-6)}`,\n      identifier: `Incident ${incident.id.slice(-6)}`,\n      icon: icons[index % 3]\n    };\n  }) || [\n    { type: \"user\", name: \"jane.doe@example.com\", identifier: \"User Account\", icon: User },\n    { type: \"device\", name: \"HR-Laptop-007\", identifier: \"Device\", icon: Network },\n    { type: \"server\", name: \"prod-web-server-01\", identifier: \"Server\", icon: Server }\n  ];\n\n  const indicators: IoC[] = threatIntel?.slice(0, 3).map((intel: any, index: number) => ({\n    id: `ioc-${index}`,\n    type: intel.type || \"IP\",\n    value: intel.indicator || `IOC-${index}`,\n    confidence: intel.confidence || (index === 0 ? \"High\" : \"Medium\"),\n  })) || [\n    { id: \"1\", type: \"IP\", value: \"185.199.108.153\", confidence: \"High\" },\n    { id: \"2\", type: \"Hash\", value: \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\", confidence: \"Medium\" },\n    { id: \"3\", type: \"Domain\", value: \"malicious-c2server.ru\", confidence: \"High\" }\n  ];\n\n  const networkFlow: NetworkFlow = {\n    flowId: \"0x48C0123EF04\",\n    startTime: new Date(Date.now() - 180000).toLocaleString(),\n    endTime: new Date().toLocaleString(),\n    bytesSent: \"1.2 GB\",\n    bytesReceived: \"45.6 MB\",\n    packets: \"15,200\",\n    flags: \"SYN, ACK, PSH, FIN\",\n    application: \"HTTPS\"\n  };\n\n  const initialMessages: ChatMessage[] = [\n    {\n      id: \"1\",\n      type: \"assistant\",\n      content: `I've detected unusual outbound traffic originating from '${alertData.sourceIp}' to a known malicious IP '${alertData.destinationIp}' on port '${alertData.destinationPort}' (HTTPS). This activity is highly indicative of potential command and control (C2) communication.\\n\\nSource IP: ${alertData.sourceIp}\\nDestination IP: ${alertData.destinationIp}\\nDestination Port: ${alertData.destinationPort}\\nProtocol: ${alertData.protocol}\\nAnomaly Type: Outbound C2 Traffic\\n\\nBased on ${incidents?.length || 0} active incidents and ${alerts?.length || 0} alerts from your security infrastructure.`,\n      timestamp: new Date()\n    },\n    {\n      id: \"2\",\n      type: \"user\",\n      content: \"What process initiated this connection on \" + alertData.sourceIp + \"?\",\n      timestamp: new Date()\n    },\n    {\n      id: \"3\",\n      type: \"assistant\",\n      content: `Analysis indicates the connection was initiated by a suspicious process. Based on current security data from ${sources?.length || 0} connected sources, further investigation into process tree and executed commands is recommended. Would you like me to initiate an automated scan?`,\n      timestamp: new Date()\n    }\n  ];\n\n  const suggestedActions = [\n    \"Run Automated Scan\",\n    \"View Process Tree\", \n    \"Show me the full network flow data for this connection\",\n    \"Run full vulnerability scan\",\n    \"Isolate impacted host\",\n    \"Generate incident report\",\n    \"Check user login activity\",\n    \"Analyze threat patterns\"\n  ];\n\n  useEffect(() => {\n    if (!authLoading && isAuthenticated) {\n      setMessages(initialMessages);\n    }\n  }, [authLoading, isAuthenticated, incidents?.length, alerts?.length, sources?.length]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const simulateTyping = (content: string, callback: () => void) => {\n    setIsTyping(true);\n    setTimeout(() => {\n      setIsTyping(false);\n      callback();\n    }, 1000 + Math.random() * 2000);\n  };\n\n  const generateAIResponse = (userInput: string): string => {\n    const input = userInput.toLowerCase();\n    \n    if (input.includes('network flow') || input.includes('connection')) {\n      return `Here is a summary of the network flow for the suspicious connection. High volume outbound traffic observed. The connection persisted for 3 minutes before being terminated by the firewall.\\n\\nFlow ID: ${networkFlow.flowId}\\nStart Time: ${networkFlow.startTime}\\nEnd Time: ${networkFlow.endTime}\\nBytes Sent: ${networkFlow.bytesSent}\\nBytes Received: ${networkFlow.bytesReceived}\\nPackets: ${networkFlow.packets}\\nFlags: ${networkFlow.flags}\\nApplication: ${networkFlow.application}`;\n    }\n    \n    if (input.includes('scan') || input.includes('automated')) {\n      return \"The automated scan has been initiated. I'll monitor the progress and notify you of any findings. Estimated completion time: 5 minutes.\\n\\nScan includes:\\n• Malware detection\\n• Vulnerability assessment\\n• Network traffic analysis\\n• Process tree examination\";\n    }\n    \n    if (input.includes('vulnerability')) {\n      const criticalCount = alerts?.filter((a: any) => a.severity === 'critical').length || 0;\n      return `I've completed the vulnerability scan. The system shows ${criticalCount} critical vulnerabilities that need immediate attention. Would you like me to generate a remediation plan?\\n\\nKey findings:\\n• Critical alerts: ${criticalCount}\\n• Total incidents: ${incidents?.length || 0}\\n• Active monitoring sources: ${sources?.length || 0}`;\n    }\n    \n    if (input.includes('incident') || input.includes('report')) {\n      return `Based on my analysis, this appears to be a coordinated attack. I recommend immediate isolation of the affected host and initiation of incident response procedures.\\n\\nIncident Summary:\\n• Alert ID: ${alertData.alertId}\\n• Risk Score: ${alertData.riskScore}%\\n• AI Confidence: ${alertData.aiConfidence}%\\n• Assigned Analyst: ${alertData.assignedAnalyst}`;\n    }\n\n    // Default contextual response\n    return `I'm analyzing your security environment with ${incidents?.length || 0} active incidents and ${alerts?.length || 0} alerts. The current threat landscape shows elevated activity requiring attention. What specific aspect would you like me to investigate further?`;\n  };\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    // Generate AI response with real data context\n    simulateTyping(\"\", () => {\n      const responseContent = generateAIResponse(currentInput);\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: \"assistant\",\n        content: responseContent,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    });\n  };\n\n  const handleSuggestedAction = (action: string) => {\n    setInputValue(action);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'Critical': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'High': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      case 'Medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30';\n      case 'Investigating': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-green-500/20 text-green-400 border-green-500/30';\n    }\n  };\n\n  if (authLoading || incidentsLoading || alertsLoading) {\n    return (\n      <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white p-6\">\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full mx-auto mb-4 animate-pulse\"></div>\n            <div className=\"text-xl font-semibold text-white mb-2\">Loading AI Assistant</div>\n            <div className=\"text-gray-400\">Initializing security analysis engine...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Smart Alert Management</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Security Analyst</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Left Panel - AI Assistant Chat */}\n        <motion.div \n          initial={{ x: -50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6 }}\n          className=\"w-1/2 border-r border-[hsl(330,100%,50%)]/20 flex flex-col\"\n        >\n          <div className=\"bg-[hsl(0,0%,8%)]/80 border-b border-[hsl(330,100%,50%)]/20 px-6 py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full flex items-center justify-center\">\n                <Bot className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold text-white\">AI Assistant</h2>\n                <p className=\"text-sm text-gray-400\">Analyzing suspicious network traffic...</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n            <AnimatePresence>\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div className={`max-w-[80%] ${\n                    message.type === 'user' \n                      ? 'bg-[hsl(330,100%,50%)]/20 border border-[hsl(330,100%,50%)]/30 rounded-l-lg rounded-tr-lg' \n                      : 'bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg'\n                  } p-4`}>\n                    <div className=\"whitespace-pre-wrap text-sm text-gray-100\">\n                      {message.content}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-2\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex justify-start\"\n              >\n                <div className=\"bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">AI is analyzing...</span>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Suggested Actions */}\n          <div className=\"px-6 py-3 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex flex-wrap gap-2 mb-3\">\n              {suggestedActions.slice(0, 4).map((action, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                  onClick={() => handleSuggestedAction(action)}\n                  className=\"text-xs bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 hover:border-[hsl(330,100%,50%)]/40 text-gray-300 hover:text-white px-3 py-1 rounded-full transition-all\"\n                >\n                  {action}\n                </motion.button>\n              ))}\n            </div>\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-6 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex-1 relative\">\n                <Input\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  placeholder=\"Ask the AI for more details...\"\n                  className=\"bg-[hsl(0,0%,10%)]/60 border-[hsl(330,100%,50%)]/20 text-white placeholder:text-gray-400 pr-20\"\n                />\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Mic className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Paperclip className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                </div>\n              </div>\n              <Button \n                onClick={handleSendMessage}\n                className=\"bg-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,60%)] text-white\"\n                size=\"icon\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Right Panel - Alert Details */}\n        <motion.div \n          initial={{ x: 50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-1/2 overflow-y-auto\"\n        >\n          <div className=\"p-6 space-y-6\">\n            {/* Alert Header */}\n            <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-400\" />\n                  <h2 className=\"text-xl font-bold text-white\">Suspicious Network Traffic Detected</h2>\n                </div>\n                <Button variant=\"outline\" className=\"border-green-500/20 text-green-400\">\n                  Bulk Auto-Triage\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                <div>\n                  <span className=\"text-xs text-gray-400\">Risk Score:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(330,100%,50%)]\">{alertData.riskScore}%</span>\n                    <Progress value={alertData.riskScore} className=\"flex-1\" />\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-xs text-gray-400\">AI Confidence:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(267,100%,67%)]\">{alertData.aiConfidence}%</span>\n                    <Progress value={alertData.aiConfidence} className=\"flex-1\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-400\">Alert ID:</span>\n                  <div className=\"text-white font-mono\">{alertData.alertId}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Detected:</span>\n                  <div className=\"text-white\">{alertData.detected}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Last Updated:</span>\n                  <div className=\"text-white\">{alertData.lastUpdated}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex space-x-2\">\n                  <Badge className={getSeverityColor(alertData.severity)}>\n                    {alertData.severity}\n                  </Badge>\n                  <Badge className={getStatusColor(alertData.status)}>\n                    {alertData.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                  <User className=\"w-4 h-4\" />\n                  <span>{alertData.assignedAnalyst}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Alert Summary */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400\">Source IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.sourceIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.destinationIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination Port:</span>\n                    <div className=\"text-white\">{alertData.destinationPort}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Protocol:</span>\n                    <div className=\"text-white\">{alertData.protocol}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Detected By:</span>\n                    <div className=\"text-white\">{alertData.detectedBy}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Action Taken:</span>\n                    <div className=\"text-white\">{alertData.actionTaken}</div>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <span className=\"text-gray-400\">Geo-Location:</span>\n                    <div className=\"text-white\">{alertData.geoLocation}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Impacted Entities */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Impacted Entities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {impactedEntities.map((entity, index) => {\n                    const Icon = entity.icon;\n                    return (\n                      <div key={index} className=\"flex items-center space-x-3 p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                        <Icon className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                        <div className=\"flex-1\">\n                          <div className=\"text-white font-medium\">{entity.name}</div>\n                          <div className=\"text-xs text-gray-400\">{entity.identifier}</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Indicators of Compromise */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Indicators of Compromise (IOCs)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {indicators.map((ioc) => (\n                    <div key={ioc.id} className=\"flex items-center justify-between p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant=\"outline\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                          {ioc.type}\n                        </Badge>\n                        <span className=\"text-white font-mono text-sm\">{ioc.value}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={ioc.confidence === 'High' ? 'bg-red-500/20 text-red-400' : 'bg-yellow-500/20 text-yellow-400'}>\n                          {ioc.confidence}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":29224},"client/src/pages/dashboard-old.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\ngsap.registerPlugin(ScrollTrigger);\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { ThreatVisualization } from \"@/components/ui/threat-visualization\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\n\ntype AlertSeverity = \"Critical\" | \"High\" | \"Medium\" | \"Low\";\ntype AlertStatus = \"Active\" | \"Investigating\" | \"Resolved\";\n\ninterface Alert {\n  id: string;\n  severity: AlertSeverity;\n  status: AlertStatus;\n  title: string;\n  assignedAnalyst: string;\n  time: string;\n  source: string;\n  confidence: number;\n  aiRecommendation: string;\n  rootCause?: string;\n}\n\ninterface ModelResponse {\n  id: string;\n  timestamp: string;\n  prediction: string;\n  confidence: number;\n  recommendation: string;\n  status: \"Processing\" | \"Complete\" | \"Failed\";\n  explainability: string;\n}\n\ninterface AIInsight {\n  type: \"trend\" | \"anomaly\" | \"prediction\" | \"correlation\";\n  title: string;\n  description: string;\n  confidence: number;\n  impact: \"High\" | \"Medium\" | \"Low\";\n}\n\ninterface WorkflowAlert {\n  id: string;\n  vendorName: string;\n  timestamp: string;\n  severity: AlertSeverity;\n  status: \"incoming\" | \"processing\" | \"predicted\" | \"completed\";\n  stage: \"vendor\" | \"ai_model\" | \"prediction\" | \"outcome\";\n  aiModel?: string;\n  confidence?: number;\n  processingTime?: number;\n  outcome?: \"TP\" | \"FP\" | \"Escalate\";\n  explanation?: string;\n  escalationReason?: string;\n  assignedAnalyst?: string;\n}\n\ninterface EscalationItem {\n  alertId: string;\n  reason: string;\n  assignedAnalyst: string;\n  timestamp: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n}\n\ninterface AutomationMetrics {\n  tpHandled: number;\n  fpDismissed: number;\n  totalProcessed: number;\n  avgProcessingTime: number;\n  confidence: {\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nconst mockAlerts: Alert[] = [\n  { \n    id: \"ALT-2024-001\", \n    severity: \"Critical\", \n    status: \"Active\", \n    title: \"Suspicious Network Traffic Detected\", \n    assignedAnalyst: \"Sarah Chen\", \n    time: \"2 min ago\", \n    source: \"NGFW\", \n    confidence: 95,\n    aiRecommendation: \"Immediate isolation of affected endpoints and traffic analysis\",\n    rootCause: \"Potential APT group activity based on TTP correlation\"\n  },\n  { \n    id: \"ALT-2024-002\", \n    severity: \"High\", \n    status: \"Investigating\", \n    title: \"Potential Data Exfiltration\", \n    assignedAnalyst: \"Marcus Johnson\", \n    time: \"15 min ago\", \n    source: \"AWS CloudTrail\", \n    confidence: 87,\n    aiRecommendation: \"Monitor data flows and check for unauthorized access patterns\",\n    rootCause: \"Compromised service account credentials detected\"\n  },\n  { \n    id: \"ALT-2024-003\", \n    severity: \"Medium\", \n    status: \"Active\", \n    title: \"Unauthorized Access Attempt\", \n    assignedAnalyst: \"AI Auto-Triage\", \n    time: \"32 min ago\", \n    source: \"Okta\", \n    confidence: 78,\n    aiRecommendation: \"Enable additional MFA verification and user behavior analysis\",\n    rootCause: \"Credential stuffing attack from known botnet infrastructure\"\n  },\n];\n\nconst mockModelResponses: ModelResponse[] = [\n  { \n    id: \"MR-001\", \n    timestamp: \"09:45:23\", \n    prediction: \"DDoS Attack Pattern\", \n    confidence: 94, \n    recommendation: \"Activate DDoS protection and rate limiting\", \n    status: \"Complete\",\n    explainability: \"Model detected anomalous traffic patterns matching known DDoS signatures. Key indicators: 300% traffic spike, unusual geographic distribution, repetitive request patterns.\"\n  },\n  { \n    id: \"MR-002\", \n    timestamp: \"09:43:12\", \n    prediction: \"Phishing Campaign\", \n    confidence: 89, \n    recommendation: \"Block sender domains and notify users\", \n    status: \"Complete\",\n    explainability: \"Email content analysis revealed suspicious URL patterns and social engineering tactics commonly used in phishing campaigns.\"\n  },\n];\n\nconst mockAIInsights: AIInsight[] = [\n  {\n    type: \"trend\",\n    title: \"Alert Volume Increasing\",\n    description: \"Critical alerts have increased by 23% over the past 48 hours, primarily from network security sources.\",\n    confidence: 87,\n    impact: \"High\"\n  },\n  {\n    type: \"prediction\",\n    title: \"Forecasted Peak Activity\",\n    description: \"AI predicts a 40% increase in security incidents during the next 7 days based on threat intelligence patterns.\",\n    confidence: 82,\n    impact: \"Medium\"\n  },\n  {\n    type: \"correlation\",\n    title: \"Geographic Correlation Detected\",\n    description: \"85% of high-severity alerts originate from similar geographic regions, suggesting coordinated threat activity.\",\n    confidence: 91,\n    impact: \"High\"\n  },\n  {\n    type: \"anomaly\",\n    title: \"Unusual User Behavior\",\n    description: \"Detected anomalous login patterns for 12 users outside normal business hours with geographic inconsistencies.\",\n    confidence: 76,\n    impact: \"Medium\"\n  }\n];\n\nconst mockWorkflowAlerts: WorkflowAlert[] = [\n  {\n    id: \"WF-001\",\n    vendorName: \"CrowdStrike\",\n    timestamp: \"10:45:23\",\n    severity: \"Critical\",\n    status: \"processing\",\n    stage: \"ai_model\",\n    aiModel: \"ThreatDetector v2.1\",\n    confidence: 94,\n    processingTime: 1.2\n  },\n  {\n    id: \"WF-002\", \n    vendorName: \"Splunk\",\n    timestamp: \"10:44:15\",\n    severity: \"High\",\n    status: \"completed\",\n    stage: \"outcome\",\n    outcome: \"TP\",\n    confidence: 89,\n    processingTime: 2.1,\n    explanation: \"Suspicious network traffic pattern matching known APT indicators\"\n  },\n  {\n    id: \"WF-003\",\n    vendorName: \"Microsoft Sentinel\",\n    timestamp: \"10:43:47\",\n    severity: \"Medium\",\n    status: \"completed\",\n    stage: \"outcome\", \n    outcome: \"FP\",\n    confidence: 76,\n    processingTime: 1.8,\n    explanation: \"Benign administrative activity misclassified due to timing correlation\"\n  },\n  {\n    id: \"WF-004\",\n    vendorName: \"Palo Alto\",\n    timestamp: \"10:42:33\",\n    severity: \"High\",\n    status: \"completed\",\n    stage: \"outcome\",\n    outcome: \"Escalate\",\n    escalationReason: \"Low confidence score requires human analysis\",\n    assignedAnalyst: \"Sarah Chen\",\n    confidence: 67,\n    processingTime: 3.4\n  },\n  {\n    id: \"WF-005\",\n    vendorName: \"AWS GuardDuty\", \n    timestamp: \"10:45:55\",\n    severity: \"Low\",\n    status: \"incoming\",\n    stage: \"vendor\"\n  }\n];\n\nconst mockEscalationQueue: EscalationItem[] = [\n  {\n    alertId: \"WF-004\",\n    reason: \"Low confidence score requires human analysis\",\n    assignedAnalyst: \"Sarah Chen\",\n    timestamp: \"10:42:33\",\n    status: \"pending\"\n  },\n  {\n    alertId: \"WF-007\",\n    reason: \"Potential zero-day exploit detected\",\n    assignedAnalyst: \"Marcus Johnson\",\n    timestamp: \"10:38:12\",\n    status: \"approved\"\n  },\n  {\n    alertId: \"WF-012\",\n    reason: \"Anomalous behavior pattern outside training data\",\n    assignedAnalyst: \"Lisa Wang\",\n    timestamp: \"10:35:44\",\n    status: \"pending\"\n  }\n];\n\nconst mockAutomationMetrics: AutomationMetrics = {\n  tpHandled: 847,\n  fpDismissed: 1203,\n  totalProcessed: 2156,\n  avgProcessingTime: 2.3,\n  confidence: {\n    high: 67,\n    medium: 28,\n    low: 5\n  }\n};\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [selectedAlert, setSelectedAlert] = useState<Alert | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [nlQuery, setNlQuery] = useState(\"\");\n  const [showWhatIf, setShowWhatIf] = useState(false);\n  const [selectedWorkflowAlert, setSelectedWorkflowAlert] = useState<WorkflowAlert | null>(null);\n  const [showEscalationModal, setShowEscalationModal] = useState(false);\n  const [escalationDecision, setEscalationDecision] = useState<\"approve\" | \"reject\" | \"assign\" | null>(null);\n  const [workflowAlerts, setWorkflowAlerts] = useState<WorkflowAlert[]>(mockWorkflowAlerts);\n  const [showLogoutOverlay, setShowLogoutOverlay] = useState(false);\n  \n  // GSAP refs\n  const headerRef = useRef<HTMLElement>(null);\n  const sidebarRef = useRef<HTMLElement>(null);\n  const mainRef = useRef<HTMLElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Dashboard entrance animations\n      gsap.fromTo(headerRef.current,\n        { y: -50, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.6, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(sidebarRef.current,\n        { x: -250, opacity: 0 },\n        { x: 0, opacity: 1, duration: 0.6, delay: 0.2, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(mainRef.current,\n        { opacity: 0, y: 20 },\n        { opacity: 1, y: 0, duration: 0.6, delay: 0.4, ease: \"power2.out\" }\n      );\n\n      // Stats cards animation\n      if (statsRef.current) {\n        gsap.fromTo(statsRef.current.children,\n          { scale: 0.9, opacity: 0 },\n          { scale: 1, opacity: 1, duration: 0.5, stagger: 0.1, delay: 0.6, ease: \"back.out(1.7)\" }\n        );\n      }\n    });\n\n    return () => ctx.revert();\n  }, [activeTab]);\n\n  // Simulate real-time workflow updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWorkflowAlerts(current => \n        current.map(alert => {\n          if (alert.status === \"incoming\" && Math.random() > 0.7) {\n            return { ...alert, status: \"processing\", stage: \"ai_model\", aiModel: \"ThreatDetector v2.1\" };\n          }\n          if (alert.status === \"processing\" && Math.random() > 0.8) {\n            const outcomes: Array<\"TP\" | \"FP\" | \"Escalate\"> = [\"TP\", \"FP\", \"Escalate\"];\n            const outcome = outcomes[Math.floor(Math.random() * outcomes.length)];\n            return { \n              ...alert, \n              status: \"completed\", \n              stage: \"outcome\", \n              outcome,\n              confidence: Math.floor(Math.random() * 40) + 60,\n              processingTime: Math.random() * 3 + 1\n            };\n          }\n          return alert;\n        })\n      );\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle logout with redirect\n  useEffect(() => {\n    if (showLogoutOverlay) {\n      const timer = setTimeout(() => {\n        setLocation(\"/\");\n      }, 2500);\n\n      return () => clearTimeout(timer);\n    }\n  }, [showLogoutOverlay, setLocation]);\n\n  const getSeverityColor = (severity: AlertSeverity) => {\n    switch (severity) {\n      case \"Critical\": return \"text-red-400 bg-red-400/10 border-red-400/20\";\n      case \"High\": return \"text-orange-400 bg-orange-400/10 border-orange-400/20\";\n      case \"Medium\": return \"text-yellow-400 bg-yellow-400/10 border-yellow-400/20\";\n      case \"Low\": return \"text-green-400 bg-green-400/10 border-green-400/20\";\n    }\n  };\n\n  const getStatusColor = (status: AlertStatus) => {\n    switch (status) {\n      case \"Active\": return \"text-red-400 bg-red-400/10\";\n      case \"Investigating\": return \"text-yellow-400 bg-yellow-400/10\";\n      case \"Resolved\": return \"text-green-400 bg-green-400/10\";\n    }\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"trend\": return <TrendingUp className=\"w-4 h-4\" />;\n      case \"prediction\": return <Brain className=\"w-4 h-4\" />;\n      case \"correlation\": return <Target className=\"w-4 h-4\" />;\n      case \"anomaly\": return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredAlerts = mockAlerts.filter(alert => \n    alert.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    alert.id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Enhanced Top Navigation Bar */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n            <span className=\"text-lg text-gray-300\">Command Center</span>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Actions */}\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n\n            {/* Dark/Light Mode Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\"\n            >\n              {isDarkMode ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n            </Button>\n\n            {/* System Status */}\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center\">3</span>\n            </Button>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex\">\n        {/* Enhanced Sidebar Navigation */}\n        <motion.aside \n          initial={{ x: -250, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-64 bg-[hsl(0,0%,8%)] border-r border-[hsl(330,100%,50%)]/20 min-h-screen\"\n        >\n          <div className=\"p-4 space-y-2\">\n            <nav className=\"space-y-2\">\n              <button\n                onClick={() => setActiveTab(\"dashboard\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"dashboard\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Dashboard</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"alerts\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"alerts\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alerts</span>\n                <span className=\"ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                  {mockAlerts.filter(a => a.status === \"Active\").length}\n                </span>\n              </button>\n\n              <button\n                onClick={() => setLocation(\"/investigation\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"investigations\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Eye className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Investigations</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"models\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"models\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Brain className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Model Responses</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"analytics\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"analytics\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <PieChart className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Analytics</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"workflow\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"workflow\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Workflow className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alert Pipeline</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"settings\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"settings\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Settings</span>\n              </button>\n\n              {/* Logout Button */}\n              <button\n                onClick={() => setShowLogoutOverlay(true)}\n                className=\"w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all text-red-400 hover:text-red-300 hover:bg-red-400/10\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Logout</span>\n              </button>\n            </nav>\n\n            {/* Data Quality Indicator */}\n            <div className=\"mt-8 p-3 bg-[hsl(0,0%,6%)] rounded-lg border border-[hsl(330,100%,50%)]/10\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-gray-400\">Data Quality</span>\n                <span className=\"text-xs text-[hsl(330,100%,50%)]\">96.8%</span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[96.8%]\"></div>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full mt-2 text-xs text-gray-400 hover:text-[hsl(330,100%,50%)]\">\n                <RefreshCw className=\"w-3 h-3 mr-1\" />\n                Auto-clean data\n              </Button>\n            </div>\n          </div>\n        </motion.aside>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 p-6 bg-gradient-to-br from-[hsl(215,28%,5%)] to-[hsl(215,28%,7%)]\">\n          {activeTab === \"dashboard\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">AI-Powered Analytics Dashboard</h1>\n\n                {/* Natural Language Query */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <MessageSquare className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-[hsl(330,100%,50%)]\" />\n                    <Input \n                      placeholder=\"Ask me anything about your data...\"\n                      value={nlQuery}\n                      onChange={(e) => setNlQuery(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20 w-80\"\n                    />\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setLocation(\"/ai-assistant\")}\n                    className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n                  >\n                    <MessageSquare className=\"w-4 h-4 mr-2\" />\n                    Ask AI\n                  </Button>\n                </div>\n              </div>\n\n\n                <ThreatVisualization/>\n\n              {/* SOC Operations Center */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold flex items-center glow-text\">\n                    <Shield className=\"w-6 h-6 text-[hsl(330,100%,50%)] mr-2\" />\n                    SOC Operations Center\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">Live Monitoring</span>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Real-time Threat Landscape */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Target className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                      Global Threat Intelligence\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-red-400\">127</div>\n                          <div className=\"text-xs text-gray-400\">Active Campaigns</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-orange-400\">2.8K</div>\n                          <div className=\"text-xs text-gray-400\">IOCs Tracked</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">94.2%</div>\n                          <div className=\"text-xs text-gray-400\">Detection Rate</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">APT Groups</span>\n                          <span className=\"text-red-400 font-medium\">23 Active</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Malware Families</span>\n                          <span className=\"text-orange-400 font-medium\">156 Tracked</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Zero-Days</span>\n                          <span className=\"text-yellow-400 font-medium\">4 Monitored</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Incident Response Metrics */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Activity className=\"w-5 h-5 text-green-400 mr-2\" />\n                      Incident Response KPIs\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Detection (MTTD)</span>\n                        <span className=\"text-green-400 font-bold\">2.3 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-green-400 h-2 rounded-full w-[92%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Response (MTTR)</span>\n                        <span className=\"text-[hsl(330,100%,50%)] font-bold\">8.7 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[85%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Containment (MTTC)</span>\n                        <span className=\"text-[hsl(267,100%,67%)] font-bold\">18.4 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(267,100%,67%)] h-2 rounded-full w-[78%]\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Threat Hunting Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-xl font-semibold mb-6 flex items-center glow-text\">\n                  <Eye className=\"w-6 h-6 text-[hsl(267,100%,67%)] mr-2\" />\n                  Advanced Threat Hunting & Analysis\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {/* MITRE ATT&CK Coverage */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">MITRE ATT&CK Coverage</h4>\n                    <div className=\"text-center mb-4\">\n                      <div className=\"text-3xl font-bold text-[hsl(330,100%,50%)]\">78%</div>\n                      <div className=\"text-xs text-gray-400\">Techniques Covered</div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {['Initial Access', 'Execution', 'Persistence', 'Privilege Escalation', 'Defense Evasion'].map((tactic, i) => (\n                        <div key={i} className=\"flex items-center justify-between text-xs\">\n                          <span className=\"text-gray-400\">{tactic}</span>\n                          <span className=\"text-[hsl(330,100%,50%)]\">{Math.floor(Math.random() * 30) + 70}%</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Behavioral Analytics */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(267,100%,67%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Behavioral Analytics</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">User Anomalies</span>\n                        <span className=\"text-orange-400 font-medium\">12</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">Entity Deviations</span>\n                        <span className=\"text-yellow-400 font-medium\">47</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">Process Anomalies</span>\n                        <span className=\"text-red-400 font-medium\">8</span>\n                      </div>\n                      <div className=\"mt-3 p-2 bg-[hsl(267,100%,67%)]/10 rounded border border-[hsl(267,100%,67%)]/20\">\n                        <div className=\"text-xs text-[hsl(267,100%,67%)] font-medium\">AI Confidence: 94.2%</div>\n                        <div className=\"text-xs text-gray-400\">Baseline accuracy improving</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Threat Attribution */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-green-400/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Threat Attribution</h4>\n                    <div className=\"space-y-2\">\n                      {[\n                        { actor: 'APT29', confidence: 87, attacks: 3 },\n                        { actor: 'Lazarus', confidence: 74, attacks: 2 },\n                        { actor: 'FIN7', confidence: 92, attacks: 1 },\n                        { actor: 'Unknown', confidence: 45, attacks: 8 }\n                      ].map((threat, i) => (\n                        <div key={i} className=\"p-2 bg-[hsl(0,0%,4%)]/60 rounded\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-xs font-medium text-white\">{threat.actor}</span>\n                            <span className=\"text-xs text-[hsl(330,100%,50%)]\">{threat.attacks} attacks</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex-1 bg-gray-700 rounded-full h-1\">\n                              <div \n                                className=\"bg-green-400 h-1 rounded-full\"\n                                style={{ width: `${threat.confidence}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-green-400\">{threat.confidence}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Hunt Results */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-orange-400/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Active Hunt Results</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-center mb-3\">\n                        <div className=\"text-2xl font-bold text-orange-400\">23</div>\n                        <div className=\"text-xs text-gray-400\">Active Hunts</div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {[\n                          { name: 'Living off the Land', findings: 7, status: 'active' },\n                          { name: 'Lateral Movement', findings: 3, status: 'investigating' },\n                          { name: 'Data Staging', findings: 12, status: 'completed' }\n                        ].map((hunt, i) => (\n                          <div key={i} className=\"p-2 bg-[hsl(0,0%,4%)]/60 rounded\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <span className=\"text-xs font-medium text-white\">{hunt.name}</span>\n                              <span className={`px-1 py-0.5 rounded text-xs ${\n                                hunt.status === 'active' ? 'bg-green-400/10 text-green-400' :\n                                hunt.status === 'investigating' ? 'bg-yellow-400/10 text-yellow-400' :\n                                'bg-gray-400/10 text-gray-400'\n                              }`}>\n                                {hunt.status}\n                              </span>\n                            </div>\n                            <div className=\"text-xs text-orange-400\">{hunt.findings} findings</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* AI-Generated Insights Panel */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.3 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center\">\n                    <Lightbulb className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    AI-Generated Security Insights\n                  </h3>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)]\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {mockAIInsights.map((insight, index) => (\n                    <motion.div \n                      key={index}\n                      initial={{ x: -20, opacity: 0 }}\n                      animate={{ x: 0, opacity: 1 }}\n                      transition={{ duration: 0.4, delay: 0.4 + index * 0.1 }}\n                      className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4 hover:border-[hsl(330,100%,50%)]/20 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getInsightIcon(insight.type)}\n                          <span className=\"text-sm font-medium\">{insight.title}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`px-2 py-1 rounded-full text-xs ${\n                            insight.impact === 'High' ? 'bg-red-400/10 text-red-400' :\n                            insight.impact === 'Medium' ? 'bg-yellow-400/10 text-yellow-400' :\n                            'bg-green-400/10 text-green-400'\n                          }`}>\n                            {insight.impact}\n                          </span>\n                          <span className=\"text-xs text-[hsl(330,100%,50%)]\">{insight.confidence}%</span>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-gray-300\">{insight.description}</p>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n\n              {/* Key Metrics with AI Suggestions */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.1 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">22.1K</div>\n                      <div className=\"text-sm text-gray-400\">Active Endpoints</div>\n                    </div>\n                    <Shield className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center justify-between\">\n                    <div className=\"flex-1 bg-gray-700 rounded-full h-2 mr-2\">\n                      <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-4/5\"></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">98.2%</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Suggestion: Monitor 3 offline endpoints\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.2 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-orange-400/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-orange-400\">1,406</div>\n                      <div className=\"text-sm text-gray-400\">Active Alerts</div>\n                    </div>\n                    <AlertTriangle className=\"w-8 h-8 text-orange-400\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center space-x-2\">\n                    <TrendingUp className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-xs text-red-400\">+23% (48h trend)</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Prediction: Peak expected in 6 hours\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.3 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">87%</div>\n                      <div className=\"text-sm text-gray-400\">AI Auto-Triage</div>\n                    </div>\n                    <Bot className=\"w-8 h-8 text-[hsl(267,100%,67%)]\" />\n                  </div>\n                  <div className=\"mt-4 text-xs text-green-400\">\n                    Model Accuracy: 94.2%\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Insight: False positive rate decreased\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.4 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-green-400/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-400\">2.3s</div>\n                      <div className=\"text-sm text-gray-400\">Avg Response Time</div>\n                    </div>\n                    <Clock className=\"w-8 h-8 text-green-400\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center space-x-2\">\n                    <TrendingDown className=\"w-4 h-4 text-green-400\" />\n                    <span className=\"text-xs text-green-400\">-15% improvement</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Optimization: 40% faster processing\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Interactive Charts Section */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* AI-Suggested Chart: Alert Trends */}\n                <motion.div \n                  initial={{ x: -50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.5 }}\n                  className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">Alert Trends & Forecasting</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs text-[hsl(267,100%,67%)] bg-[hsl(267,100%,67%)]/10 px-2 py-1 rounded\">\n                        AI Recommended\n                      </span>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)]\">\n                        <LineChart className=\"w-4 h-4 mr-2\" />\n                        Switch View\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"h-64 flex items-end space-x-2\">\n                    {Array.from({ length: 24 }, (_, i) => {\n                      const height = Math.random() * 80 + 20;\n                      const isPrediction = i > 16;\n                      return (\n                        <div key={i} className=\"flex-1 flex flex-col items-center\">\n                          <div \n                            className={`w-full rounded-sm ${\n                              isPrediction \n                                ? 'bg-gradient-to-t from-[hsl(267,100%,67%)]/40 to-[hsl(267,100%,67%)]/60 border-dashed border-t-2 border-[hsl(267,100%,67%)]' \n                                : 'bg-gradient-to-t from-[hsl(330,100%,50%)]/60 to-[hsl(267,100%,67%)]/60'\n                            }`}\n                            style={{ height: `${height}%` }}\n                          ></div>\n                          <span className=\"text-xs text-gray-400 mt-1\">{String(i).padStart(2, '0')}</span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"mt-4 flex items-center justify-between text-xs text-gray-400\">\n                    <span>Historical Data</span>\n                    <span className=\"text-[hsl(267,100%,67%)]\">AI Forecast (Next 7 hours)</span>\n                  </div>\n                </motion.div>\n\n                {/* Dynamic Risk Heatmap */}\n                <motion.div \n                  initial={{ x: 50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.6 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-4\">Real-time Risk Heatmap</h3>\n                  <div className=\"grid grid-cols-8 gap-1 h-48\">\n                    {Array.from({ length: 64 }, (_, i) => {\n                      const intensity = Math.random();\n                      return (\n                        <motion.div \n                          key={i}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: 0.7 + i * 0.01 }}\n                          className=\"rounded-sm cursor-pointer hover:scale-110 transition-transform\"\n                          style={{\n                            backgroundColor: intensity > 0.7 ? '#ef4444' : \n                                           intensity > 0.4 ? '#f97316' : \n                                           intensity > 0.2 ? '#eab308' : '#22c55e',\n                            opacity: 0.3 + intensity * 0.7\n                          }}\n                          title={`Risk Level: ${Math.round(intensity * 100)}%`}\n                        ></motion.div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"flex justify-between mt-4 text-xs text-gray-400\">\n                    <span>Low Risk</span>\n                    <span>High Risk</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Detected: 3 high-risk zones require attention\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === \"analytics\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">AI-Powered Analytics Command Center</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n                    <div className=\"w-2 h-2 bg-[hsl(330,100%,50%)] rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">AI Models Active</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    Neural Network Status\n                  </Button>\n                </div>\n              </div>\n\n              {/* Advanced AI Model Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 }}\n                className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\"\n              >\n                {/* AI Processing Center */}\n                <div className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Zap className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    Neural Processing Matrix\n                  </h3>\n                  \n                  {/* Real-time Processing Visualization */}\n                  <div className=\"relative h-64 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 overflow-hidden mb-4\">\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"relative\">\n                        {/* Central AI Core */}\n                        <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center animate-pulse\">\n                          <Brain className=\"w-10 h-10 text-white\" />\n                        </div>\n                        \n                        {/* Orbiting Processing Nodes */}\n                        {Array.from({ length: 8 }).map((_, i) => (\n                          <motion.div\n                            key={i}\n                            className=\"absolute w-3 h-3 bg-[hsl(330,100%,50%)] rounded-full\"\n                            style={{\n                              top: '50%',\n                              left: '50%',\n                              transformOrigin: `${60 + Math.cos(i * Math.PI / 4) * 20}px ${Math.sin(i * Math.PI / 4) * 20}px`,\n                            }}\n                            animate={{\n                              rotate: 360,\n                            }}\n                            transition={{\n                              duration: 4 + (i * 0.5),\n                              repeat: Infinity,\n                              ease: \"linear\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Data Stream Visualization */}\n                    <div className=\"absolute top-4 left-4 right-4\">\n                      <div className=\"grid grid-cols-12 gap-1 h-2\">\n                        {Array.from({ length: 48 }).map((_, i) => (\n                          <motion.div\n                            key={i}\n                            className=\"bg-[hsl(330,100%,50%)] rounded-full h-1\"\n                            animate={{\n                              opacity: [0.2, 1, 0.2],\n                              scaleY: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 2,\n                              delay: i * 0.1,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Processing Statistics */}\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">2.3M</div>\n                      <div className=\"text-xs text-gray-400\">Events/Hour</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">847ms</div>\n                      <div className=\"text-xs text-gray-400\">Avg Latency</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\">99.7%</div>\n                      <div className=\"text-xs text-gray-400\">Accuracy</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Model Performance Metrics */}\n                <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Target className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Model Performance\n                  </h3>\n                  \n                  <div className=\"space-y-4\">\n                    {/* Threat Detection Model */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Threat Detection</span>\n                        <span className=\"text-[hsl(330,100%,50%)] text-xs\">Active</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full w-[94%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">94%</span>\n                      </div>\n                    </div>\n\n                    {/* Anomaly Detection Model */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Anomaly Detection</span>\n                        <span className=\"text-green-400 text-xs\">Optimal</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-green-400 h-2 rounded-full w-[97%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">97%</span>\n                      </div>\n                    </div>\n\n                    {/* Behavioral Analysis */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Behavioral Analysis</span>\n                        <span className=\"text-yellow-400 text-xs\">Training</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-yellow-400 h-2 rounded-full w-[89%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">89%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Real-time Predictions */}\n                <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Eye className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    Live Predictions\n                  </h3>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-red-400/10 border border-red-400/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-red-400\">Critical Alert Expected</span>\n                        <span className=\"text-xs text-red-400\">92% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Next 18 minutes</div>\n                    </div>\n\n                    <div className=\"p-3 bg-orange-400/10 border border-orange-400/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-orange-400\">Traffic Spike</span>\n                        <span className=\"text-xs text-orange-400\">78% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Next 2.5 hours</div>\n                    </div>\n\n                    <div className=\"p-3 bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-[hsl(267,100%,67%)]\">System Optimization</span>\n                        <span className=\"text-xs text-[hsl(267,100%,67%)]\">85% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Recommended now</div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Threat Intelligence Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold flex items-center\">\n                    <Activity className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Advanced Threat Intelligence Matrix\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh Intel\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\"\n                      onClick={() => setShowWhatIf(!showWhatIf)}\n                    >\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Scenario Analysis\n                    </Button>\n                  </div>\n                </div>\n\n                {showWhatIf && (\n                  <motion.div \n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: \"auto\", opacity: 1 }}\n                    transition={{ duration: 0.4 }}\n                    className=\"mb-6 p-6 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\"\n                  >\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Target className=\"w-4 h-4 text-[hsl(267,100%,67%)] mr-2\" />\n                      AI-Powered Scenario Simulation\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">Threat Volume Multiplier</label>\n                        <Input \n                          type=\"range\" \n                          min=\"0.5\" \n                          max=\"5\" \n                          step=\"0.1\"\n                          defaultValue=\"1.0\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>0.5x</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 1.0x</span>\n                          <span>5.0x</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">Response Efficiency</label>\n                        <Input \n                          type=\"range\" \n                          min=\"50\" \n                          max=\"100\" \n                          defaultValue=\"87\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>50%</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 87%</span>\n                          <span>100%</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">AI Automation Level</label>\n                        <Input \n                          type=\"range\" \n                          min=\"0\" \n                          max=\"100\" \n                          defaultValue=\"73\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>0%</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 73%</span>\n                          <span>100%</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* AI Prediction Results */}\n                    <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"p-4 bg-[hsl(267,100%,67%)]/10 rounded border border-[hsl(267,100%,67%)]/20\">\n                        <div className=\"flex items-center mb-2\">\n                          <Brain className=\"w-4 h-4 text-[hsl(267,100%,67%)] mr-2\" />\n                          <span className=\"text-sm font-medium text-[hsl(267,100%,67%)]\">AI Prediction</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300\">\n                          With current settings: <span className=\"text-[hsl(330,100%,50%)]\">94% efficiency</span> expected, \n                          handling <span className=\"text-green-400\">2.3k alerts/hour</span> with <span className=\"text-yellow-400\">1.8s avg response</span>\n                        </p>\n                      </div>\n                      \n                      <div className=\"p-4 bg-[hsl(330,100%,50%)]/10 rounded border border-[hsl(330,100%,50%)]/20\">\n                        <div className=\"flex items-center mb-2\">\n                          <AlertTriangle className=\"w-4 h-4 text-[hsl(330,100%,50%)] mr-2\" />\n                          <span className=\"text-sm font-medium text-[hsl(330,100%,50%)]\">Risk Assessment</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300\">\n                          Risk level: <span className=\"text-green-400\">Low</span> | \n                          False positive rate: <span className=\"text-yellow-400\">12%</span> | \n                          Coverage: <span className=\"text-[hsl(330,100%,50%)]\">98.7%</span>\n                        </p>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Threat Intelligence Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Geographic Threat Distribution</h4>\n                    <div className=\"relative h-32 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 overflow-hidden\">\n                      {/* Simplified world map visualization */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"relative w-24 h-16 opacity-30\">\n                          {/* Threat hotspots */}\n                          {[\n                            { x: '20%', y: '30%', intensity: 'high' },\n                            { x: '60%', y: '40%', intensity: 'medium' },\n                            { x: '80%', y: '60%', intensity: 'critical' },\n                            { x: '15%', y: '70%', intensity: 'low' }\n                          ].map((spot, i) => (\n                            <motion.div\n                              key={i}\n                              className={`absolute w-3 h-3 rounded-full ${\n                                spot.intensity === 'critical' ? 'bg-red-400' :\n                                spot.intensity === 'high' ? 'bg-orange-400' :\n                                spot.intensity === 'medium' ? 'bg-yellow-400' : 'bg-green-400'\n                              }`}\n                              style={{ left: spot.x, top: spot.y }}\n                              animate={{\n                                scale: [1, 1.5, 1],\n                                opacity: [0.6, 1, 0.6]\n                              }}\n                              transition={{\n                                duration: 2,\n                                delay: i * 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-xs space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Asia-Pacific:</span>\n                        <span className=\"text-red-400\">High Risk</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Europe:</span>\n                        <span className=\"text-yellow-400\">Medium Risk</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Americas:</span>\n                        <span className=\"text-green-400\">Low Risk</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Attack Vector Analysis</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { vector: 'Phishing', percentage: 34, trend: 'up' },\n                        { vector: 'Malware', percentage: 28, trend: 'down' },\n                        { vector: 'Ransomware', percentage: 19, trend: 'up' },\n                        { vector: 'DDoS', percentage: 19, trend: 'stable' }\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-xs text-gray-300\">{item.vector}</span>\n                            {item.trend === 'up' && <TrendingUp className=\"w-3 h-3 text-red-400\" />}\n                            {item.trend === 'down' && <TrendingDown className=\"w-3 h-3 text-green-400\" />}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-16 bg-gray-700 rounded-full h-1\">\n                              <div \n                                className=\"bg-[hsl(330,100%,50%)] h-1 rounded-full\"\n                                style={{ width: `${item.percentage}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-[hsl(330,100%,50%)] font-medium w-8\">{item.percentage}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">AI Model Confidence</h4>\n                    <div className=\"relative h-32\">\n                      {/* Confidence meter visualization */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"relative w-20 h-20\">\n                          <motion.div\n                            className=\"w-full h-full rounded-full border-4 border-gray-700\"\n                            style={{\n                              background: `conic-gradient(from 0deg, hsl(330,100%,50%) 0%, hsl(267,100%,67%) ${94 * 3.6}deg, hsl(0,0%,20%) ${94 * 3.6}deg)`\n                            }}\n                          />\n                          <div className=\"absolute inset-2 bg-[hsl(0,0%,8%)] rounded-full flex items-center justify-center\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold text-[hsl(330,100%,50%)]\">94%</div>\n                              <div className=\"text-xs text-gray-400\">Confidence</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-xs space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Model Accuracy:</span>\n                        <span className=\"text-green-400\">Excellent</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Data Quality:</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">96.8%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Predictive Alerts</h4>\n                    <div className=\"space-y-2\">\n                      {[\n                        { type: 'Infrastructure Anomaly', time: '12 min', confidence: 87, severity: 'medium' },\n                        { type: 'Credential Compromise', time: '28 min', confidence: 92, severity: 'high' },\n                        { type: 'Data Exfiltration Risk', time: '1.2 hr', confidence: 78, severity: 'critical' }\n                      ].map((alert, i) => (\n                        <div key={i} className={`p-2 rounded-lg border ${\n                          alert.severity === 'critical' ? 'bg-red-400/10 border-red-400/20' :\n                          alert.severity === 'high' ? 'bg-orange-400/10 border-orange-400/20' :\n                          'bg-yellow-400/10 border-yellow-400/20'\n                        }`}>\n                          <div className=\"text-xs font-medium\">{alert.type}</div>\n                          <div className=\"flex justify-between items-center mt-1\">\n                            <span className=\"text-xs text-gray-400\">in {alert.time}</span>\n                            <span className={`text-xs ${\n                              alert.severity === 'critical' ? 'text-red-400' :\n                              alert.severity === 'high' ? 'text-orange-400' :\n                              'text-yellow-400'\n                            }`}>\n                              {alert.confidence}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Analytics Tools */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.3 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-lg font-semibold mb-6 flex items-center\">\n                  <Workflow className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                  Advanced Analytics & Automation Suite\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {/* Custom Query Builder */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/30 transition-colors\">\n                    <MessageSquare className=\"w-8 h-8 text-[hsl(330,100%,50%)] mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Natural Language Queries</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Ask complex security questions in plain English</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-[hsl(330,100%,50%)]/20\">\n                      Launch Query Builder\n                    </Button>\n                  </div>\n\n                  {/* Machine Learning Insights */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(267,100%,67%)]/10 hover:border-[hsl(267,100%,67%)]/30 transition-colors\">\n                    <Brain className=\"w-8 h-8 text-[hsl(267,100%,67%)] mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">ML Pattern Recognition</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Discover hidden patterns in your security data</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-[hsl(267,100%,67%)]/20\">\n                      Analyze Patterns\n                    </Button>\n                  </div>\n\n                  {/* Automated Response Orchestration */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-green-400/10 hover:border-green-400/30 transition-colors\">\n                    <Zap className=\"w-8 h-8 text-green-400 mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Response Orchestration</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Automate complex incident response workflows</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-green-400/20\">\n                      Configure Workflows\n                    </Button>\n                  </div>\n\n                  {/* Advanced Report Generation */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-orange-400/10 hover:border-orange-400/30 transition-colors\">\n                    <FileText className=\"w-8 h-8 text-orange-400 mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Executive Reporting</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Generate C-suite ready security reports instantly</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-orange-400/20\">\n                      Generate Report\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {activeTab === \"alerts\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">Smart Alert Management</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <Input \n                      placeholder=\"Search alerts...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20\"\n                    />\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    AI Filter\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n                    <Bot className=\"w-4 h-4 mr-2\" />\n                    Bulk Auto-Triage\n                  </Button>\n                </div>\n              </div>\n\n              {/* Enhanced Alerts Table */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl overflow-hidden\"\n              >\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-[hsl(0,0%,6%)] border-b border-[hsl(330,100%,50%)]/20\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Alert ID</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Title</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Severity</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Assigned Analyst</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">AI Recommendation</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredAlerts.map((alert, index) => (\n                        <motion.tr \n                          key={alert.id}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          className=\"border-b border-[hsl(330,100%,50%)]/10 hover:bg-[hsl(0,0%,6%)]/50 transition-colors\"\n                        >\n                          <td className=\"p-4 text-sm font-mono text-[hsl(330,100%,50%)]\">{alert.id}</td>\n                          <td className=\"p-4 text-sm\">{alert.title}</td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(alert.severity)}`}>\n                              {alert.severity}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(alert.status)}`}>\n                              {alert.status}\n                            </span>\n                          </td>\n                          <td className=\"p-4 text-sm text-gray-300\">{alert.assignedAnalyst}</td>\n                          <td className=\"p-4 text-sm text-[hsl(267,100%,67%)] max-w-xs truncate\">\n                            {alert.aiRecommendation}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setSelectedAlert(alert)}\n                                className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-[hsl(267,100%,67%)] hover:bg-[hsl(267,100%,67%)]/20\"\n                              >\n                                <Bot className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </motion.tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {activeTab === \"models\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <h1 className=\"text-3xl font-bold glow-text\">AI Model Responses & Explainability</h1>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {mockModelResponses.map((response, index) => (\n                  <motion.div \n                    key={response.id}\n                    initial={{ y: 20, opacity: 0 }}\n                    animate={{ y: 0, opacity: 1 }}\n                    transition={{ duration: 0.6, delay: index * 0.2 }}\n                    className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Brain className=\"w-5 h-5 text-[hsl(267,100%,67%)]\" />\n                        <span className=\"font-mono text-sm text-[hsl(330,100%,50%)]\">{response.id}</span>\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        response.status === 'Complete' ? 'bg-green-400/10 text-green-400' :\n                        response.status === 'Processing' ? 'bg-yellow-400/10 text-yellow-400' :\n                        'bg-red-400/10 text-red-400'\n                      }`}>\n                        {response.status}\n                      </span>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Prediction:</span>\n                        <p className=\"text-white font-medium\">{response.prediction}</p>\n                      </div>\n\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Confidence Score:</span>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                            <div \n                              className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full transition-all duration-1000\"\n                              style={{ width: `${response.confidence}%` }}\n                            ></div>\n                          </div>\n                          <span className=\"text-sm text-[hsl(330,100%,50%)] font-medium\">{response.confidence}%</span>\n                        </div>\n                      </div>\n\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Recommendation:</span>\n                        <p className=\"text-gray-300 text-sm\">{response.recommendation}</p>\n                      </div>\n\n                      {/* XAI Explainability Section */}\n                      <div className=\"border-t border-gray-700 pt-4\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Lightbulb className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                          <span className=\"text-xs text-gray-400\">AI Explanation (XAI):</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300 bg-[hsl(0,0%,6%)]/60 p-3 rounded border border-[hsl(330,100%,50%)]/10\">\n                          {response.explainability}\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-xs text-gray-400 pt-2\">\n                        <span>Timestamp: {response.timestamp}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\">\n                          <FileText className=\"w-3 h-3 mr-1\" />\n                          Export Analysis\n                        </Button>\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === \"workflow\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">Alert Processing Pipeline</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">Pipeline Active</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh Pipeline\n                  </Button>\n                </div>\n              </div>\n\n              {/* Real-Time Alert Stream & Workflow */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                {/* Left Sidebar - Incoming Alerts Stream */}\n                <motion.div \n                  initial={{ x: -50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.1 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Activity className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Live Alert Stream\n                  </h3>\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {workflowAlerts.slice(0, 8).map((alert, index) => (\n                      <motion.div \n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.4, delay: index * 0.1 }}\n                        className={`p-3 rounded-lg border cursor-pointer transition-all hover:scale-105 ${\n                          selectedWorkflowAlert?.id === alert.id \n                            ? 'bg-[hsl(330,100%,50%)]/20 border-[hsl(330,100%,50%)]/40' \n                            : 'bg-[hsl(0,0%,6%)]/60 border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/20'\n                        }`}\n                        onClick={() => setSelectedWorkflowAlert(alert)}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-xs font-mono text-[hsl(330,100%,50%)]\">{alert.id}</span>\n                          <span className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(alert.severity)}`}>\n                            {alert.severity}\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-gray-300 mb-1\">{alert.vendorName}</div>\n                        <div className=\"text-xs text-gray-400\">{alert.timestamp}</div>\n                        <div className=\"flex items-center mt-2\">\n                          <div className={`w-2 h-2 rounded-full mr-2 ${\n                            alert.status === 'incoming' ? 'bg-blue-400' :\n                            alert.status === 'processing' ? 'bg-purple-400 animate-pulse' :\n                            'bg-green-400'\n                          }`}></div>\n                          <span className=\"text-xs text-gray-400 capitalize\">{alert.status}</span>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </motion.div>\n\n                {/* Center - Workflow Pipeline Visualization */}\n                <motion.div \n                  initial={{ y: 20, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.2 }}\n                  className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-6\">Processing Pipeline</h3>\n\n                  {/* Pipeline Stages */}\n                  <div className=\"relative\">\n                    <div className=\"flex items-center justify-between mb-8\">\n                      {/* Vendor Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center mb-2 relative\">\n                          <Shield className=\"w-8 h-8 text-white\" />\n                          {selectedWorkflowAlert?.stage === 'vendor' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-blue-400 rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className=\"text-sm font-medium text-blue-400\">Vendor</span>\n                        <span className=\"text-xs text-gray-400\">Detection</span>\n                      </motion.div>\n\n                      {/* Animated Connector */}\n                      <div className=\"flex-1 mx-4 relative\">\n                        <div className=\"h-1 bg-gray-600 rounded-full\">\n                          <motion.div \n                            className=\"h-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\"\n                            animate={{ width: selectedWorkflowAlert?.stage !== 'vendor' ? '100%' : '0%' }}\n                            transition={{ duration: 0.8 }}\n                          />\n                        </div>\n                        <ArrowRight className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      </div>\n\n                      {/* AI Model Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center mb-2 relative\">\n                          <Brain className=\"w-8 h-8 text-white\" />\n                          {selectedWorkflowAlert?.stage === 'ai_model' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-purple-400 rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className=\"text-sm font-medium text-purple-400\">AI Model</span>\n                        <span className=\"text-xs text-gray-400\">Analysis</span>\n                      </motion.div>\n\n                      {/* Animated Connector */}\n                      <div className=\"flex-1 mx-4 relative\">\n                        <div className=\"h-1 bg-gray-600 rounded-full\">\n                          <motion.div \n                            className=\"h-1 bg-gradient-to-r from-purple-500 to-green-500 rounded-full\"\n                            animate={{ width: selectedWorkflowAlert?.stage === 'outcome' ? '100%' : '0%' }}\n                            transition={{ duration: 0.8 }}\n                          />\n                        </div>\n                        <ArrowRight className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      </div>\n\n                      {/* Outcome Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className={`w-16 h-16 rounded-full flex items-center justify-center mb-2 relative ${\n                          selectedWorkflowAlert?.outcome === 'TP' ? 'bg-gradient-to-r from-green-500 to-green-600' :\n                          selectedWorkflowAlert?.outcome === 'FP' ? 'bg-gradient-to-r from-orange-500 to-orange-600' :\n                          selectedWorkflowAlert?.outcome === 'Escalate' ? 'bg-gradient-to-r from-red-500 to-red-600' :\n                          'bg-gradient-to-r from-gray-500 to-gray-600'\n                        }`}>\n                          {selectedWorkflowAlert?.outcome === 'TP' && <CheckCircle className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.outcome === 'FP' && <X className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.outcome === 'Escalate' && <AlertTriangle className=\"w-8 h-8 text-white\" />}\n                          {!selectedWorkflowAlert?.outcome && <Target className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.stage === 'outcome' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-white rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className={`text-sm font-medium ${\n                          selectedWorkflowAlert?.outcome === 'TP' ? 'text-green-400' :\n                          selectedWorkflowAlert?.outcome === 'FP' ? 'text-orange-400' :\n                          selectedWorkflowAlert?.outcome === 'Escalate' ? 'text-red-400' :\n                          'text-gray-400'\n                        }`}>\n                          {selectedWorkflowAlert?.outcome || 'Outcome'}\n                        </span>\n                        <span className=\"text-xs text-gray-400\">Decision</span>\n                      </motion.div>\n                    </div>\n\n                    {/* Alert Details Panel */}\n                    {selectedWorkflowAlert && (\n                      <motion.div \n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg p-4\"\n                      >\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"text-xs text-gray-400\">Alert ID:</span>\n                            <p className=\"text-sm font-mono text-[hsl(330,100%,50%)]\">{selectedWorkflowAlert.id}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-xs text-gray-400\">Vendor:</span>\n                            <p className=\"text-sm text-white\">{selectedWorkflowAlert.vendorName}</p>\n                          </div>\n                          {selectedWorkflowAlert.aiModel && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">AI Model:</span>\n                              <p className=\"text-sm text-purple-400\">{selectedWorkflowAlert.aiModel}</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.confidence && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Confidence:</span>\n                              <p className=\"text-sm text-[hsl(330,100%,50%)]\">{selectedWorkflowAlert.confidence}%</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.processingTime && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Processing Time:</span>\n                              <p className=\"text-sm text-gray-300\">{selectedWorkflowAlert.processingTime.toFixed(1)}s</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.outcome && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Final Outcome:</span>\n                              <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${\n                                selectedWorkflowAlert.outcome === 'TP' ? 'bg-green-400/10 text-green-400' :\n                                selectedWorkflowAlert.outcome === 'FP' ? 'bg-orange-400/10 text-orange-400' :\n                                'bg-red-400/10 text-red-400'\n                              }`}>\n                                {selectedWorkflowAlert.outcome === 'TP' ? 'True Positive' :\n                                 selectedWorkflowAlert.outcome === 'FP' ? 'False Positive' :\n                                 'Escalated'}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n\n                        {selectedWorkflowAlert.explanation && (\n                          <div className=\"mt-4 border-t border-gray-700 pt-3\">\n                            <span className=\"text-xs text-gray-400\">AI Explanation:</span>\n                            <p className=\"text-sm text-gray-300 mt-1\">{selectedWorkflowAlert.explanation}</p>\n                          </div>\n                        )}\n\n                        {selectedWorkflowAlert.outcome === 'Escalate' && (\n                          <div className=\"mt-4 flex space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-green-400/20 text-green-400 hover:bg-green-400/10\"\n                              onClick={() => setShowEscalationModal(true)}\n                            >\n                              <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                              Approve\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-red-400/20 text-red-400 hover:bg-red-400/10\"\n                            >\n                              <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                              Reject\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\"\n                            >\n                              <UserCheck className=\"w-4 h-4 mr-2\" />\n                              Assign\n                            </Button>\n                          </div>\n                        )}\n                      </motion.div>\n                    )}\n                  </div>\n                </motion.div>\n\n                {/* Right Sidebar - Automation Metrics & Escalation Queue */}\n                <motion.div \n                  initial={{ x: 50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.3 }}\n                  className=\"space-y-6\"\n                >\n                  {/* Automation Metrics */}\n                  <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Bot className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                      Automation Status\n                    </h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">TP Handled</span>\n                        <span className=\"text-green-400 font-medium\">{mockAutomationMetrics.tpHandled}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">FP Dismissed</span>\n                        <span className=\"text-orange-400 font-medium\">{mockAutomationMetrics.fpDismissed}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">Avg Processing</span>\n                        <span className=\"text-[hsl(330,100%,50%)] font-medium\">{mockAutomationMetrics.avgProcessingTime}s</span>\n                      </div>\n\n                      <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                        <span className=\"text-sm text-gray-400 mb-2 block\">Confidence Distribution</span>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-400\">High (&gt;80%)</span>\n                            <span className=\"text-green-400 text-xs\">{mockAutomationMetrics.confidence.high}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                            <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: `${mockAutomationMetrics.confidence.high}%` }}></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Escalation Queue */}\n                  <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-400 mr-2\" />\n                      Escalation Queue\n                    </h3>\n                    <div className=\"space-y-3 max-h-48 overflow-y-auto\">\n                      {mockEscalationQueue.map((item, index) => (\n                        <motion.div \n                          key={item.alertId}\n                          initial={{ opacity: 0, x: 20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          className=\"p-3 bg-[hsl(0,0%,6%)]/60 border border-red-400/20 rounded-lg\"\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-xs font-mono text-[hsl(330,100%,50%)]\">{item.alertId}</span>\n                            <span className={`px-2 py-1 rounded-full text-xs ${\n                              item.status === 'pending' ? 'bg-yellow-400/10 text-yellow-400' :\n                              item.status === 'approved' ? 'bg-green-400/10 text-green-400' :\n                              'bg-red-400/10 text-red-400'\n                            }`}>\n                              {item.status}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-gray-300 mb-1\">{item.reason}</p>\n                          <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                            <span>{item.assignedAnalyst}</span>\n                            <span>{item.timestamp}</span>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* AI & Analyst Metrics Panel */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.4 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-lg font-semibold mb-6\">Pipeline Performance Analytics</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Outcome Distribution */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Outcome Distribution</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-green-400\">True Positives</span>\n                        <span className=\"text-green-400 font-medium\">42%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-green-400 h-2 rounded-full w-[42%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-orange-400\">False Positives</span>\n                        <span className=\"text-orange-400 font-medium\">31%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-orange-400 h-2 rounded-full w-[31%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-red-400\">Escalated</span>\n                        <span className=\"text-red-400 font-medium\">27%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-red-400 h-2 rounded-full w-[27%]\"></div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Processing Time Comparison */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Avg Handling Time</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-lg p-3\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm text-[hsl(267,100%,67%)]\">Automated</span>\n                          <span className=\"text-[hsl(267,100%,67%)] font-medium\">2.3s</span>\n                        </div>\n                        <div className=\"text-xs text-gray-400\">AI Processing</div>\n                      </div>\n\n                      <div className=\"bg-[hsl(330,100%,50%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-lg p-3\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm text-[hsl(330,100%,50%)]\">Manual</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">18.7m</span>\n                        </div>\n                        <div className=\"text-xs text-gray-400\">Analyst Review</div>\n                      </div>\n\n                      <div className=\"text-xs text-gray-400 text-center\">\n                        87% faster with AI automation\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Vendor Performance */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Top Alert Sources</h4>\n                    <div className=\"space-y-2\">\n                      {['CrowdStrike', 'Splunk', 'Microsoft Sentinel', 'Palo Alto', 'AWS GuardDuty'].map((vendor, index) => (\n                        <div key={vendor} className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-300\">{vendor}</span>\n                          <span className=\"text-xs text-[hsl(330,100%,50%)]\">{Math.floor(Math.random() * 200) + 50}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n        </main>\n      </div>\n\n      {/* Enhanced Alert Detail Modal with Root Cause Analysis */}\n      {selectedAlert && (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n          onClick={() => setSelectedAlert(null)}\n        >\n          <motion.div \n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20 rounded-xl p-6 max-w-4xl w-full max-h-[80vh] overflow-y-auto\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-bold glow-text\">Alert Investigation Center</h2>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setSelectedAlert(null)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                ✕\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Alert ID:</span>\n                    <p className=\"text-[hsl(330,100%,50%)] font-mono\">{selectedAlert.id}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Source:</span>\n                    <p className=\"text-white\">{selectedAlert.source}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <span className=\"text-sm text-gray-400\">Title:</span>\n                  <p className=\"text-white font-medium\">{selectedAlert.title}</p>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Severity:</span>\n                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium border mt-1 ${getSeverityColor(selectedAlert.severity)}`}>\n                      {selectedAlert.severity}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Status:</span>\n                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium mt-1 ${getStatusColor(selectedAlert.status)}`}>\n                      {selectedAlert.status}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Confidence:</span>\n                    <p className=\"text-[hsl(330,100%,50%)] font-medium\">{selectedAlert.confidence}%</p>\n                  </div>\n                </div>\n\n                <div>\n                  <span className=\"text-sm text-gray-400\">Assigned Analyst:</span>\n                  <p className=\"text-white\">{selectedAlert.assignedAnalyst}</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* AI Root Cause Analysis */}\n                <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(267,100%,67%)]/20 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Brain className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                    <span className=\"text-sm font-semibold text-[hsl(267,100%,67%)]\">AI Root Cause Analysis</span>\n                  </div>\n                  <p className=\"text-sm text-gray-300\">{selectedAlert.rootCause}</p>\n                </div>\n\n                {/* AI Recommendation */}\n                <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Lightbulb className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n                    <span className=\"text-sm font-semibold text-[hsl(330,100%,50%)]\">AI Recommendation</span>\n                  </div>\n                  <p className=\"text-sm text-gray-300\">{selectedAlert.aiRecommendation}</p>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Isolate\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n                    <Bot className=\"w-4 h-4 mr-2\" />\n                    Auto-Remediate\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n\n      {/* Modal for Escalation Decision */}\n      {showEscalationModal && (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"fixed inset-0 bg-black/70 backdrop-blur-lg z-50 flex items-center justify-center p-4\"\n          onClick={() => setShowEscalationModal(false)}\n        >\n          <motion.div \n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20 rounded-xl p-8 max-w-2xl w-full\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <h3 className=\"text-xl font-bold mb-6 text-center glow-text\">Escalation Action</h3>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-300 text-center\">Choose an action for the escalated alert.</p>\n              <div className=\"flex justify-center space-x-4 mt-6\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-green-400/20 text-green-400 hover:bg-green-400/10\"\n                  onClick={() => { setEscalationDecision(\"approve\"); setShowEscalationModal(false); }}\n                >\n                  <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                  Approve & Assign\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-red-400/20 text-red-400 hover:bg-red-400/10\"\n                  onClick={() => { setEscalationDecision(\"reject\"); setShowEscalationModal(false); }}\n                >\n                  <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                  Reject\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n\n      {/* Logout Overlay */}\n      <AnimatePresence>\n        {showLogoutOverlay && (\n          <motion.div \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-md z-[9999] flex items-center justify-center\"\n            style={{\n              background: \"linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(51,0,51,0.4) 50%, rgba(0,0,0,0.8) 100%)\"\n            }}\n          >\n            <motion.div \n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              className=\"text-center\"\n            >\n              <motion.h1 \n                initial={{ y: 20 }}\n                animate={{ y: 0 }}\n                className=\"text-6xl font-bold mb-4 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] bg-clip-text text-transparent\"\n                style={{\n                  textShadow: \"0 0 30px rgba(255,20,147,0.5), 0 0 60px rgba(138,43,226,0.3)\"\n                }}\n              >\n                See You Soon!\n              </motion.h1>\n              \n              <motion.div \n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.3 }}\n                className=\"flex items-center justify-center space-x-2 mb-6\"\n              >\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-6 h-6 border-2 border-[hsl(330,100%,50%)] border-t-transparent rounded-full\"\n                />\n                <span className=\"text-gray-300\">Logging out securely...</span>\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: [0, 1, 0] }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n                className=\"text-[hsl(267,100%,67%)] text-lg\"\n              >\n                ✨ Thank you for using Alpha Platform ✨\n              </motion.div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":119866},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/sections/header\";\nimport Hero from \"@/components/sections/hero\";\nimport TrustedBy from \"@/components/sections/trusted-by\";\nimport DashboardShowcase from \"@/components/sections/dashboard-showcase\";\nimport Integrations from \"@/components/sections/integrations\";\nimport Testimonials from \"@/components/sections/testimonials\";\nimport FAQ from \"@/components/sections/faq\";\nimport Footer from \"@/components/sections/footer\";\nimport DemoRequestDialog from \"@/components/demo-request-dialog\";\nimport LoginDialog from \"@/components/login-dialog\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [showDemoDialog, setShowDemoDialog] = useState(false);\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(220,15%,5%)] text-white\">\n      <DemoRequestDialog open={showDemoDialog} onOpenChange={setShowDemoDialog} />\n      <LoginDialog open={showLoginDialog} onOpenChange={setShowLoginDialog} />\n      <Header onRequestDemo={() => setShowDemoDialog(true)} />\n      <Hero onRequestDemo={() => setShowDemoDialog(true)} />\n      <TrustedBy />\n      <DashboardShowcase />\n      <div className=\"py-20 px-6 relative\">\n        {/* If your .gradient-glow uses old colors, consider updating it to a pink/navy glow */}\n        <div className=\"absolute inset-0 gradient-glow\"></div>\n        <div className=\"container mx-auto text-center relative z-10\">\n          <button\n            onClick={() => setShowDemoDialog(true)}\n            className=\"bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] text-white px-8 py-4 rounded-lg font-semibold text-lg glow-button animate-pulse-glow hover:opacity-90\"\n          >\n            Request a Demo\n          </button>\n        </div>\n      </div>\n      <Integrations />\n      <Testimonials />\n      <FAQ />\n      <Footer />\n    </div>\n  );\n}","size_bytes":2022},"client/src/pages/investigation-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Shield, Brain, AlertTriangle, CheckCircle, Clock, Eye, Download, RefreshCw, Activity, Users, Server, Network, FileText, Target, Zap, TrendingUp, BarChart3, Settings, Bell, User, Search, Filter, Calendar, MessageSquare, ExternalLink, ChevronDown, ChevronRight, Play, Pause } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { ThreatVisualization } from \"@/components/ui/threat-visualization\";\nimport InvestigationKnowledgeGraph from \"@/components/ui/investigation-knowledge-graph\";\n\ninterface TimelineEvent {\n  id: string;\n  timestamp: string;\n  type: \"detection\" | \"analysis\" | \"investigation\" | \"containment\" | \"closed\";\n  status: \"completed\" | \"in_progress\" | \"pending\";\n  title: string;\n  description: string;\n  user?: string;\n}\n\ninterface KnowledgeNode {\n  id: string;\n  type: \"asset\" | \"user\" | \"ip\" | \"process\";\n  label: string;\n  x: number;\n  y: number;\n  connections: string[];\n  risk: \"high\" | \"medium\" | \"low\";\n}\n\nexport default function Investigation() {\n  const [, setLocation] = useLocation();\n  const [selectedTimelineEvent, setSelectedTimelineEvent] = useState<string | null>(null);\n  const [knowledgeGraphExpanded, setKnowledgeGraphExpanded] = useState(false);\n  const [animationNodes, setAnimationNodes] = useState<{ id: string; x: number; y: number }[]>([]);\n\n  const timelineEvents: TimelineEvent[] = [\n    {\n      id: \"1\",\n      timestamp: \"2024-01-15 09:15:23\",\n      type: \"detection\",\n      status: \"completed\",\n      title: \"Alert Raised\",\n      description: \"SLA compliance: On Track\",\n      user: \"System\"\n    },\n    {\n      id: \"2\", \n      timestamp: \"2024-01-15 09:16:45\",\n      type: \"analysis\",\n      status: \"completed\",\n      title: \"Acknowledged\",\n      description: \"Analyst review initiated\",\n      user: \"John Doe\"\n    },\n    {\n      id: \"3\",\n      timestamp: \"2024-01-15 09:25:12\",\n      type: \"investigation\",\n      status: \"in_progress\",\n      title: \"Investigation Completed\",\n      description: \"Threat analysis in progress\",\n      user: \"Sarah Chen\"\n    },\n    {\n      id: \"4\",\n      timestamp: \"2024-01-15 10:30:00\",\n      type: \"containment\",\n      status: \"pending\",\n      title: \"Contained\",\n      description: \"Mitigation actions pending\",\n      user: \"Marcus Johnson\"\n    },\n    {\n      id: \"5\",\n      timestamp: \"2024-01-15 11:00:00\",\n      type: \"closed\",\n      status: \"pending\",\n      title: \"Closed\",\n      description: \"Resolution pending\",\n      user: \"AI System\"\n    }\n  ];\n\n  const knowledgeNodes: KnowledgeNode[] = [\n    { id: \"host-a\", type: \"asset\", label: \"Host A\", x: 150, y: 100, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"user-1\", type: \"user\", label: \"User Account\", x: 300, y: 80, connections: [\"host-a\", \"ip-1\"], risk: \"medium\" },\n    { id: \"ip-1\", type: \"ip\", label: \"192.168.1.50\", x: 450, y: 120, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"process-1\", type: \"process\", label: \"malware.exe\", x: 300, y: 200, connections: [\"host-a\", \"ip-1\"], risk: \"high\" },\n  ];\n\n  // Animate knowledge graph nodes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAnimationNodes(prev => \n        knowledgeNodes.map(node => ({\n          id: node.id,\n          x: node.x + Math.sin(Date.now() / 1000 + node.id.length) * 3,\n          y: node.y + Math.cos(Date.now() / 1000 + node.id.length) * 3,\n        }))\n      );\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTimelineIcon = (type: string, status: string) => {\n    const iconClass = status === 'completed' ? 'text-green-400' : status === 'in_progress' ? 'text-yellow-400' : 'text-gray-400';\n\n    switch (type) {\n      case 'detection': return <AlertTriangle className={`w-4 h-4 ${iconClass}`} />;\n      case 'analysis': return <Brain className={`w-4 h-4 ${iconClass}`} />;\n      case 'investigation': return <Eye className={`w-4 h-4 ${iconClass}`} />;\n      case 'containment': return <Shield className={`w-4 h-4 ${iconClass}`} />;\n      case 'closed': return <CheckCircle className={`w-4 h-4 ${iconClass}`} />;\n      default: return <Clock className={`w-4 h-4 ${iconClass}`} />;\n    }\n  };\n\n  const getNodeColor = (type: string, risk: string) => {\n    const riskColors = {\n      high: '#ef4444',\n      medium: '#f97316', \n      low: '#22c55e'\n    };\n    return riskColors[risk as keyof typeof riskColors];\n  };\n\n  const getNodeIcon = (type: string) => {\n    switch (type) {\n      case 'asset': return <Server className=\"w-4 h-4\" />;\n      case 'user': return <Users className=\"w-4 h-4\" />;\n      case 'ip': return <Network className=\"w-4 h-4\" />;\n      case 'process': return <Activity className=\"w-4 h-4\" />;\n      default: return <Target className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Alert Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-red-400 mb-2\">Critical Malware Alert: Host A</h1>\n              <p className=\"text-gray-300\">Alert ID: CMA-2024-26-001 • Severity: CRITICAL • Jan 15, 2024, 13:15 AM UTC</p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Acknowledge\n              </Button>\n              <Button variant=\"outline\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Resolve\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Left Column - Risk Assessment Cards */}\n          <motion.div \n            initial={{ x: -50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n            className=\"space-y-6\"\n          >\n            {/* Rule-based Risk */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300\">Rule-based Risk</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(330,100%,50%)] mb-1\">92</div>\n                  <div className=\"text-xs text-gray-400\">out of 100</div>\n                </div>\n                <Progress value={92} className=\"mb-4\" />\n                <div className=\"space-y-2 text-xs\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Key Risk Factors:</span>\n                  </div>\n                  <div className=\"text-green-400\">• Critical asset involved</div>\n                  <div className=\"text-yellow-400\">• Known Vulnerability (Exposed)</div>\n                  <div className=\"text-red-400\">• High level of Anomaly</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* ML Prediction Details */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(267,100%,67%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Brain className=\"w-4 h-4 mr-2 text-[hsl(267,100%,67%)]\" />\n                  ML Prediction Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(267,100%,67%)] mb-1\">98%</div>\n                  <div className=\"text-xs text-gray-400\">Confidence</div>\n                </div>\n                <div className=\"space-y-3 text-xs\">\n                  <div>\n                    <div className=\"text-gray-400 mb-1\">Top Contributing Features:</div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Anomaly Score</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">65%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Behavior Deviation</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">78%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Threat Intelligence Match</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">85%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Recommendation */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-orange-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2 text-orange-400\" />\n                  AI Recommendation Based on Intent\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center text-red-400 font-bold text-lg mb-3\">\n                  Limit User Access\n                </div>\n                <p className=\"text-xs text-gray-300\">\n                  This action is recommended to mitigate the impact of the attack.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Related Alerts */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Target className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Related Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)] mb-1\">4</div>\n                  <div className=\"text-xs text-gray-400\">Similar incidents</div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Center Column - Deep Knowledge Graph */}\n          <motion.div \n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"lg:col-span-2\"\n          >\n            <InvestigationKnowledgeGraph />\n          </motion.div>\n\n          {/* Right Column - Timeline & Actions */}\n          <motion.div \n            initial={{ x: 50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n            className=\"space-y-6\"\n          >\n            {/* Timeline */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Cybersecurity Alert Lifecycle Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {timelineEvents.map((event, index) => (\n                    <motion.div \n                      key={event.id}\n                      initial={{ x: 20, opacity: 0 }}\n                      animate={{ x: 0, opacity: 1 }}\n                      transition={{ duration: 0.4, delay: index * 0.1 }}\n                      className=\"flex items-start space-x-3\"\n                    >\n                      <div className=\"flex flex-col items-center\">\n                        <div className={`p-2 rounded-full border-2 ${\n                          event.status === 'completed' ? 'bg-green-400/20 border-green-400' :\n                          event.status === 'in_progress' ? 'bg-yellow-400/20 border-yellow-400' :\n                          'bg-gray-400/20 border-gray-400'\n                        }`}>\n                          {getTimelineIcon(event.type, event.status)}\n                        </div>\n                        {index < timelineEvents.length - 1 && (\n                          <div className=\"w-0.5 h-12 bg-gray-600 mt-2\"></div>\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"text-sm font-medium text-white\">{event.title}</h4>\n                          <Badge variant=\"outline\" className={\n                            event.status === 'completed' ? 'border-green-400/20 text-green-400' :\n                            event.status === 'in_progress' ? 'border-yellow-400/20 text-yellow-400' :\n                            'border-gray-400/20 text-gray-400'\n                          }>\n                            {event.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-400 mb-1\">{event.description}</p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>{event.timestamp}</span>\n                          {event.user && <span>by {event.user}</span>}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 pt-4 border-t border-gray-700\">\n                  <div className=\"flex justify-between text-xs text-gray-400 mb-2\">\n                    <span>Time Elapsed: 00:01:15</span>\n                    <span>Completion: 60%</span>\n                  </div>\n                  <Progress value={60} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Event Timeline\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                    <Server className=\"w-4 h-4 mr-2\" />\n                    Affected Assets\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-orange-500/20 text-orange-400 hover:bg-orange-500/10\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Remediation\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Bottom Section - Detailed Findings */}\n        <motion.div\n          initial={{ y: 50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n        >\n          {/* Alert Summary */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-300 mb-4\">\n                A sophisticated malware attack was detected targeting a critical production server (Host A). The attack involved an exploit of a known vulnerability leading to lateral movement within the DMZ network and potential compromise of a user account. The system identified outbound connections to a known Command and Control (C2) server.\n              </p>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Key Findings:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• Host A (192.168.1.50) compromised via zero-day exploit.</div>\n                    <div>• Malware established C2 communications.</div>\n                    <div>• Potential lateral movement to internal networks.</div>\n                    <div>• User account 'john.doe' showed suspicious login activity.</div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Recommended Actions:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• Immediate isolation of Host A and affected network segments.</div>\n                    <div>• Forensic analysis on Host A to identify initial compromise vector.</div>\n                    <div>• Force password reset for 'john.doe' and review access logs.</div>\n                    <div>• Update IDS/IPS signatures and firewall rules.</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Event Log */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Detailed Event Log</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                <div className=\"text-xs space-y-2\">\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-red-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-red-400 font-medium\">2024-01-15 09:15:23</span>\n                      <Badge variant=\"outline\" className=\"border-red-400/20 text-red-400\">Critical</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Malicious executable detected on Host A</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-orange-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-orange-400 font-medium\">2024-01-15 09:16:05</span>\n                      <Badge variant=\"outline\" className=\"border-orange-400/20 text-orange-400\">High</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Outbound connection attempt to known C2 server (185.234.72.3)</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-yellow-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-yellow-400 font-medium\">2024-01-15 09:16:50</span>\n                      <Badge variant=\"outline\" className=\"border-yellow-400/20 text-yellow-400\">Medium</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Suspicious user login from unusual IP address (198.51.100.25)</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-green-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-green-400 font-medium\">2024-01-15 09:17:12</span>\n                      <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400\">Info</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Alert generated by SIEM system based on correlated events</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":22787},"client/src/pages/investigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Shield, Brain, AlertTriangle, CheckCircle, Clock, Eye, Download, RefreshCw, Activity, Users, Server, Network, FileText, Target, Zap, TrendingUp, BarChart3, Settings, Bell, User, Search, Filter, Calendar, MessageSquare, ExternalLink, ChevronDown, ChevronRight, Play, Pause } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport InvestigationKnowledgeGraph from \"@/components/ui/investigation-knowledge-graph\";\n\ninterface TimelineEvent {\n  id: string;\n  timestamp: string;\n  type: \"detection\" | \"analysis\" | \"investigation\" | \"containment\" | \"closed\";\n  status: \"completed\" | \"in_progress\" | \"pending\";\n  title: string;\n  description: string;\n  user?: string;\n}\n\ninterface KnowledgeNode {\n  id: string;\n  type: \"asset\" | \"user\" | \"ip\" | \"process\";\n  label: string;\n  x: number;\n  y: number;\n  connections: string[];\n  risk: \"high\" | \"medium\" | \"low\";\n}\n\nexport default function Investigation() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isUnauthenticated, isLoading: authLoading } = useAuth();\n  const [selectedTimelineEvent, setSelectedTimelineEvent] = useState<string | null>(null);\n  const [knowledgeGraphExpanded, setKnowledgeGraphExpanded] = useState(false);\n  const [animationNodes, setAnimationNodes] = useState<{ id: string; x: number; y: number }[]>([]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (isUnauthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isUnauthenticated, setLocation]);\n\n  // Real API calls to backend\n  const { data: incidents, isLoading: incidentsLoading } = useQuery({\n    queryKey: ['/api/incidents'],\n    queryFn: api.getIncidents,\n    enabled: isAuthenticated,\n  });\n\n  const { data: actions, isLoading: actionsLoading } = useQuery({\n    queryKey: ['/api/actions'],\n    queryFn: api.getActions,\n    enabled: isAuthenticated,\n  });\n\n  const { data: alerts } = useQuery({\n    queryKey: ['/api/alerts'],\n    queryFn: api.getAlerts,\n    enabled: isAuthenticated,\n  });\n\n  const { data: sources } = useQuery({\n    queryKey: ['/api/sources'],\n    queryFn: api.getSources,\n    enabled: isAuthenticated,\n  });\n\n  // Get the most critical incident for detailed view\n  const criticalIncident = incidents?.find((inc: any) => \n    inc.severity === 'critical' || inc.severity === 'high'\n  ) || incidents?.[0];\n\n  // Generate timeline from real incident data combined with mock structure  \n  const generateTimelineFromIncident = (incident: any): TimelineEvent[] => {\n    if (!incident) {\n      // Fallback to original mock data structure\n      return [\n        {\n          id: \"1\",\n          timestamp: new Date(Date.now() - 3600000).toLocaleString(),\n          type: \"detection\",\n          status: \"completed\",\n          title: \"Alert Raised\",\n          description: \"SLA compliance: On Track\",\n          user: \"System\"\n        },\n        {\n          id: \"2\", \n          timestamp: new Date(Date.now() - 3300000).toLocaleString(),\n          type: \"analysis\",\n          status: \"completed\",\n          title: \"Acknowledged\",\n          description: \"Analyst review initiated\",\n          user: \"AI Auto-Triage\"\n        },\n        {\n          id: \"3\",\n          timestamp: new Date(Date.now() - 2100000).toLocaleString(),\n          type: \"investigation\",\n          status: \"in_progress\",\n          title: \"Investigation Completed\",\n          description: \"Threat analysis in progress\",\n          user: \"Security Analyst\"\n        },\n        {\n          id: \"4\",\n          timestamp: new Date(Date.now() + 600000).toLocaleString(),\n          type: \"containment\",\n          status: \"pending\",\n          title: \"Contained\",\n          description: \"Mitigation actions pending\",\n          user: \"Senior Analyst\"\n        },\n        {\n          id: \"5\",\n          timestamp: new Date(Date.now() + 1800000).toLocaleString(),\n          type: \"closed\",\n          status: \"pending\",\n          title: \"Closed\",\n          description: \"Resolution pending\",\n          user: \"AI System\"\n        }\n      ];\n    }\n\n    const incidentActions = actions?.filter((action: any) => \n      action.incidentId === incident.id\n    ) || [];\n\n    const timeline: TimelineEvent[] = [\n      {\n        id: \"detection\",\n        timestamp: new Date(incident.createdAt).toLocaleString(),\n        type: \"detection\",\n        status: \"completed\",\n        title: \"Alert Raised\",\n        description: \"SLA compliance: On Track\",\n        user: \"System\"\n      }\n    ];\n\n    // Add acknowledgment\n    if (incident.assignedTo) {\n      timeline.push({\n        id: \"ack\",\n        timestamp: new Date(incident.createdAt + 85000).toLocaleString(),\n        type: \"analysis\",\n        status: \"completed\",\n        title: \"Acknowledged\",\n        description: \"Analyst review initiated\",\n        user: incident.assignedTo\n      });\n    }\n\n    // Add investigation phase\n    timeline.push({\n      id: \"investigation\",\n      timestamp: new Date(incident.createdAt + 595000).toLocaleString(),\n      type: \"investigation\",\n      status: incident.status === 'monitoring' ? \"in_progress\" : \"completed\",\n      title: \"Investigation Completed\",\n      description: \"Threat analysis in progress\",\n      user: incident.assignedTo || \"Security Analyst\"\n    });\n\n    // Add containment if needed\n    if (incident.status === 'monitoring' || incident.status === 'resolved') {\n      timeline.push({\n        id: \"containment\",\n        timestamp: new Date(incident.updatedAt).toLocaleString(),\n        type: \"containment\",\n        status: incident.status === 'resolved' ? \"completed\" : \"pending\",\n        title: \"Contained\",\n        description: incident.status === 'resolved' ? \"Mitigation completed\" : \"Mitigation actions pending\",\n        user: incident.assignedTo || \"Senior Analyst\"\n      });\n    }\n\n    // Add closure if resolved\n    if (incident.status === 'resolved') {\n      timeline.push({\n        id: \"closed\",\n        timestamp: new Date(incident.updatedAt + 300000).toLocaleString(),\n        type: \"closed\",\n        status: \"completed\",\n        title: \"Closed\",\n        description: \"Incident resolved successfully\",\n        user: \"AI System\"\n      });\n    }\n\n    return timeline;\n  };\n\n  const timelineEvents = generateTimelineFromIncident(criticalIncident);\n\n  // Enhanced knowledge graph with real data integration\n  const knowledgeNodes: KnowledgeNode[] = [\n    { id: \"host-a\", type: \"asset\", label: criticalIncident?.title?.substring(0, 10) || \"Host A\", x: 150, y: 100, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"user-1\", type: \"user\", label: criticalIncident?.assignedTo?.split(' ')[0] || \"User Account\", x: 300, y: 80, connections: [\"host-a\", \"ip-1\"], risk: \"medium\" },\n    { id: \"ip-1\", type: \"ip\", label: \"192.168.1.50\", x: 450, y: 120, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"process-1\", type: \"process\", label: sources?.[0]?.name || \"malware.exe\", x: 300, y: 200, connections: [\"host-a\", \"ip-1\"], risk: \"high\" },\n  ];\n\n  // Animate knowledge graph nodes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAnimationNodes(prev => \n        knowledgeNodes.map(node => ({\n          id: node.id,\n          x: node.x + Math.sin(Date.now() / 1000 + node.id.length) * 3,\n          y: node.y + Math.cos(Date.now() / 1000 + node.id.length) * 3,\n        }))\n      );\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTimelineIcon = (type: string, status: string) => {\n    const iconClass = status === 'completed' ? 'text-green-400' : status === 'in_progress' ? 'text-yellow-400' : 'text-gray-400';\n\n    switch (type) {\n      case 'detection': return <AlertTriangle className={`w-4 h-4 ${iconClass}`} />;\n      case 'analysis': return <Brain className={`w-4 h-4 ${iconClass}`} />;\n      case 'investigation': return <Eye className={`w-4 h-4 ${iconClass}`} />;\n      case 'containment': return <Shield className={`w-4 h-4 ${iconClass}`} />;\n      case 'closed': return <CheckCircle className={`w-4 h-4 ${iconClass}`} />;\n      default: return <Clock className={`w-4 h-4 ${iconClass}`} />;\n    }\n  };\n\n  const getNodeColor = (type: string, risk: string) => {\n    const riskColors = {\n      high: '#ef4444',\n      medium: '#f97316', \n      low: '#22c55e'\n    };\n    return riskColors[risk as keyof typeof riskColors];\n  };\n\n  const getNodeIcon = (type: string) => {\n    switch (type) {\n      case 'asset': return <Server className=\"w-4 h-4\" />;\n      case 'user': return <Users className=\"w-4 h-4\" />;\n      case 'ip': return <Network className=\"w-4 h-4\" />;\n      case 'process': return <Activity className=\"w-4 h-4\" />;\n      default: return <Target className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getSeverityColor = (severity?: string) => {\n    switch (severity?.toLowerCase()) {\n      case 'critical': return 'text-red-400';\n      case 'high': return 'text-orange-400';\n      case 'medium': return 'text-yellow-400';\n      default: return 'text-blue-400';\n    }\n  };\n\n  // Calculate risk scores based on real data\n  const ruleBasedRisk = criticalIncident?.severity === 'critical' ? 92 : \n                        criticalIncident?.severity === 'high' ? 78 : 65;\n  const mlConfidence = Math.min(98, 80 + (alerts?.length || 0) * 2);\n  const relatedAlertsCount = alerts?.filter((a: any) => \n    a.sourceId === criticalIncident?.id || a.severity === criticalIncident?.severity\n  )?.length || 4;\n\n  if (authLoading || incidentsLoading || actionsLoading) {\n    return (\n      <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white p-6\">\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full mx-auto mb-4 animate-pulse\"></div>\n            <div className=\"text-xl font-semibold text-white mb-2\">Loading Investigation Center</div>\n            <div className=\"text-gray-400\">Analyzing incident data and building timeline...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Security Analyst</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Alert Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className={`text-3xl font-bold mb-2 ${getSeverityColor(criticalIncident?.severity)}`}>\n                {criticalIncident?.severity?.toUpperCase() || 'CRITICAL'} Investigation: {criticalIncident?.title || 'Security Incident Analysis'}\n              </h1>\n              <p className=\"text-gray-300\">\n                Alert ID: {criticalIncident?.id?.slice(-12) || 'CMA-2024-26-001'} • \n                Severity: {criticalIncident?.severity?.toUpperCase() || 'CRITICAL'} • \n                {criticalIncident ? new Date(criticalIncident.createdAt).toLocaleString() : 'Jan 15, 2024, 13:15 AM UTC'}\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Acknowledge\n              </Button>\n              <Button variant=\"outline\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Resolve\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Left Column - Risk Assessment Cards */}\n          <motion.div \n            initial={{ x: -50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n            className=\"space-y-6\"\n          >\n            {/* Rule-based Risk */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300\">Rule-based Risk</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(330,100%,50%)] mb-1\">{ruleBasedRisk}</div>\n                  <div className=\"text-xs text-gray-400\">out of 100</div>\n                </div>\n                <Progress value={ruleBasedRisk} className=\"mb-4\" />\n                <div className=\"space-y-2 text-xs\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Key Risk Factors:</span>\n                  </div>\n                  <div className=\"text-green-400\">• {criticalIncident?.severity || 'Critical'} asset involved</div>\n                  <div className=\"text-yellow-400\">• Known Vulnerability (Exposed)</div>\n                  <div className=\"text-red-400\">• High level of Anomaly</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* ML Prediction Details */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(267,100%,67%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Brain className=\"w-4 h-4 mr-2 text-[hsl(267,100%,67%)]\" />\n                  ML Prediction Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(267,100%,67%)] mb-1\">{mlConfidence}%</div>\n                  <div className=\"text-xs text-gray-400\">Confidence</div>\n                </div>\n                <div className=\"space-y-3 text-xs\">\n                  <div>\n                    <div className=\"text-gray-400 mb-1\">Top Contributing Features:</div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Anomaly Score</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">65%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Behavior Deviation</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">78%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Threat Intelligence Match</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">85%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Recommendation */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-orange-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2 text-orange-400\" />\n                  AI Recommendation Based on Intent\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center text-red-400 font-bold text-lg mb-3\">\n                  {criticalIncident?.status === 'resolved' ? 'Investigation Complete' : 'Limit User Access'}\n                </div>\n                <p className=\"text-xs text-gray-300\">\n                  This action is recommended to mitigate the impact of the attack.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Related Alerts */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Target className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Related Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)] mb-1\">{relatedAlertsCount}</div>\n                  <div className=\"text-xs text-gray-400\">Similar incidents</div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Center Column - Deep Knowledge Graph */}\n          <motion.div \n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"lg:col-span-2\"\n          >\n            <InvestigationKnowledgeGraph />\n          </motion.div>\n\n          {/* Right Column - Timeline & Actions */}\n          <motion.div \n            initial={{ x: 50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n            className=\"space-y-6\"\n          >\n            {/* Timeline */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Cybersecurity Alert Lifecycle Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {timelineEvents.map((event, index) => (\n                    <motion.div \n                      key={event.id}\n                      initial={{ x: 20, opacity: 0 }}\n                      animate={{ x: 0, opacity: 1 }}\n                      transition={{ duration: 0.4, delay: index * 0.1 }}\n                      className=\"flex items-start space-x-3\"\n                    >\n                      <div className=\"flex flex-col items-center\">\n                        <div className={`p-2 rounded-full border-2 ${\n                          event.status === 'completed' ? 'bg-green-400/20 border-green-400' :\n                          event.status === 'in_progress' ? 'bg-yellow-400/20 border-yellow-400' :\n                          'bg-gray-400/20 border-gray-400'\n                        }`}>\n                          {getTimelineIcon(event.type, event.status)}\n                        </div>\n                        {index < timelineEvents.length - 1 && (\n                          <div className=\"w-0.5 h-12 bg-gray-600 mt-2\"></div>\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"text-sm font-medium text-white\">{event.title}</h4>\n                          <Badge variant=\"outline\" className={\n                            event.status === 'completed' ? 'border-green-400/20 text-green-400' :\n                            event.status === 'in_progress' ? 'border-yellow-400/20 text-yellow-400' :\n                            'border-gray-400/20 text-gray-400'\n                          }>\n                            {event.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-400 mb-1\">{event.description}</p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>{event.timestamp}</span>\n                          {event.user && <span>by {event.user}</span>}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 pt-4 border-t border-gray-700\">\n                  <div className=\"flex justify-between text-xs text-gray-400 mb-2\">\n                    <span>Time Elapsed: {criticalIncident ? \n                      Math.floor((Date.now() - new Date(criticalIncident.createdAt).getTime()) / 60000) : 0}m</span>\n                    <span>Completion: {criticalIncident?.status === 'resolved' ? '100%' : \n                                       criticalIncident?.status === 'monitoring' ? '75%' : '60%'}</span>\n                  </div>\n                  <Progress value={criticalIncident?.status === 'resolved' ? 100 : \n                                   criticalIncident?.status === 'monitoring' ? 75 : 60} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Event Timeline\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                    <Server className=\"w-4 h-4 mr-2\" />\n                    Affected Assets\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-orange-500/20 text-orange-400 hover:bg-orange-500/10\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Remediation\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Bottom Section - Detailed Findings */}\n        <motion.div\n          initial={{ y: 50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n        >\n          {/* Alert Summary */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-300 mb-4\">\n                {criticalIncident?.description || \"A sophisticated security incident was detected targeting critical infrastructure. The analysis involves comprehensive threat assessment and potential compromise evaluation through multi-source correlation and advanced behavioral analysis.\"}\n              </p>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Key Findings:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• {criticalIncident?.severity?.toUpperCase() || 'Critical'} severity incident detected ({criticalIncident?.id?.slice(-6) || '001'}).</div>\n                    <div>• Investigation status: {criticalIncident?.status || 'Active monitoring'}.</div>\n                    <div>• Data sources: {sources?.length || 0} security tools integrated.</div>\n                    <div>• Related alerts: {relatedAlertsCount} similar incidents identified.</div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Recommended Actions:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• Immediate {criticalIncident?.severity || 'critical'} threat assessment and containment.</div>\n                    <div>• Forensic analysis on affected systems and network segments.</div>\n                    <div>• Review access logs and enforce additional security measures.</div>\n                    <div>• Update detection rules and firewall configurations.</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Event Log */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Detailed Event Log</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                <div className=\"text-xs space-y-2\">\n                  {/* Real incident event */}\n                  <div className={`bg-[hsl(0,0%,6%)] p-3 rounded border ${\n                    criticalIncident?.severity === 'critical' ? 'border-red-500/20' : \n                    criticalIncident?.severity === 'high' ? 'border-orange-500/20' : \n                    'border-yellow-500/20'\n                  }`}>\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className={`${getSeverityColor(criticalIncident?.severity)} font-medium`}>\n                        {criticalIncident ? new Date(criticalIncident.createdAt).toLocaleString() : '2024-01-15 09:15:23'}\n                      </span>\n                      <Badge variant=\"outline\" className={\n                        criticalIncident?.severity === 'critical' ? 'border-red-400/20 text-red-400' :\n                        criticalIncident?.severity === 'high' ? 'border-orange-400/20 text-orange-400' :\n                        'border-yellow-400/20 text-yellow-400'\n                      }>\n                        {criticalIncident?.severity?.charAt(0).toUpperCase() + criticalIncident?.severity?.slice(1) || 'Critical'}\n                      </Badge>\n                    </div>\n                    <p className=\"text-gray-300\">{criticalIncident?.title || 'Security incident detected by automated monitoring'}</p>\n                  </div>\n\n                  {/* Actions as events */}\n                  {actions?.slice(0, 3).map((action: any, index: number) => (\n                    <div key={action.id} className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-blue-500/20\">\n                      <div className=\"flex justify-between items-start mb-1\">\n                        <span className=\"text-blue-400 font-medium\">\n                          {new Date(action.performedAt).toLocaleString()}\n                        </span>\n                        <Badge variant=\"outline\" className=\"border-blue-400/20 text-blue-400\">\n                          Action\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-300\">\n                        {action.actionType.replace('_', ' ').charAt(0).toUpperCase() + action.actionType.slice(1)} performed by {action.performedBy || 'System'}\n                      </p>\n                    </div>\n                  ))}\n\n                  {/* Fallback mock events if no real data */}\n                  {(!actions || actions.length === 0) && (\n                    <>\n                      <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-orange-500/20\">\n                        <div className=\"flex justify-between items-start mb-1\">\n                          <span className=\"text-orange-400 font-medium\">2024-01-15 09:16:05</span>\n                          <Badge variant=\"outline\" className=\"border-orange-400/20 text-orange-400\">High</Badge>\n                        </div>\n                        <p className=\"text-gray-300\">Outbound connection attempt to known threat infrastructure</p>\n                      </div>\n\n                      <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-green-500/20\">\n                        <div className=\"flex justify-between items-start mb-1\">\n                          <span className=\"text-green-400 font-medium\">2024-01-15 09:17:12</span>\n                          <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400\">Info</Badge>\n                        </div>\n                        <p className=\"text-gray-300\">Alert generated by security correlation engine</p>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":30807},"NewFrontend/alpha-platform/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Investigation from \"@/pages/investigation\";\nimport AIAssistant from \"@/pages/ai-assistant\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/investigation\" component={Investigation} />\n      <Route path=\"/ai-assistant\" component={AIAssistant} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1071},"NewFrontend/alpha-platform/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ================================\n   Enhanced Variables & Base Styles\n   ================================ */\n:root {\n  --primary-dark: hsl(220, 15%, 5%);\n  --primary-accent: hsl(330, 100%, 50%);\n  --secondary-accent: hsl(267, 100%, 67%);\n  --text-primary: hsl(0, 0%, 98%);\n  --text-secondary: hsl(0, 0%, 70%);\n  --border-subtle: hsla(330, 100%, 50%, 0.2);\n  --glow-color: hsla(330, 100%, 50%, 0.6);\n  --secondary-glow: hsla(267, 100%, 67%, 0.4);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  line-height: 1.6;\n  font-weight: 400;\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  background: var(--primary-dark);\n  color: var(--text-primary);\n  line-height: 1.6;\n  overflow-x: hidden;\n}\n\n/* ================================\n   Enhanced Glow Effects & Animations\n   ================================ */\n.glow-text {\n  text-shadow:\n    0 0 5px var(--glow-color),\n    0 0 10px var(--glow-color),\n    0 0 15px var(--glow-color),\n    0 0 20px var(--glow-color);\n  animation: text-glow 2s ease-in-out infinite alternate;\n}\n\n@keyframes text-glow {\n  from {\n    text-shadow:\n      0 0 5px var(--glow-color),\n      0 0 10px var(--glow-color),\n      0 0 15px var(--glow-color),\n      0 0 20px var(--glow-color);\n  }\n  to {\n    text-shadow:\n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      0 0 30px var(--glow-color),\n      0 0 40px var(--glow-color);\n  }\n}\n\n.gradient-glow {\n  background: radial-gradient(\n    circle at center,\n    hsla(330, 100%, 50%, 0.15) 0%,\n    hsla(267, 100%, 67%, 0.1) 25%,\n    transparent 50%\n  );\n  animation: gradient-shift 4s ease-in-out infinite;\n}\n\n@keyframes gradient-shift {\n  0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.8; }\n  50% { transform: scale(1.1) rotate(180deg); opacity: 1; }\n}\n\n/* ================================\n   Enhanced Button Styles\n   ================================ */\n.glow-button {\n  position: relative;\n  overflow: hidden;\n  box-shadow:\n    0 0 20px var(--glow-color),\n    inset 0 0 20px hsla(330, 100%, 50%, 0.1);\n  transition: all 0.3s ease;\n}\n\n.glow-button::before {\n  content: '';\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200%;\n  height: 200%;\n  background: linear-gradient(\n    45deg,\n    transparent,\n    hsla(330, 100%, 50%, 0.2),\n    transparent\n  );\n  transform: rotate(45deg);\n  transition: all 0.6s;\n  opacity: 0;\n}\n\n.glow-button:hover::before {\n  animation: shimmer 0.6s ease-in-out;\n}\n\n@keyframes shimmer {\n  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }\n  50% { opacity: 1; }\n  100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }\n}\n\n/* ================================\n   Enhanced SOC Dashboard Animations\n   ================================ */\n.cortex-glow { animation: cortex-glow 3s ease-in-out infinite; }\n.ai-core-glow { animation: ai-core-glow 4s ease-in-out infinite; }\n.alert-pulse { animation: alert-pulse 2s ease-in-out infinite; }\n.incident-pulse { animation: incident-pulse 2.5s ease-in-out infinite; }\n.sidebar-glow { animation: sidebar-glow 5s ease-in-out infinite; }\n.dashboard-glow { animation: dashboard-glow 6s ease-in-out infinite; }\n\n@keyframes cortex-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px var(--glow-color);\n    border-color: var(--primary-accent);\n  }\n  50% {\n    box-shadow: 0 0 40px var(--glow-color), 0 0 60px var(--secondary-glow);\n    border-color: var(--secondary-accent);\n  }\n}\n\n@keyframes ai-core-glow {\n  0%, 100% {\n    background: linear-gradient(135deg, var(--primary-accent) 0%, var(--secondary-accent) 100%);\n    transform: scale(1);\n  }\n  50% {\n    background: linear-gradient(135deg, var(--secondary-accent) 0%, var(--primary-accent) 100%);\n    transform: scale(1.05);\n  }\n}\n\n@keyframes alert-pulse {\n  0%, 100% {\n    background-color: hsl(0, 70%, 50%);\n    box-shadow: 0 0 10px hsla(0, 70%, 50%, 0.5);\n  }\n  50% {\n    background-color: hsl(0, 85%, 60%);\n    box-shadow: 0 0 20px hsla(0, 85%, 60%, 0.8);\n  }\n}\n\n/* ================================\n   Writing Animation Effects\n   ================================ */\n.typewriter {\n  overflow: hidden;\n  border-right: 2px solid var(--primary-accent);\n  white-space: nowrap;\n  animation: typing 3s steps(40, end), blink-caret 0.75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent; }\n  50% { border-color: var(--primary-accent); }\n}\n\n/* ================================\n   Enhanced Interactive Elements\n   ================================ */\n.response-automated { animation: response-glow-pink 3s ease-in-out infinite; }\n.response-manual { animation: response-glow-blue 3.5s ease-in-out infinite; }\n\n@keyframes response-glow-pink {\n  0%, 100% {\n    box-shadow: 0 0 15px hsla(330, 100%, 50%, 0.3);\n    border-color: hsla(330, 100%, 50%, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 30px hsla(330, 100%, 50%, 0.6);\n    border-color: hsla(330, 100%, 50%, 0.8);\n  }\n}\n\n@keyframes response-glow-blue {\n  0%, 100% {\n    box-shadow: 0 0 15px hsla(220, 100%, 60%, 0.3);\n    border-color: hsla(220, 100%, 60%, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 30px hsla(220, 100%, 60%, 0.6);\n    border-color: hsla(220, 100%, 60%, 0.8);\n  }\n}\n\n/* Enhanced hover states */\n.nav-item-active {\n  box-shadow: 0 0 15px hsla(330, 100%, 50%, 0.25);\n}\n\n.nav-item-hover:hover {\n  background: hsla(330, 100%, 50%, 0.08);\n  box-shadow: 0 0 10px hsla(330, 100%, 50%, 0.2);\n  transform: translateY(-2px);\n  transition: all 0.3s ease;\n}\n\n.data-source-hover:hover {\n  background: hsla(220, 15%, 8%, 0.8);\n  border-color: hsla(330, 100%, 50%, 0.25);\n  transform: translateX(5px);\n  transition: all 0.3s ease;\n}\n\n.stats-card-hover:hover {\n  border-color: hsla(330, 100%, 50%, 0.35);\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px hsla(330, 100%, 50%, 0.1);\n  transition: all 0.3s ease;\n}\n\n/* ================================\n   Advanced Data Visualization\n   ================================ */\n.data-flow-line {\n  position: relative;\n  overflow: hidden;\n}\n\n.data-flow-line::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    var(--primary-accent),\n    transparent\n  );\n  animation: data-flow 2s linear infinite;\n}\n\n@keyframes data-flow {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n\n/* ================================\n   Scrollbar Styling\n   ================================ */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--primary-dark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(to bottom, var(--primary-accent), var(--secondary-accent));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(to bottom, var(--secondary-accent), var(--primary-accent));\n}\n\n/* ================================\n   Enhanced Responsive Design\n   ================================ */\n@media (max-width: 768px) {\n  .glow-text {\n    font-size: clamp(2rem, 8vw, 4rem);\n  }\n\n  .gradient-glow {\n    opacity: 0.7;\n  }\n}\n\n/* ================================\n   Utility Classes\n   ================================ */\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px var(--glow-color);\n    opacity: 0.8;\n  }\n  50% {\n    box-shadow: 0 0 40px var(--glow-color), 0 0 60px var(--secondary-glow);\n    opacity: 1;\n  }\n}\n\n.glass-morphism {\n  background: hsla(220, 15%, 10%, 0.8);\n  backdrop-filter: blur(20px);\n  border: 1px solid hsla(330, 100%, 50%, 0.2);\n}","size_bytes":8018},"NewFrontend/alpha-platform/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/sections/dashboard-showcase.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { Shield, AlertTriangle, BarChart3, Workflow, Users, FileText } from \"lucide-react\";\n\ngsap.registerPlugin(ScrollTrigger);\n\ninterface FeatureStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  visual: string;\n}\n\nconst featureSteps: FeatureStep[] = [\n  {\n    id: \"unified-threat\",\n    title: \"Unified Threat Overview\",\n    description: \"Get complete visibility into threat landscape — by severity, source, and impact across all your security tools and endpoints.\",\n    icon: Shield,\n    visual: \"threat-overview\"\n  },\n  {\n    id: \"alert-triage\",\n    title: \"AI-Powered Alert Triage\",\n    description: \"Automatically classify and prioritize alerts using advanced AI scoring for true positives, false positives, and escalation paths.\",\n    icon: AlertTriangle,\n    visual: \"alert-triage\"\n  },\n  {\n    id: \"tactical-analytics\",\n    title: \"Real-Time Tactical Analytics\",\n    description: \"Track attacker behavior patterns, analyze file execution paths, and correlate process execution across your infrastructure.\",\n    icon: BarChart3,\n    visual: \"analytics\"\n  },\n  {\n    id: \"automated-playbooks\",\n    title: \"Automated Response Playbooks\",\n    description: \"Instantly isolate compromised devices, block malicious hashes, and notify security teams with predefined automated playbooks.\",\n    icon: Workflow,\n    visual: \"playbooks\"\n  },\n  {\n    id: \"user-entity\",\n    title: \"User Entity Behavior Analytics\",\n    description: \"Correlate security alerts back to specific users, domains, and asset movement patterns for comprehensive threat context.\",\n    icon: Users,\n    visual: \"entity-mapping\"\n  },\n  {\n    id: \"compliance\",\n    title: \"Compliance & Audit Reporting\",\n    description: \"Generate audit-ready compliance reports automatically mapped to ISO 27001, NIST Framework, SOC 2, and industry standards.\",\n    icon: FileText,\n    visual: \"compliance\"\n  }\n];\n\nexport default function DashboardShowcase() {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Create scroll-triggered animations for each section\n    featureSteps.forEach((_, index) => {\n      const sectionSelector = `.feature-section-${index}`;\n      const titleSelector = `${sectionSelector} .feature-title`;\n      const descSelector = `${sectionSelector} .feature-description`;\n      const visualSelector = `${sectionSelector} .feature-visual`;\n\n      ScrollTrigger.create({\n        trigger: sectionSelector,\n        start: \"top 80%\",\n        end: \"bottom 20%\",\n        onEnter: () => {\n          // Typewriter animation for title\n          const titleElement = container.querySelector(titleSelector);\n          if (titleElement) {\n            const titleText = titleElement.textContent || \"\";\n            titleElement.textContent = \"\";\n            titleElement.style.opacity = \"1\";\n\n            gsap.to({}, {\n              duration: titleText.length * 0.05,\n              ease: \"none\",\n              onUpdate: function() {\n                const progress = this.progress();\n                const currentLength = Math.floor(progress * titleText.length);\n                titleElement.textContent = titleText.substring(0, currentLength);\n              }\n            });\n          }\n\n          // Typewriter animation for description with delay\n          setTimeout(() => {\n            const descElement = container.querySelector(descSelector);\n            if (descElement) {\n              const descText = descElement.textContent || \"\";\n              descElement.textContent = \"\";\n              descElement.style.opacity = \"1\";\n\n              gsap.to({}, {\n                duration: descText.length * 0.02,\n                ease: \"none\",\n                onUpdate: function() {\n                  const progress = this.progress();\n                  const currentLength = Math.floor(progress * descText.length);\n                  descElement.textContent = descText.substring(0, currentLength);\n                }\n              });\n            }\n          }, 800);\n\n          // Visual fade-in with slide\n          gsap.fromTo(visualSelector,\n            { y: 80, opacity: 0 },\n            { y: 0, opacity: 1, duration: 1.2, ease: \"power3.out\", delay: 0.3 }\n          );\n        }\n      });\n    });\n\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n\n  const renderVisual = (visual: string) => {\n    const baseClasses = \"w-full h-full rounded-xl border border-[hsl(330,100%,50%)]/20 bg-gradient-to-br from-[hsl(220,15%,8%)] to-[hsl(220,15%,5%)] p-6 relative overflow-hidden backdrop-blur-sm\";\n\n    switch (visual) {\n      case \"threat-overview\":\n        return (\n          <div className={baseClasses}>\n            {/* Enhanced Background Grid */}\n            <div className=\"absolute inset-0 opacity-5\">\n              <div className=\"grid grid-cols-12 grid-rows-12 gap-px h-full\">\n                {Array.from({ length: 144 }).map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"bg-[hsl(330,100%,50%)] rounded-sm animate-pulse\"\n                    style={{\n                      animationDelay: `${i * 30}ms`,\n                      animationDuration: `${2 + (i % 3)}s`\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Floating particles */}\n            <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n              {Array.from({ length: 20 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 h-1 bg-[hsl(330,100%,50%)] rounded-full animate-pulse opacity-30\"\n                  style={{\n                    left: `${Math.random() * 100}%`,\n                    top: `${Math.random() * 100}%`,\n                    animationDelay: `${Math.random() * 3}s`,\n                    animationDuration: `${2 + Math.random() * 2}s`\n                  }}\n                />\n              ))}\n            </div>\n\n            {/* Main Content */}\n            <div className=\"relative z-10 grid grid-cols-2 gap-6 h-full\">\n              {/* Threat Categories */}\n              <div className=\"space-y-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 mb-3 flex items-center\">\n                  <div className=\"w-2 h-2 bg-[hsl(330,100%,50%)] rounded-full mr-2 animate-pulse\"></div>\n                  Threat Categories\n                </h4>\n                {[\n                  { name: \"Critical\", count: 23, color: \"red\", percentage: 78 },\n                  { name: \"High\", count: 156, color: \"orange\", percentage: 65 },\n                  { name: \"Medium\", count: 342, color: \"yellow\", percentage: 45 },\n                  { name: \"Low\", count: 1326, color: \"green\", percentage: 25 }\n                ].map((threat, i) => (\n                  <div key={i} className=\"space-y-2 group\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`w-3 h-3 rounded-full bg-${threat.color}-500 group-hover:scale-110 transition-transform duration-300`}></div>\n                        <span className=\"text-sm text-gray-300 group-hover:text-white transition-colors\">{threat.name}</span>\n                        <span className=\"text-xs text-gray-500\">({threat.count.toLocaleString()})</span>\n                      </div>\n                      <span className=\"text-xs font-mono text-[hsl(330,100%,50%)] group-hover:scale-110 transition-transform\">{threat.percentage}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-700/40 rounded-full h-2 overflow-hidden\">\n                      <div\n                        className={`h-full bg-gradient-to-r from-${threat.color}-500/60 to-${threat.color}-500 rounded-full transition-all duration-2000 animate-pulse`}\n                        style={{\n                          width: `${threat.percentage}%`,\n                          animationDelay: `${i * 200}ms`\n                        }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Enhanced Live Dashboard */}\n              <div className=\"bg-[hsl(0,0%,6%)]/80 rounded-xl p-4 border border-[hsl(330,100%,50%)]/20 backdrop-blur-sm relative overflow-hidden\">\n                {/* Scanning line effect */}\n                <div className=\"absolute inset-0 overflow-hidden\">\n                  <div className=\"absolute w-full h-px bg-gradient-to-r from-transparent via-[hsl(330,100%,50%)] to-transparent animate-ping\" style={{ top: '30%' }}></div>\n                </div>\n\n                <div className=\"text-center mb-4 relative z-10\">\n                  <div className=\"text-3xl font-bold text-[hsl(330,100%,50%)] mb-1 animate-pulse\">1,847</div>\n                  <div className=\"text-xs text-gray-400\">Active Threats Detected</div>\n                  <div className=\"text-xs text-[hsl(267,100%,67%)] mt-1\">Live monitoring • Updated 2s ago</div>\n                </div>\n\n                {/* Enhanced Real-time Activity Feed */}\n                <div className=\"space-y-2 text-xs relative z-10\">\n                  {[\n                    { type: \"Malware detected\", severity: \"red\", time: \"12:34:56\" },\n                    { type: \"Suspicious traffic\", severity: \"yellow\", time: \"12:34:52\" },\n                    { type: \"Brute force attempt\", severity: \"orange\", time: \"12:34:48\" },\n                    { type: \"Policy violation\", severity: \"blue\", time: \"12:34:44\" }\n                  ].map((alert, i) => (\n                    <div key={i} className={`flex items-center justify-between py-2 px-3 bg-${alert.severity}-500/10 rounded-lg border-l-2 border-${alert.severity}-500 hover:bg-${alert.severity}-500/20 transition-all duration-300 group`}>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`w-2 h-2 bg-${alert.severity}-500 rounded-full animate-pulse group-hover:scale-125 transition-transform`}></div>\n                        <span className={`text-${alert.severity}-300 group-hover:text-${alert.severity}-200 transition-colors`}>{alert.type}</span>\n                      </div>\n                      <span className=\"text-gray-500 font-mono\">{alert.time}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"alert-triage\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                  AI Alert Triage Engine\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\"></div>\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                  </div>\n                  <span className=\"text-xs text-green-400\">Processing</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3 flex-1\">\n                {[\n                  { id: \"ALT-2024-001\", type: \"Malware\", confidence: 95, severity: \"Critical\", source: \"Endpoint\", status: \"analyzing\" },\n                  { id: \"ALT-2024-002\", type: \"Phishing\", confidence: 87, severity: \"High\", source: \"Email\", status: \"confirmed\" },\n                  { id: \"ALT-2024-003\", type: \"Anomaly\", confidence: 72, severity: \"Medium\", source: \"Network\", status: \"pending\" },\n                  { id: \"ALT-2024-004\", type: \"Policy\", confidence: 45, severity: \"Low\", source: \"User\", status: \"dismissed\" }\n                ].map((alert, i) => (\n                  <div key={i} className=\"p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/40 transition-all duration-300 group backdrop-blur-sm\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-3 h-3 rounded-full group-hover:scale-110 transition-transform ${\n                          alert.severity === 'Critical' ? 'bg-red-500 animate-pulse' :\n                          alert.severity === 'High' ? 'bg-orange-500' :\n                          alert.severity === 'Medium' ? 'bg-yellow-500' : 'bg-green-500'\n                        }`}></div>\n                        <span className=\"text-sm font-mono text-gray-300 group-hover:text-white transition-colors\">{alert.id}</span>\n                        <span className=\"text-xs px-2 py-1 rounded-full bg-gray-700/50 text-gray-400 group-hover:bg-gray-600/50 transition-colors\">{alert.type}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-[hsl(330,100%,50%)] text-sm font-mono group-hover:scale-105 transition-transform\">{alert.confidence}%</div>\n                        <div className={`w-2 h-2 rounded-full ${\n                          alert.status === 'analyzing' ? 'bg-blue-500 animate-pulse' :\n                          alert.status === 'confirmed' ? 'bg-green-500' :\n                          alert.status === 'pending' ? 'bg-yellow-500 animate-pulse' :\n                          'bg-gray-500'\n                        }`}></div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-gray-400\">Source: <span className=\"text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{alert.source}</span></span>\n                        <span className=\"text-gray-400\">Severity: <span className={`transition-colors ${\n                          alert.severity === 'Critical' ? 'text-red-400' :\n                          alert.severity === 'High' ? 'text-orange-400' :\n                          alert.severity === 'Medium' ? 'text-yellow-400' : 'text-green-400'\n                        }`}>{alert.severity}</span></span>\n                      </div>\n\n                      <div className=\"flex space-x-1\">\n                        <button className=\"px-2 py-1 text-xs bg-green-600/20 text-green-400 rounded-md hover:bg-green-600/40 transition-all duration-200 hover:scale-105\">Accept</button>\n                        <button className=\"px-2 py-1 text-xs bg-red-600/20 text-red-400 rounded-md hover:bg-red-600/40 transition-all duration-200 hover:scale-105\">Reject</button>\n                      </div>\n                    </div>\n\n                    {/* Enhanced AI Confidence Bar */}\n                    <div className=\"mt-2\">\n                      <div className=\"w-full bg-gray-700/40 rounded-full h-1.5 overflow-hidden\">\n                        <div\n                          className=\"h-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full transition-all duration-1000 relative\"\n                          style={{ width: `${alert.confidence}%` }}\n                        >\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"analytics\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <BarChart3 className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Tactical Analytics Dashboard\n                </h4>\n                <div className=\"flex space-x-2\">\n                  <button className=\"px-3 py-1 text-xs bg-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] rounded-md border border-[hsl(330,100%,50%)]/20 hover:bg-[hsl(330,100%,50%)]/30 transition-all\">Live</button>\n                  <button className=\"px-3 py-1 text-xs bg-gray-700/50 text-gray-400 rounded-md hover:bg-gray-600/50 transition-all\">Historical</button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                {[\n                  { label: \"Avg Response Time\", value: \"2.3s\", color: \"hsl(330,100%,50%)\", trend: \"down\" },\n                  { label: \"Accuracy Rate\", value: \"98.7%\", color: \"green-400\", trend: \"up\" }\n                ].map((metric, i) => (\n                  <div key={i} className=\"text-center p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/20 transition-all duration-300 group\">\n                    <div className={`text-lg font-bold text-${metric.color} group-hover:scale-105 transition-transform`}>{metric.value}</div>\n                    <div className=\"text-xs text-gray-400\">{metric.label}</div>\n                    <div className={`text-xs mt-1 ${metric.trend === 'up' ? 'text-green-400' : 'text-blue-400'}`}>\n                      {metric.trend === 'up' ? '↗' : '↘'} Trending {metric.trend}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Enhanced Interactive Chart Area */}\n              <div className=\"flex-1 relative bg-[hsl(0,0%,6%)]/60 rounded-xl border border-gray-700/30 p-4 overflow-hidden\">\n                {/* Chart background grid */}\n                <div className=\"absolute inset-4\">\n                  <svg className=\"w-full h-full opacity-10\" viewBox=\"0 0 300 150\">\n                    <defs>\n                      <pattern id=\"chartGrid\" width=\"30\" height=\"15\" patternUnits=\"userSpaceOnUse\">\n                        <path d=\"M 30 0 L 0 0 0 15\" fill=\"none\" stroke=\"hsl(330,100%,50%)\" strokeWidth=\"0.5\"/>\n                      </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#chartGrid)\"/>\n                  </svg>\n                </div>\n\n                {/* Main chart */}\n                <svg className=\"w-full h-full relative z-10\" viewBox=\"0 0 300 150\">\n                  <defs>\n                    <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0.4\"/>\n                      <stop offset=\"50%\" stopColor=\"hsl(267,100%,67%)\" stopOpacity=\"0.2\"/>\n                      <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0\"/>\n                    </linearGradient>\n                    <filter id=\"glow\">\n                      <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                      <feMerge>\n                        <feMergeNode in=\"coloredBlur\"/>\n                        <feMergeNode in=\"SourceGraphic\"/>\n                      </feMerge>\n                    </filter>\n                  </defs>\n\n                  {/* Data area */}\n                  <path\n                    d=\"M15,120 Q45,80 75,90 T135,70 T195,85 T255,75 T285,65 L285,130 L15,130 Z\"\n                    fill=\"url(#areaGradient)\"\n                  />\n\n                  {/* Data line */}\n                  <path\n                    d=\"M15,120 Q45,80 75,90 T135,70 T195,85 T255,75 T285,65\"\n                    fill=\"none\"\n                    stroke=\"hsl(330,100%,50%)\"\n                    strokeWidth=\"2\"\n                    filter=\"url(#glow)\"\n                    className=\"animate-pulse\"\n                  />\n\n                  {/* Animated data points */}\n                  {[\n                    { x: 75, y: 90 }, { x: 135, y: 70 }, { x: 195, y: 85 }, { x: 255, y: 75 }\n                  ].map((point, i) => (\n                    <g key={i}>\n                      <circle\n                        cx={point.x}\n                        cy={point.y}\n                        r=\"4\"\n                        fill=\"hsl(330,100%,50%)\"\n                        filter=\"url(#glow)\"\n                        className=\"animate-pulse cursor-pointer\"\n                        style={{ animationDelay: `${i * 200}ms` }}\n                      />\n                      <circle\n                        cx={point.x}\n                        cy={point.y}\n                        r=\"8\"\n                        fill=\"none\"\n                        stroke=\"hsl(330,100%,50%)\"\n                        strokeWidth=\"1\"\n                        opacity=\"0.3\"\n                        className=\"animate-ping\"\n                        style={{ animationDelay: `${i * 200}ms` }}\n                      />\n                    </g>\n                  ))}\n                </svg>\n\n                {/* Enhanced Hover Tooltips */}\n                <div className=\"absolute top-2 right-2 text-xs text-gray-400 bg-[hsl(0,0%,6%)]/80 rounded-lg p-2 border border-gray-700/30\">\n                  <div className=\"text-white\">Attack Pattern Analysis</div>\n                  <div className=\"text-[hsl(330,100%,50%)]\">Last 24h • Live</div>\n                  <div className=\"text-[hsl(267,100%,67%)] text-xs mt-1\">Next update: 30s</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"playbooks\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <Workflow className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Automated Playbook Engine\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex space-x-1\">\n                    {[0, 1, 2].map((i) => (\n                      <div\n                        key={i}\n                        className=\"w-1 h-4 bg-blue-500 rounded-full animate-pulse\"\n                        style={{ animationDelay: `${i * 0.2}s` }}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-blue-400\">Executing</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4 flex-1\">\n                {[\n                  { step: \"Detect\", desc: \"AI identifies threat patterns\", icon: \"🔍\", time: \"0.2s\", status: \"complete\" },\n                  { step: \"Analyze\", desc: \"Context enrichment & correlation\", icon: \"🧠\", time: \"0.8s\", status: \"complete\" },\n                  { step: \"Contain\", desc: \"Isolate affected systems\", icon: \"🛡️\", time: \"1.2s\", status: \"active\" },\n                  { step: \"Remediate\", desc: \"Automated threat removal\", icon: \"🔧\", time: \"2.1s\", status: \"pending\" }\n                ].map((playbook, i) => {\n                  const isActive = i <= 2;\n                  const isCurrent = i === 2;\n\n                  return (\n                    <div key={i} className=\"relative\">\n                      {/* Enhanced Connection Line */}\n                      {i < 3 && (\n                        <div className=\"absolute left-4 top-12 w-px h-6\">\n                          <div className={`w-full h-full transition-all duration-1000 ${\n                            isActive ? 'bg-gradient-to-b from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)]' : 'bg-gray-600'\n                          }`}></div>\n                          {isActive && (\n                            <div className=\"absolute inset-0 w-full bg-gradient-to-b from-[hsl(330,100%,50%)] to-transparent animate-pulse\"></div>\n                          )}\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center space-x-4 p-4 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/30 transition-all duration-300 group\">\n                        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs transition-all duration-500 relative ${\n                          isActive ?\n                          'border-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]' :\n                          'border-gray-600 text-gray-400'\n                        }`}>\n                          <span className=\"relative z-10\">{playbook.icon}</span>\n                          {isCurrent && (\n                            <div className=\"absolute inset-0 rounded-full border-2 border-[hsl(330,100%,50%)] animate-ping\"></div>\n                          )}\n                        </div>\n\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className={`text-sm font-medium transition-colors group-hover:text-[hsl(330,100%,50%)] ${\n                              isActive ? 'text-white' : 'text-gray-400'\n                            }`}>\n                              {playbook.step}\n                            </span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-xs text-[hsl(330,100%,50%)] font-mono\">\n                                {playbook.time}\n                              </span>\n                              <div className={`text-xs px-2 py-1 rounded-full ${\n                                playbook.status === 'complete' ? 'bg-green-500/20 text-green-400' :\n                                playbook.status === 'active' ? 'bg-blue-500/20 text-blue-400' :\n                                'bg-gray-500/20 text-gray-400'\n                              }`}>\n                                {playbook.status}\n                              </div>\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-gray-400 mt-1 group-hover:text-gray-300 transition-colors\">{playbook.desc}</p>\n\n                          {/* Enhanced Progress Bar */}\n                          <div className=\"mt-3 w-full bg-gray-700/40 rounded-full h-1.5 overflow-hidden\">\n                            <div\n                              className={`h-full rounded-full transition-all duration-1000 relative ${\n                                isActive ? 'bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)]' : 'bg-gray-600'\n                              } ${isActive ? 'w-full' : 'w-0'}`}\n                            >\n                              {isCurrent && (\n                                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\"></div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n\n              {/* Enhanced Status Footer */}\n              <div className=\"mt-4 p-4 bg-green-500/10 border border-green-500/20 rounded-xl text-center backdrop-blur-sm relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/5 via-transparent to-green-500/5 animate-pulse\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"text-sm text-green-400 font-medium flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                    Playbook Status: Active\n                  </div>\n                  <div className=\"text-xs text-gray-400 mt-1\">Last execution: 2 minutes ago • Success rate: 99.2%</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"entity-mapping\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"relative h-full overflow-hidden\">\n              {/* Network visualization background */}\n              <div className=\"absolute inset-0 opacity-20\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 400 300\">\n                  {/* Connection lines */}\n                  {[\n                    { x1: 100, y1: 150, x2: 200, y2: 100 },\n                    { x1: 100, y1: 150, x2: 200, y2: 200 },\n                    { x1: 200, y1: 100, x2: 300, y2: 150 },\n                    { x1: 200, y1: 200, x2: 300, y2: 150 },\n                    { x1: 300, y1: 150, x2: 350, y2: 100 },\n                    { x1: 300, y1: 150, x2: 350, y2: 200 }\n                  ].map((line, i) => (\n                    <line\n                      key={i}\n                      x1={line.x1}\n                      y1={line.y1}\n                      x2={line.x2}\n                      y2={line.y2}\n                      stroke=\"hsl(330,100%,50%)\"\n                      strokeWidth=\"1\"\n                      className=\"animate-pulse\"\n                      style={{ animationDelay: `${i * 0.2}s` }}\n                    />\n                  ))}\n                </svg>\n              </div>\n\n              <div className=\"relative z-10 h-full flex flex-col\">\n                <h4 className=\"text-sm font-semibold text-gray-300 mb-4 flex items-center\">\n                  <Users className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  User Entity Behavior Analytics\n                </h4>\n\n                <div className=\"flex-1 grid grid-cols-3 gap-6 items-center\">\n                  {[\n                    { name: \"John Doe\", role: \"Admin\", risk: \"High\", activities: 47 },\n                    { name: \"Sarah Chen\", role: \"User\", risk: \"Medium\", activities: 23 },\n                    { name: \"Mike Johnson\", role: \"Guest\", risk: \"Low\", activities: 12 }\n                  ].map((user, i) => (\n                    <div key={i} className=\"text-center group\">\n                      <div className=\"relative mb-3\">\n                        <div className={`w-16 h-16 rounded-full bg-gradient-to-r mx-auto transition-all duration-500 group-hover:scale-110 ${\n                          user.risk === 'High' ? 'from-red-500 to-red-600 animate-pulse' :\n                          user.risk === 'Medium' ? 'from-yellow-500 to-yellow-600' :\n                          'from-green-500 to-green-600'\n                        }`}>\n                          <div className=\"w-full h-full rounded-full border-2 border-white/20 flex items-center justify-center text-white font-bold text-lg\">\n                            {user.name.split(' ').map(n => n[0]).join('')}\n                          </div>\n                        </div>\n\n                        {/* Risk indicator */}\n                        <div className={`absolute -top-1 -right-1 w-4 h-4 rounded-full border-2 border-[hsl(220,15%,5%)] ${\n                          user.risk === 'High' ? 'bg-red-500 animate-pulse' :\n                          user.risk === 'Medium' ? 'bg-yellow-500' :\n                          'bg-green-500'\n                        }`}></div>\n                      </div>\n\n                      <div className=\"space-y-1\">\n                        <div className=\"text-sm font-medium text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{user.name}</div>\n                        <div className=\"text-xs text-gray-400\">{user.role}</div>\n                        <div className={`text-xs font-medium ${\n                          user.risk === 'High' ? 'text-red-400' :\n                          user.risk === 'Medium' ? 'text-yellow-400' :\n                          'text-green-400'\n                        }`}>\n                          {user.risk} Risk\n                        </div>\n                        <div className=\"text-xs text-gray-500\">{user.activities} activities</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Activity timeline */}\n                <div className=\"mt-6 p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30\">\n                  <div className=\"text-xs text-gray-400 mb-2\">Recent Activity Timeline</div>\n                  <div className=\"flex space-x-1\">\n                    {Array.from({ length: 20 }).map((_, i) => (\n                      <div\n                        key={i}\n                        className={`w-1 rounded-full transition-all duration-300 ${\n                          Math.random() > 0.7 ? 'h-6 bg-red-500' :\n                          Math.random() > 0.5 ? 'h-4 bg-yellow-500' :\n                          'h-2 bg-green-500'\n                        }`}\n                        style={{ animationDelay: `${i * 50}ms` }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"compliance\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <h4 className=\"text-sm font-semibold text-gray-300 mb-4 flex items-center\">\n                <FileText className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                Compliance & Audit Reporting\n              </h4>\n\n              <div className=\"space-y-4 flex-1\">\n                {[\n                  { name: \"ISO 27001\", score: 94, color: \"green\", lastAudit: \"2 days ago\" },\n                  { name: \"NIST Framework\", score: 89, color: \"blue\", lastAudit: \"1 week ago\" },\n                  { name: \"SOC 2 Type II\", score: 96, color: \"purple\", lastAudit: \"3 days ago\" },\n                  { name: \"GDPR Compliance\", score: 92, color: \"orange\", lastAudit: \"5 days ago\" }\n                ].map((standard, i) => (\n                  <div key={i} className=\"p-4 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/30 transition-all duration-300 group\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <span className=\"text-sm font-medium text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{standard.name}</span>\n                        <div className=\"text-xs text-gray-400 mt-1\">Last audit: {standard.lastAudit}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-[hsl(330,100%,50%)]\">{standard.score}%</div>\n                        <div className=\"text-xs text-green-400\">Compliant</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex-1 bg-gray-700/40 rounded-full h-2 overflow-hidden\">\n                        <div\n                          className=\"h-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full transition-all duration-1000 relative\"\n                          style={{ width: `${standard.score}%` }}\n                        >\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n                        </div>\n                      </div>\n                      <span className=\"text-xs text-[hsl(330,100%,50%)] font-mono\">{standard.score}%</span>\n                    </div>\n\n                    {/* Mini compliance breakdown */}\n                    <div className=\"mt-3 grid grid-cols-3 gap-2\">\n                      {['Controls', 'Policies', 'Procedures'].map((item, j) => (\n                        <div key={j} className=\"text-center\">\n                          <div className=\"text-xs text-gray-400\">{item}</div>\n                          <div className=\"text-xs font-mono text-green-400\">{Math.floor(Math.random() * 10) + 90}%</div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Report generation footer */}\n              <div className=\"mt-4 p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-[hsl(330,100%,50%)]/20 text-center\">\n                <button className=\"w-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white py-2 px-4 rounded-lg text-sm font-medium hover:opacity-90 transition-opacity\">\n                  Generate Compliance Report\n                </button>\n                <div className=\"text-xs text-gray-400 mt-2\">Auto-generated reports available 24/7</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return <div className={baseClasses}></div>;\n    }\n  };\n\n  return (\n    <div ref={containerRef} className=\"dashboard-showcase relative bg-[hsl(220,15%,5%)] py-20\">\n      {/* Enhanced Background Effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(330,100%,50%)]/5 to-[hsl(267,100%,67%)]/5\"></div>\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,hsl(330,100%,50%)_0px,transparent_50%)] opacity-10\"></div>\n\n      {/* Section heading */}\n      <div className=\"container mx-auto max-w-7xl px-6 mb-20\">\n        <div className=\"text-center\">\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-white mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n            AI-Powered Security Operations\n          </h2>\n          <p className=\"text-gray-300 text-xl max-w-3xl mx-auto\">\n            Experience next-generation cybersecurity with our intelligent SOC platform\n          </p>\n        </div>\n      </div>\n\n      {/* Feature sections */}\n      <div className=\"space-y-32\">\n        {featureSteps.map((step, index) => (\n          <div\n            key={step.id}\n            className={`feature-section-${index} container mx-auto max-w-7xl px-6`}\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 w-full items-center\">\n              {/* Left Panel - Text Content */}\n              <div className=\"flex flex-col justify-center space-y-8\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    {(() => {\n                      const IconComponent = step.icon;\n                      return <IconComponent className=\"w-10 h-10 text-[hsl(330,100%,50%)]\" />;\n                    })()}\n                    <span className=\"text-sm text-[hsl(330,100%,50%)] font-mono bg-[hsl(330,100%,50%)]/10 px-3 py-1 rounded-full\">\n                      {String(index + 1).padStart(2, '0')} / {String(featureSteps.length).padStart(2, '0')}\n                    </span>\n                  </div>\n\n                  <h3 className=\"feature-title text-4xl lg:text-5xl font-bold text-white leading-tight bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent opacity-0\">\n                    {step.title}\n                  </h3>\n\n                  <p className=\"feature-description text-gray-300 text-xl leading-relaxed opacity-0\">\n                    {step.description}\n                  </p>\n                </div>\n              </div>\n\n              {/* Right Panel - Visual Content */}\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-full h-96 lg:h-[600px] relative\">\n                  <div className=\"w-full h-full relative feature-visual\">\n                    {/* Glow effect behind visual */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-[hsl(330,100%,50%)]/10 to-[hsl(267,100%,67%)]/10 rounded-2xl blur-xl\"></div>\n                    <div className=\"relative z-10\">\n                      {renderVisual(step.visual)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":40578},"client/src/components/sections/faq.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Plus, Minus } from \"lucide-react\";\n\nexport default function FAQ() {\n  const [openFAQ, setOpenFAQ] = useState<number | null>(null);\n\n  const faqs = [\n    {\n      question: \"How quickly can I deploy Prophet Security?\",\n      answer:\n        \"Most customers are up and running within 24 hours. Our platform integrates seamlessly with existing security tools and requires minimal configuration.\",\n    },\n    {\n      question: \"What types of threats can the AI agents detect?\",\n      answer:\n        \"Our AI agents detect a wide range of threats including malware, phishing, insider threats, data breaches, and advanced persistent threats (APTs). The system continuously learns and adapts to new threat patterns.\",\n    },\n    {\n      question: \"How does Prophet Security handle false positives?\",\n      answer:\n        \"Our AI uses advanced machine learning algorithms to minimize false positives. The system learns from your environment and feedback, continuously improving accuracy over time.\",\n    },\n    {\n      question: \"What compliance standards does Prophet Security support?\",\n      answer:\n        \"We support major compliance frameworks including SOC 2, ISO 27001, PCI DSS, HIPAA, and GDPR. Our platform provides automated compliance reporting and audit trails.\",\n    },\n  ];\n\n  const toggleFAQ = (index: number) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <section className=\"py-20 px-6 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold glow-text\">Frequently Asked Questions</h2>\n        </motion.div>\n\n        <div className=\"space-y-4\">\n          {faqs.map((faq, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              viewport={{ once: true }}\n              className=\"border-b border-gray-800 last:border-b-0\"\n            >\n              <button\n                className=\"w-full text-left py-6 flex items-center justify-between focus:outline-none group\"\n                onClick={() => toggleFAQ(index)}\n              >\n                <span className=\"text-lg font-semibold group-hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  {faq.question}\n                </span>\n                <motion.div\n                  animate={{ rotate: openFAQ === index ? 180 : 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  {openFAQ === index ? (\n                    <Minus className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                  ) : (\n                    <Plus className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                  )}\n                </motion.div>\n              </button>\n              <AnimatePresence>\n                {openFAQ === index && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: \"auto\" }}\n                    exit={{ opacity: 0, height: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"pb-6\"\n                  >\n                    <p className=\"text-gray-300\">{faq.answer}</p>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3787},"client/src/components/sections/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-16 px-6 border-t border-gray-800 relative bg-[hsl(220,15%,5%)]\">\n      <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-[hsl(330,100%,50%)] to-transparent\"></div>\n      <div className=\"container mx-auto\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"md:col-span-2\"\n          >\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-3xl\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n            <p className=\"text-gray-400 mb-6 max-w-md\">\n              Transforming cybersecurity with intelligent AI agents that work around the clock to protect your organization from evolving threats.\n            </p>\n            <div className=\"flex space-x-4\">\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Twitter className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Linkedin className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Github className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n            viewport={{ once: true }}\n          >\n            <h4 className=\"font-semibold mb-4 text-[hsl(330,100%,50%)]\">Features</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  AI Threat Detection\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Automated Response\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Real-time Analytics\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Compliance Reports\n                </a>\n              </li>\n            </ul>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            viewport={{ once: true }}\n          >\n            <h4 className=\"font-semibold mb-4 text-[hsl(330,100%,50%)]\">Resources</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Documentation\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  API Reference\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Security Blog\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Support Center\n                </a>\n              </li>\n            </ul>\n          </motion.div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          viewport={{ once: true }}\n          className=\"border-t border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\"\n        >\n          <p className=\"text-gray-400 text-sm\">© 2025 Prophet Security. All rights reserved.</p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Terms of Service\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Security\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5795},"client/src/components/sections/header.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport { gsap } from \"gsap\";\nimport { motion } from \"framer-motion\";\nimport { TextPlugin } from \"gsap/TextPlugin\";\nimport { useLocation } from \"wouter\";\nimport LoginDialog from \"@/components/login-dialog\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\ngsap.registerPlugin(TextPlugin);\n\ninterface HeaderProps {\n  onRequestDemo: () => void;\n}\n\nexport default function Header({ onRequestDemo }: HeaderProps) {\n  const [, setLocation] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [showDemoRequest, setShowDemoRequest] = useState(false);\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\n  const headerRef = useRef<HTMLElement>(null);\n  const logoRef = useRef<HTMLDivElement>(null);\n  const logoTextRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Header slide down animation\n      gsap.fromTo(headerRef.current,\n        { y: -100, opacity: 0 },\n        { y: 0, opacity: 1, duration: 1, ease: \"power3.out\" }\n      );\n\n      // Logo writing animation\n      gsap.to(logoTextRef.current, {\n        duration: 1.5,\n        text: \"Alpha SOC\",\n        ease: \"none\",\n        delay: 0.5\n      });\n\n      // Logo glow pulse (without rotation)\n      const logoGlow = logoRef.current?.querySelector('.logo-glow');\n      if (logoGlow) {\n        gsap.to(logoGlow, {\n          scale: 1.1,\n          opacity: 0.8,\n          repeat: -1,\n          yoyo: true,\n          duration: 2,\n          ease: \"power2.inOut\"\n        });\n      }\n\n    }, headerRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  const onCloseDemoRequest = () => {\n    setShowDemoRequest(false);\n  };\n\n  return (\n    <motion.header \n      ref={headerRef}\n      className=\"fixed top-0 w-full z-50 bg-[hsl(220,15%,5%)]/95 backdrop-blur-lg border-b border-[hsl(330,100%,50%)]/20\"\n    >\n      <nav className=\"container mx-auto px-6 py-4 flex items-center justify-between\">\n        {/* Enhanced Logo */}\n        <div ref={logoRef} className=\"flex items-center space-x-3 cursor-pointer\" onClick={() => setLocation(\"/\")}>\n          <div className=\"relative\">\n            <div className=\"logo-glow w-10 h-10 bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-lg\"></div>\n            <div className=\"absolute inset-0 w-10 h-10 bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-lg blur-sm opacity-50\"></div>\n          </div>\n          <span ref={logoTextRef} className=\"text-2xl font-bold text-white glow-text\"></span>\n        </div>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden md:flex items-center space-x-8\">\n          <motion.a \n            href=\"#platform\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Platform\n          </motion.a>\n          <motion.a \n            href=\"#solutions\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Solutions\n          </motion.a>\n          <motion.a \n            href=\"#resources\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Resources\n          </motion.a>\n          <motion.a \n            href=\"#company\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Company\n          </motion.a>\n        </div>\n\n        {/* CTA Buttons */}\n        <div className=\"hidden md:flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\"\n            className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10 transition-all duration-300\"\n            onClick={() => setShowLoginDialog(true)}\n          >\n            Login\n          </Button>\n          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n            <Button \n              variant=\"glow\" \n              className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90 transition-all duration-300\"\n              onClick={onRequestDemo}\n            >\n              Request Demo\n            </Button>\n          </motion.div>\n        </div>\n\n        {/* Mobile Menu Button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"md:hidden text-white\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n        </Button>\n      </nav>\n\n      {/* Enhanced Mobile Menu */}\n      {isMenuOpen && (\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          className=\"md:hidden bg-[hsl(220,15%,5%)]/98 backdrop-blur-lg border-t border-[hsl(330,100%,50%)]/20\"\n        >\n          <div className=\"px-6 py-6 space-y-6\">\n            <motion.a \n              href=\"#platform\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Platform\n            </motion.a>\n            <motion.a \n              href=\"#solutions\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Solutions\n            </motion.a>\n            <motion.a \n              href=\"#resources\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Resources\n            </motion.a>\n            <motion.a \n              href=\"#company\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Company\n            </motion.a>\n            <div className=\"space-y-3 pt-4\">\n              <Button \n                variant=\"outline\"\n                size=\"lg\" \n                className=\"w-full border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10\"\n                onClick={() => setShowLoginDialog(true)}\n              >\n                Login\n              </Button>\n              <Button \n                variant=\"glow\" \n                size=\"lg\" \n                className=\"w-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90\"\n                onClick={onRequestDemo}\n              >\n                Request Demo\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n\n      {/* Login Dialog */}\n      <LoginDialog open={showLoginDialog} onOpenChange={setShowLoginDialog} />\n    </motion.header>\n  );\n}\n","size_bytes":7136},"client/src/components/sections/hero.tsx":{"content":"\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, AlertTriangle, CheckCircle, Zap, Brain, Eye, Mail, Laptop, Server, Database, Globe } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport { TextPlugin } from 'gsap/TextPlugin';\n\ngsap.registerPlugin(TextPlugin);\n\ninterface HeroProps {\n  onRequestDemo: () => void;\n}\n\nexport default function Hero({ onRequestDemo }: HeroProps) {\n  const [, setLocation] = useLocation();\n  const rightColumnRef = useRef(null);\n  const titleRef = useRef(null);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [attackActive, setAttackActive] = useState(false);\n\n  const attackSteps = [\n    { id: \"phishing\", label: \"Phishing Email\", icon: Mail, position: { x: 10, y: 20 } },\n    { id: \"endpoint\", label: \"Endpoint Compromise\", icon: Laptop, position: { x: 30, y: 40 } },\n    { id: \"lateral\", label: \"Lateral Movement\", icon: Server, position: { x: 60, y: 30 } },\n    { id: \"data\", label: \"Data Exfiltration\", icon: Database, position: { x: 85, y: 50 } },\n    { id: \"external\", label: \"External C&C\", icon: Globe, position: { x: 95, y: 10 } }\n  ];\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Writing animation for main title\n      gsap.to(titleRef.current, {\n        duration: 2,\n        text: \"Agentic AI SOC Platform\",\n        ease: \"none\",\n        delay: 0.5\n      });\n\n      // Spider web connections animation\n      gsap.set(\".web-line\", { scaleX: 0, transformOrigin: \"left center\" });\n      gsap.to(\".web-line\", {\n        scaleX: 1,\n        duration: 0.8,\n        stagger: 0.2,\n        ease: \"power2.out\",\n        delay: 2\n      });\n\n      // Attack propagation animation\n      const attackInterval = setInterval(() => {\n        setAttackActive(true);\n        setCurrentStep(0);\n        \n        const stepInterval = setInterval(() => {\n          setCurrentStep(prev => {\n            if (prev >= attackSteps.length - 1) {\n              clearInterval(stepInterval);\n              setTimeout(() => setAttackActive(false), 1000);\n              return 0;\n            }\n            return prev + 1;\n          });\n        }, 800);\n      }, 6000);\n\n      return () => clearInterval(attackInterval);\n    }, rightColumnRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  return (\n    <section className=\"pt-24 pb-16 px-4 relative overflow-hidden min-h-screen flex items-center\">\n      {/* Subtle background */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(220,15%,3%)] via-[hsl(220,15%,5%)] to-[hsl(267,100%,67%)]/3\"></div>\n      </div>\n\n      <div className=\"container mx-auto relative z-10\">\n        <div className=\"grid lg:grid-cols-2 gap-8 lg:gap-12 items-center max-w-7xl mx-auto\">\n          \n          {/* Left Column - Clean Description Panel */}\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n            className=\"space-y-6 lg:pr-8\"\n          >\n            {/* Compact Header */}\n            <div>\n              <motion.h1 \n                ref={titleRef}\n                className=\"text-4xl lg:text-5xl font-bold leading-tight mb-3\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.5 }}\n              >\n                <span className=\"glow-text bg-gradient-to-r from-white to-[hsl(330,100%,50%)] bg-clip-text text-transparent\"></span>\n              </motion.h1>\n              \n              <motion.p \n                className=\"text-lg text-gray-300 mb-6 leading-relaxed\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.5, duration: 0.6 }}\n              >\n                Advanced AI agents detect, analyze, and neutralize cyber threats in real-time with zero human intervention.\n              </motion.p>\n            </div>\n\n            {/* Compact Feature List */}\n            <motion.div \n              className=\"space-y-3\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 1.8, duration: 0.6 }}\n            >\n              {[\n                \"🧠 AI-powered threat correlation across all vectors\",\n                \"⚡ Sub-second response time with automated remediation\", \n                \"🔍 Deep behavioral analysis and anomaly detection\",\n                \"📊 Predictive threat intelligence and risk scoring\"\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-center text-sm text-gray-200\">\n                  <span className=\"mr-3\">{feature.split(' ')[0]}</span>\n                  <span>{feature.substring(feature.indexOf(' ') + 1)}</span>\n                </div>\n              ))}\n            </motion.div>\n\n            {/* Compact CTA */}\n            <motion.div \n              className=\"flex flex-col sm:flex-row gap-3 pt-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 2.1, duration: 0.6 }}\n            >\n              <Button\n                variant=\"glow\"\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90 transition-all duration-300 text-sm\"\n                onClick={onRequestDemo}\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Request Demo\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10 text-sm\"\n                onClick={() => setLocation(\"/dashboard\")}\n              >\n                <Brain className=\"w-4 h-4 mr-2\" />\n                Live Dashboard\n              </Button>\n            </motion.div>\n\n            {/* Compact Stats */}\n            <motion.div \n              className=\"grid grid-cols-3 gap-4 pt-6 border-t border-[hsl(330,100%,50%)]/10\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 2.4 }}\n            >\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-[hsl(330,100%,50%)]\">99.7%</div>\n                <div className=\"text-xs text-gray-400\">Threat Detection</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-[hsl(267,100%,67%)]\">0.3s</div>\n                <div className=\"text-xs text-gray-400\">Response Time</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-green-400\">Zero</div>\n                <div className=\"text-xs text-gray-400\">False Positives</div>\n              </div>\n            </motion.div>\n          </motion.div>\n\n          {/* Right Column - Interactive Spider Web Attack Visualization */}\n          <div ref={rightColumnRef} className=\"relative\">\n            <div className=\"bg-gradient-to-br from-[hsl(220,15%,8%)] to-[hsl(220,15%,12%)] rounded-2xl p-6 border border-[hsl(330,100%,50%)]/20 relative overflow-hidden h-96\">\n              \n              {/* Spider Web Background */}\n              <div className=\"absolute inset-0\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\">\n                  {/* Web structure lines */}\n                  {attackSteps.map((step, index) => (\n                    <g key={`web-${index}`}>\n                      {index < attackSteps.length - 1 && (\n                        <line\n                          className=\"web-line\"\n                          x1={step.position.x}\n                          y1={step.position.y}\n                          x2={attackSteps[index + 1].position.x}\n                          y2={attackSteps[index + 1].position.y}\n                          stroke={attackActive && currentStep >= index ? \"url(#attackGradient)\" : \"rgba(255,20,147,0.2)\"}\n                          strokeWidth=\"0.5\"\n                          strokeDasharray={attackActive && currentStep >= index ? \"0\" : \"2,2\"}\n                        />\n                      )}\n                      {/* Radial connections for spider web effect */}\n                      {index > 0 && (\n                        <line\n                          className=\"web-line\"\n                          x1=\"50\"\n                          y1=\"50\"\n                          x2={step.position.x}\n                          y2={step.position.y}\n                          stroke=\"rgba(138,43,226,0.1)\"\n                          strokeWidth=\"0.3\"\n                        />\n                      )}\n                    </g>\n                  ))}\n                  \n                  <defs>\n                    <linearGradient id=\"attackGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#ff1493\" />\n                      <stop offset=\"100%\" stopColor=\"#8a2be2\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n\n              {/* Attack Node Points */}\n              <div className=\"absolute inset-0\">\n                {attackSteps.map((step, index) => {\n                  const Icon = step.icon;\n                  const isActive = attackActive && currentStep >= index;\n                  const isCurrent = attackActive && currentStep === index;\n                  \n                  return (\n                    <div\n                      key={step.id}\n                      className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                      style={{ \n                        left: `${step.position.x}%`, \n                        top: `${step.position.y}%` \n                      }}\n                    >\n                      <motion.div\n                        className={`relative`}\n                        animate={{\n                          scale: isCurrent ? [1, 1.3, 1] : isActive ? 1.1 : 1,\n                        }}\n                        transition={{ duration: 0.6, repeat: isCurrent ? Infinity : 0 }}\n                      >\n                        {/* Node glow */}\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center border transition-all duration-500 ${\n                          isActive \n                            ? 'bg-red-500/20 border-red-400 shadow-lg shadow-red-400/50' \n                            : 'bg-[hsl(220,15%,15%)] border-[hsl(330,100%,50%)]/20'\n                        }`}>\n                          <Icon className={`w-4 h-4 transition-colors duration-500 ${\n                            isActive ? 'text-red-300' : 'text-gray-400'\n                          }`} />\n                        </div>\n                        \n                        {/* Node label */}\n                        <div className={`absolute top-10 left-1/2 transform -translate-x-1/2 whitespace-nowrap transition-all duration-500 ${\n                          isActive ? 'opacity-100' : 'opacity-60'\n                        }`}>\n                          <div className=\"text-xs font-medium text-center\">\n                            <div className={`${isActive ? 'text-red-300' : 'text-gray-300'}`}>\n                              {step.label}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Attack pulse for current step */}\n                        {isCurrent && (\n                          <div className=\"absolute inset-0 rounded-full border-2 border-red-400 animate-ping opacity-75\"></div>\n                        )}\n                      </motion.div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* AI Defense Center */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                <motion.div\n                  className=\"w-16 h-16 rounded-full bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center relative\"\n                  animate={{\n                    boxShadow: attackActive \n                      ? [\"0 0 20px rgba(255,20,147,0.5)\", \"0 0 40px rgba(255,20,147,0.8)\", \"0 0 20px rgba(255,20,147,0.5)\"]\n                      : \"0 0 20px rgba(255,20,147,0.3)\"\n                  }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                >\n                  <Shield className=\"w-8 h-8 text-white\" />\n                  <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"text-xs font-semibold text-[hsl(330,100%,50%)] whitespace-nowrap\">\n                      AI Defense Core\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Real-time status */}\n              <div className=\"absolute bottom-4 left-4 right-4\">\n                <div className=\"bg-[hsl(220,15%,10%)]/80 rounded-lg p-3 border border-[hsl(330,100%,50%)]/10\">\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-300\">\n                      {attackActive ? `Analyzing: ${attackSteps[currentStep]?.label}` : \"Monitoring Network\"}\n                    </span>\n                    <div className={`flex items-center space-x-2 ${attackActive ? 'text-red-400' : 'text-green-400'}`}>\n                      <div className={`w-2 h-2 rounded-full ${attackActive ? 'bg-red-400' : 'bg-green-400'} animate-pulse`}></div>\n                      <span className=\"font-medium\">{attackActive ? 'Threat Active' : 'Secure'}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14168},"client/src/components/sections/integrations.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Brain, Github, Cloud, Shield, Database, Zap } from \"lucide-react\";\n\nexport default function Integrations() {\n  const integrations = [\n    { icon: <Cloud className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" /> },\n    { icon: <Shield className=\"w-6 h-6 text-[hsl(267,100%,67%)]\" /> },\n    { icon: <Database className=\"w-6 h-6 text-[hsl(0,0%,90%)]\" /> },\n    { icon: <Zap className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" /> },\n    { icon: <Github className=\"w-6 h-6 text-gray-300\" /> },\n    { icon: <Cloud className=\"w-6 h-6 text-[hsl(267,100%,67%)]\" /> },\n  ];\n\n  return (\n    <section className=\"min-h-screen py-20 px-6 bg-[hsl(220,15%,5%)] flex items-center justify-center\">\n  <div className=\"flex flex-col items-center text-center\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold mb-4 glow-text\">Integrations That Simply Work</h2>\n          <p className=\"text-xl text-gray-300\">Connect with your existing security stack in minutes</p>\n        </motion.div>\n\n        {/* Icons Circle */}\n        <div className=\"relative w-96 h-96 flex items-center justify-center mx-auto\">\n          {/* Central Brain Icon */}\n          <motion.div \n            initial={{ scale: 0, rotate: -180 }}\n            whileInView={{ scale: 1, rotate: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            viewport={{ once: true }}\n            className=\"absolute z-10\"\n            style={{ left: '50%', top: '50%', transform: 'translate(-50%, -50%)' }}\n          >\n            <div className=\"w-20 h-20 bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] rounded-full flex items-center justify-center glow-button\">\n              <Brain className=\"w-8 h-8 text-white\" />\n            </div>\n          </motion.div>\n\n          {/* Surrounding Integration Icons in a Circle */}\n          {integrations.map((integration, index) => {\n            const angle = (index / integrations.length) * 2 * Math.PI;\n            const radius = 160; // Adjust distance from center\n            const x = Math.cos(angle) * radius;\n            const y = Math.sin(angle) * radius;\n\n            return (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, scale: 0 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}\n                viewport={{ once: true }}\n                style={{\n                  position: \"absolute\",\n                  left: `calc(50% + ${x}px)`,\n                  top: `calc(50% + ${y}px)`,\n                  transform: \"translate(-50%, -50%)\",\n                }}\n              >\n                <div className=\"w-16 h-16 bg-[hsl(220,15%,10%)]/80 rounded-lg border border-[hsl(330,100%,50%)]/30 flex items-center justify-center hover:border-[hsl(330,100%,50%)]/60 hover:shadow-[0_0_12px_hsla(330,100%,50%,0.35)] transition-all\">\n                  {integration.icon}\n                </div>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3314},"client/src/components/sections/testimonials.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight, Quote } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Testimonials() {\n  const [currentTestimonial, setCurrentTestimonial] = useState(0);\n\n  const testimonials = [\n    {\n      quote: \"Prophet Security reduced our mean time to response by 80%. The AI agents handle routine incidents while our team focuses on strategic threats.\",\n      name: \"Sarah Chen\",\n      title: \"CISO, TechCorp\",\n    },\n    {\n      quote: \"The platform's ability to automatically correlate threats across our entire security stack is game-changing. We catch threats we would have missed.\",\n      name: \"Marcus Rodriguez\",\n      title: \"Security Director, FinanceFirst\",\n    },\n    {\n      quote: \"Implementation was seamless. Within 24 hours, we had AI agents actively monitoring and responding to security events across our infrastructure.\",\n      name: \"Emily Watson\",\n      title: \"Head of Security, CloudScale\",\n    },\n  ];\n\n  const nextTestimonial = () => {\n    setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const prevTestimonial = () => {\n    setCurrentTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  return (\n    <section className=\"py-20 px-6 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto\">\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold mb-4 glow-text\">What Security Leaders Say</h2>\n        </motion.div>\n        \n        <div className=\"max-w-6xl mx-auto\">\n          {/* Desktop View - All testimonials */}\n          <div className=\"hidden md:grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n                viewport={{ once: true }}\n                className=\"testimonial-card rounded-2xl p-8 backdrop-blur-sm hover:border-[hsl(330,100%,50%)]/40 transition-colors\"\n              >\n                <div className=\"mb-6\">\n                  <Quote className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                </div>\n                <p className=\"text-gray-300 mb-6\">\n                  \"{testimonial.quote}\"\n                </p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full mr-4\"></div>\n                  <div>\n                    <p className=\"font-semibold\">{testimonial.name}</p>\n                    <p className=\"text-sm text-gray-400\">{testimonial.title}</p>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Mobile View - Carousel */}\n          <div className=\"md:hidden\">\n            <div className=\"relative overflow-hidden\">\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key={currentTestimonial}\n                  initial={{ opacity: 0, x: 100 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -100 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"testimonial-card rounded-2xl p-8 backdrop-blur-sm\"\n                >\n                  <div className=\"mb-6\">\n                    <Quote className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                  </div>\n                  <p className=\"text-gray-300 mb-6\">\n                    \"{testimonials[currentTestimonial].quote}\"\n                  </p>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full mr-4\"></div>\n                    <div>\n                      <p className=\"font-semibold\">{testimonials[currentTestimonial].name}</p>\n                      <p className=\"text-sm text-gray-400\">{testimonials[currentTestimonial].title}</p>\n                    </div>\n                  </div>\n                </motion.div>\n              </AnimatePresence>\n            </div>\n          </div>\n          \n          {/* Carousel Buttons */}\n          <div className=\"flex justify-center mt-8 space-x-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={prevTestimonial}\n              className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/30 hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ChevronLeft className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={nextTestimonial}\n              className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/30 hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ChevronRight className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5386},"client/src/components/sections/trusted-by.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default function TrustedBy() {\n  const sectionRef = useRef<HTMLElement>(null);\n  const titleRef = useRef<HTMLParagraphElement>(null);\n  const logosRef = useRef<HTMLDivElement>(null);\n\n  const logos = [\n    { name: \"YC\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Stripe\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Zip\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Tech Co\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Secure\", color: \"bg-[hsl(220,15%,10%)]\" },\n  ];\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Title animation\n      gsap.fromTo(titleRef.current,\n        { opacity: 0, y: 20 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.6,\n          ease: \"power2.out\",\n          scrollTrigger: {\n            trigger: titleRef.current,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          }\n        }\n      );\n\n      // Logos stagger animation\n      gsap.fromTo(logosRef.current?.children,\n        { opacity: 0, scale: 0.8 },\n        {\n          opacity: 1,\n          scale: 1,\n          duration: 0.4,\n          stagger: 0.1,\n          ease: \"back.out(1.7)\",\n          scrollTrigger: {\n            trigger: logosRef.current,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          }\n        }\n      );\n\n      // Hover animations for logos\n      if (logosRef.current) {\n        Array.from(logosRef.current.children).forEach((logo) => {\n          const logoElement = logo as HTMLElement;\n          \n          logoElement.addEventListener('mouseenter', () => {\n            gsap.to(logoElement, { scale: 1.1, duration: 0.3, ease: \"power2.out\" });\n          });\n\n          logoElement.addEventListener('mouseleave', () => {\n            gsap.to(logoElement, { scale: 1, duration: 0.3, ease: \"power2.out\" });\n          });\n        });\n      }\n    }, sectionRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  return (\n    <section ref={sectionRef} className=\"py-16 px-6 border-t border-[hsl(330,100%,50%)]/20 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto\">\n        <p \n          ref={titleRef}\n          className=\"text-center text-gray-400 mb-8\"\n        >\n          Trusted by industry leaders\n        </p>\n        \n        <div \n          ref={logosRef}\n          className=\"flex flex-wrap justify-center items-center gap-8 opacity-70\"\n        >\n          {logos.map((logo, index) => (\n            <div\n              key={logo.name}\n              className={`w-24 h-12 ${logo.color} rounded flex items-center justify-center border border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/40 shadow-md transition-all duration-300 cursor-pointer`}\n            >\n              <span className=\"text-white font-semibold text-sm\">{logo.name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3053},"client/src/components/ui/global-threat-globe.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport Globe from 'react-globe.gl';\n\nconst Attacks = [\n  { order: 1, size: 0.5, color: 'red' },\n  { order: 2, size: 0.3, color: 'orange' },\n  { order: 3, size: 0.7, color: 'yellow' },\n  { order: 4, size: 0.4, color: 'green' },\n  { order: 5, size: 0.6, color: 'blue' },\n  { order: 6, size: 0.2, color: 'purple' },\n  { order: 7, size: 0.9, color: 'pink' },\n  { order: 8, size: 0.1, color: 'brown' },\n  { order: 9, size: 0.8, color: 'gray' },\n  { order: 10, size: 0.5, color: 'cyan' },\n];\n\nfunction createNewAttack() {\n  const newAttack = Attacks[Math.floor(Math.random() * Attacks.length)];\n  return {\n    ...newAttack,\n    startLat: Math.random() * 180 - 90,\n    startLng: Math.random() * 360 - 180,\n    endLat: Math.random() * 180 - 90,\n    endLng: Math.random() * 360 - 180,\n  };\n}\n\nfunction GlobalThreatGlobe() {\n  const [attacks, setAttacks] = useState([createNewAttack()]);\n  const globeEl = useRef<any>();\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAttacks(prev => {\n        // Limit the number of attacks to prevent infinite growth\n        const newAttacks = [...prev, createNewAttack()];\n        return newAttacks.length > 20 ? newAttacks.slice(-20) : newAttacks;\n      });\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    // Auto-rotate globe\n    if (globeEl.current && globeEl.current.controls) {\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }\n  }, []);\n\n  return (\n    <Globe\n      ref={globeEl}\n      arcsData={attacks}\n      animateIn={true}\n      arcColor={d => d.color}\n      arcStrokeWidth={d => d.size}\n      arcDashLength={0.4}\n      arcDashGap={0.2}\n      arcLabel={d => `${d.size * 100} Mbps`}\n      arcStartLat={d => d.startLat}\n      arcStartLng={d => d.startLng}\n      arcEndLat={d => d.endLat}\n      arcEndLng={d => d.endLng}\n       atmosphereColor=\"#233A5B\"\n      backgroundColor=\"rgba(0,0,0,0)\"\n      pointsData={[{ lat: 10, lng: 10, size: 10, color: 'red' }]}\n      pointColor={d => d.color}\n      pointAltitude={d => d.size}\n      pointLabel={d => `${d.size * 100} Mbps`}\n    />\n  );\n}\n\nexport default GlobalThreatGlobe;","size_bytes":2245},"client/src/components/ui/investigation-knowledge-graph.tsx":{"content":"\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Shield, \n  AlertTriangle, \n  Database, \n  Server, \n  Globe, \n  User, \n  FileText, \n  Network,\n  Eye,\n  Brain,\n  Target,\n  Zap,\n  Activity,\n  Lock,\n  Unlock,\n  HardDrive,\n  Cpu,\n  CloudLightning\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\nimport { Button } from './button';\n\ninterface InvestigationNode {\n  id: string;\n  label: string;\n  type: 'alert' | 'user' | 'asset' | 'process' | 'file' | 'network' | 'threat' | 'evidence' | 'timeline' | 'correlation';\n  riskLevel: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  x: number;\n  y: number;\n  z: number;\n  connections: string[];\n  questions: InvestigationQuestion[];\n  isActive: boolean;\n  isExpanded: boolean;\n  depth: number;\n  pulse: boolean;\n  metadata: Record<string, any>;\n  angle?: number;\n  radius?: number;\n  layer?: number;\n}\n\ninterface InvestigationQuestion {\n  id: string;\n  text: string;\n  answer?: string;\n  followUp?: string[];\n  confidence: number;\n  category: 'behavioral' | 'technical' | 'temporal' | 'contextual';\n  triggered: boolean;\n}\n\ninterface Connection {\n  from: string;\n  to: string;\n  strength: number;\n  type: 'direct' | 'inferred' | 'temporal' | 'behavioral';\n  confidence: number;\n  animated: boolean;\n  curvature?: number;\n}\n\nconst nodeIcons = {\n  alert: AlertTriangle,\n  user: User,\n  asset: Server,\n  process: Cpu,\n  file: FileText,\n  network: Network,\n  threat: Shield,\n  evidence: Eye,\n  timeline: Activity,\n  correlation: Brain\n};\n\n// Golden spider web color scheme\nconst webColors = {\n  primary: '#FFD700',      // Gold\n  secondary: '#FFA500',    // Orange gold\n  tertiary: '#FFFF99',     // Light gold\n  accent: '#FF8C00',       // Dark orange\n  glow: '#FFFF00'         // Bright yellow\n};\n\nconst riskColors = {\n  critical: '#FF4444',\n  high: '#FF8800',\n  medium: '#FFD700',\n  low: '#90EE90',\n  info: '#87CEEB'\n};\n\nfunction InvestigationKnowledgeGraph() {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [nodes, setNodes] = useState<InvestigationNode[]>([]);\n  const [connections, setConnections] = useState<Connection[]>([]);\n  const [selectedNode, setSelectedNode] = useState<InvestigationNode | null>(null);\n  const [activeQuestions, setActiveQuestions] = useState<InvestigationQuestion[]>([]);\n  const [rotation, setRotation] = useState(0);\n  const [isRotating, setIsRotating] = useState(true);\n  const centerX = 400;\n  const centerY = 300;\n\n  // Create spider web layout\n  useEffect(() => {\n    const centerNode: InvestigationNode = {\n      id: 'alert-001',\n      label: 'Suspicious Network Activity',\n      type: 'alert',\n      riskLevel: 'critical',\n      x: centerX,\n      y: centerY,\n      z: 0,\n      connections: ['user-001', 'asset-001', 'network-001', 'process-001', 'threat-001', 'file-001', 'evidence-001'],\n      questions: [\n        {\n          id: 'q1',\n          text: 'What triggered this alert?',\n          answer: 'Anomalous data exfiltration pattern detected',\n          confidence: 94,\n          category: 'technical',\n          triggered: true,\n          followUp: ['q2', 'q3']\n        },\n        {\n          id: 'q2',\n          text: 'Who is the affected user?',\n          answer: 'john.doe@company.com',\n          confidence: 98,\n          category: 'contextual',\n          triggered: true,\n          followUp: ['q4']\n        }\n      ],\n      isActive: true,\n      isExpanded: false,\n      depth: 0,\n      pulse: true,\n      metadata: { severity: 'critical', source: 'SIEM', timestamp: '2024-01-07T14:30:00Z' },\n      angle: 0,\n      radius: 0,\n      layer: 0\n    };\n\n    // Create concentric layers like a spider web\n    const layer1Nodes: InvestigationNode[] = [];\n    const layer2Nodes: InvestigationNode[] = [];\n    const layer3Nodes: InvestigationNode[] = [];\n\n    // Layer 1 - Inner circle (6 nodes)\n    const layer1Data = [\n      { id: 'user-001', label: 'john.doe@company.com', type: 'user', risk: 'medium' },\n      { id: 'asset-001', label: 'WORKSTATION-001', type: 'asset', risk: 'high' },\n      { id: 'network-001', label: '192.168.1.105', type: 'network', risk: 'high' },\n      { id: 'process-001', label: 'PowerShell.exe', type: 'process', risk: 'critical' },\n      { id: 'threat-001', label: 'APT29 Indicators', type: 'threat', risk: 'critical' },\n      { id: 'file-001', label: 'suspicious.ps1', type: 'file', risk: 'high' }\n    ];\n\n    layer1Data.forEach((nodeData, i) => {\n      const angle = (i / layer1Data.length) * 2 * Math.PI;\n      const radius = 120;\n      layer1Nodes.push({\n        id: nodeData.id,\n        label: nodeData.label,\n        type: nodeData.type as any,\n        riskLevel: nodeData.risk as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: ['alert-001'],\n        questions: [{\n          id: `q${i + 3}`,\n          text: `Investigate ${nodeData.type} details?`,\n          confidence: 80 + Math.random() * 20,\n          category: 'technical',\n          triggered: false\n        }],\n        isActive: false,\n        isExpanded: false,\n        depth: 1,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 1\n      });\n    });\n\n    // Layer 2 - Middle circle (12 nodes)\n    const layer2Data = [\n      { id: 'correlation-001', label: 'Related Events', type: 'correlation', risk: 'medium' },\n      { id: 'evidence-001', label: 'Forensic Data', type: 'evidence', risk: 'high' },\n      { id: 'timeline-001', label: 'Event Timeline', type: 'timeline', risk: 'medium' },\n      { id: 'network-002', label: 'External IP', type: 'network', risk: 'critical' },\n      { id: 'file-002', label: 'Registry Entry', type: 'file', risk: 'medium' },\n      { id: 'process-002', label: 'Child Process', type: 'process', risk: 'high' },\n      { id: 'user-002', label: 'Admin Account', type: 'user', risk: 'high' },\n      { id: 'asset-002', label: 'Domain Controller', type: 'asset', risk: 'critical' },\n      { id: 'threat-002', label: 'IOC Match', type: 'threat', risk: 'high' },\n      { id: 'evidence-002', label: 'Memory Dump', type: 'evidence', risk: 'medium' },\n      { id: 'correlation-002', label: 'Pattern Match', type: 'correlation', risk: 'low' },\n      { id: 'timeline-002', label: 'Log Sequence', type: 'timeline', risk: 'medium' }\n    ];\n\n    layer2Data.forEach((nodeData, i) => {\n      const angle = (i / layer2Data.length) * 2 * Math.PI;\n      const radius = 220;\n      layer2Nodes.push({\n        id: nodeData.id,\n        label: nodeData.label,\n        type: nodeData.type as any,\n        riskLevel: nodeData.risk as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: [],\n        questions: [{\n          id: `q${i + 10}`,\n          text: `Analyze ${nodeData.type} connection?`,\n          confidence: 70 + Math.random() * 30,\n          category: 'contextual',\n          triggered: false\n        }],\n        isActive: false,\n        isExpanded: false,\n        depth: 2,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 2\n      });\n    });\n\n    // Layer 3 - Outer circle (18 nodes)\n    const layer3Count = 18;\n    for (let i = 0; i < layer3Count; i++) {\n      const angle = (i / layer3Count) * 2 * Math.PI;\n      const radius = 300;\n      const types = ['network', 'file', 'process', 'evidence', 'correlation', 'timeline'];\n      const type = types[i % types.length];\n      \n      layer3Nodes.push({\n        id: `${type}-${Math.floor(i / types.length) + 3}`,\n        label: `${type.charAt(0).toUpperCase() + type.slice(1)} ${Math.floor(i / types.length) + 3}`,\n        type: type as any,\n        riskLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: [],\n        questions: [],\n        isActive: false,\n        isExpanded: false,\n        depth: 3,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 3\n      });\n    }\n\n    const allNodes = [centerNode, ...layer1Nodes, ...layer2Nodes, ...layer3Nodes];\n    \n    // Create spider web connections\n    const connectionList: Connection[] = [];\n    \n    // Center to layer 1 (main strands)\n    layer1Nodes.forEach((node, i) => {\n      connectionList.push({\n        from: 'alert-001',\n        to: node.id,\n        strength: 0.9,\n        type: 'direct',\n        confidence: 95,\n        animated: true,\n        curvature: 0\n      });\n    });\n\n    // Layer 1 to layer 2 (radial connections)\n    layer1Nodes.forEach((node1, i) => {\n      const nearbyLayer2 = layer2Nodes.filter((node2, j) => {\n        const angleDiff = Math.abs(node1.angle! - node2.angle!);\n        const minAngle = Math.min(angleDiff, 2 * Math.PI - angleDiff);\n        return minAngle < Math.PI / 3; // Connect to nearby nodes\n      });\n      \n      nearbyLayer2.forEach(node2 => {\n        connectionList.push({\n          from: node1.id,\n          to: node2.id,\n          strength: 0.6,\n          type: 'inferred',\n          confidence: 75,\n          animated: false,\n          curvature: 0.2\n        });\n      });\n    });\n\n    // Layer 2 to layer 3 (web strands)\n    layer2Nodes.forEach((node2) => {\n      const nearbyLayer3 = layer3Nodes.filter((node3) => {\n        const angleDiff = Math.abs(node2.angle! - node3.angle!);\n        const minAngle = Math.min(angleDiff, 2 * Math.PI - angleDiff);\n        return minAngle < Math.PI / 4;\n      });\n      \n      nearbyLayer3.slice(0, 2).forEach(node3 => {\n        connectionList.push({\n          from: node2.id,\n          to: node3.id,\n          strength: 0.4,\n          type: 'temporal',\n          confidence: 60,\n          animated: false,\n          curvature: 0.3\n        });\n      });\n    });\n\n    // Circular connections within layers (web rings)\n    const createRingConnections = (layerNodes: InvestigationNode[], strength: number) => {\n      layerNodes.forEach((node, i) => {\n        const nextNode = layerNodes[(i + 1) % layerNodes.length];\n        connectionList.push({\n          from: node.id,\n          to: nextNode.id,\n          strength,\n          type: 'behavioral',\n          confidence: 50,\n          animated: false,\n          curvature: 0.1\n        });\n      });\n    };\n\n    createRingConnections(layer1Nodes, 0.5);\n    createRingConnections(layer2Nodes, 0.3);\n    createRingConnections(layer3Nodes, 0.2);\n\n    setNodes(allNodes);\n    setConnections(connectionList);\n    setActiveQuestions(centerNode.questions);\n  }, []);\n\n  // Gentle rotation animation\n  useEffect(() => {\n    if (!isRotating) return;\n    \n    const interval = setInterval(() => {\n      setRotation(prev => prev + 0.2);\n    }, 100);\n\n    return () => clearInterval(interval);\n  }, [isRotating]);\n\n  const handleNodeClick = (node: InvestigationNode) => {\n    setSelectedNode(node);\n    setActiveQuestions(node.questions);\n    \n    // Highlight connected nodes\n    setNodes(prev => prev.map(n => {\n      if (node.connections.includes(n.id) || connections.some(c => \n        (c.from === node.id && c.to === n.id) || (c.from === n.id && c.to === node.id)\n      )) {\n        return { ...n, pulse: true };\n      }\n      return { ...n, pulse: n.id === node.id };\n    }));\n  };\n\n  const renderConnections = () => {\n    return connections.map((conn, index) => {\n      const fromNode = nodes.find(n => n.id === conn.from);\n      const toNode = nodes.find(n => n.id === conn.to);\n      \n      if (!fromNode || !toNode) return null;\n      \n      const strokeWidth = conn.strength * 2;\n      const opacity = conn.strength * 0.8 + 0.2;\n      \n      // Create curved path for spider web effect\n      const midX = (fromNode.x + toNode.x) / 2;\n      const midY = (fromNode.y + toNode.y) / 2;\n      const curvature = conn.curvature || 0;\n      const controlX = midX + curvature * 50;\n      const controlY = midY + curvature * 50;\n      \n      const pathD = curvature > 0 \n        ? `M ${fromNode.x} ${fromNode.y} Q ${controlX} ${controlY} ${toNode.x} ${toNode.y}`\n        : `M ${fromNode.x} ${fromNode.y} L ${toNode.x} ${toNode.y}`;\n      \n      return (\n        <g key={`connection-${index}`}>\n          {/* Glow effect */}\n          <path\n            d={pathD}\n            stroke={webColors.glow}\n            strokeWidth={strokeWidth + 2}\n            opacity={opacity * 0.3}\n            fill=\"none\"\n            filter=\"url(#glow)\"\n          />\n          \n          {/* Main connection */}\n          <path\n            d={pathD}\n            stroke={webColors.primary}\n            strokeWidth={strokeWidth}\n            opacity={opacity}\n            fill=\"none\"\n            strokeDasharray={conn.type === 'inferred' ? '3,3' : 'none'}\n          />\n          \n          {/* Animated particles */}\n          {conn.animated && (\n            <circle r=\"1.5\" fill={webColors.accent} opacity={0.8}>\n              <animateMotion\n                dur=\"4s\"\n                repeatCount=\"indefinite\"\n                path={pathD}\n                rotate=\"auto\"\n              />\n            </circle>\n          )}\n        </g>\n      );\n    });\n  };\n\n  const renderNodes = () => {\n    return nodes.map((node) => {\n      const IconComponent = nodeIcons[node.type];\n      const riskColor = riskColors[node.riskLevel];\n      \n      const nodeSize = node.depth === 0 ? 20 : \n                     node.depth === 1 ? 15 : \n                     node.depth === 2 ? 12 : 8;\n      \n      return (\n        <g\n          key={node.id}\n          transform={`translate(${node.x}, ${node.y}) rotate(${rotation})`}\n          style={{ cursor: 'pointer' }}\n          onClick={() => handleNodeClick(node)}\n        >\n          {/* Pulsing glow for active nodes */}\n          {node.pulse && (\n            <circle\n              r={nodeSize + 15}\n              fill={webColors.glow}\n              opacity={0.1}\n              className=\"animate-pulse\"\n            />\n          )}\n          \n          {/* Outer glow ring */}\n          <circle\n            r={nodeSize + 5}\n            fill={webColors.primary}\n            opacity={0.2}\n            filter=\"url(#glow)\"\n          />\n          \n          {/* Main node with gradient */}\n          <circle\n            r={nodeSize}\n            fill={`url(#goldGradient)`}\n            stroke={selectedNode?.id === node.id ? webColors.glow : riskColor}\n            strokeWidth={selectedNode?.id === node.id ? 3 : 1.5}\n            opacity={0.9}\n            className=\"transition-all duration-300\"\n          />\n          \n          {/* Risk indicator ring */}\n          <circle\n            r={nodeSize - 2}\n            fill=\"none\"\n            stroke={riskColor}\n            strokeWidth={2}\n            opacity={0.7}\n          />\n          \n          {/* Node icon */}\n          <foreignObject\n            x={-nodeSize/2}\n            y={-nodeSize/2}\n            width={nodeSize}\n            height={nodeSize}\n          >\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <IconComponent \n                size={Math.max(6, nodeSize * 0.6)} \n                color=\"#000\"\n                style={{ opacity: 0.8 }}\n              />\n            </div>\n          </foreignObject>\n          \n          {/* Node label */}\n          {node.depth <= 1 && (\n            <text\n              y={nodeSize + 15}\n              textAnchor=\"middle\"\n              fontSize={node.depth === 0 ? 12 : 10}\n              fill={webColors.tertiary}\n              className=\"font-mono font-medium\"\n              style={{ textShadow: '0 0 5px rgba(255, 215, 0, 0.5)' }}\n            >\n              {node.label}\n            </text>\n          )}\n        </g>\n      );\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\" style={{ color: webColors.primary, textShadow: '0 0 10px rgba(255, 215, 0, 0.5)' }}>\n          Investigation Spider Web\n        </h2>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsRotating(!isRotating)}\n            className=\"border-yellow-500/20 text-yellow-400 hover:bg-yellow-500/10\"\n          >\n            {isRotating ? 'Pause' : 'Rotate'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Spider Web Visualization */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"bg-black/90 border-yellow-500/20 h-[600px] overflow-hidden\">\n            <CardContent className=\"p-0 h-full\">\n              <div className=\"relative w-full h-full\">\n                <svg\n                  ref={svgRef}\n                  className=\"w-full h-full\"\n                  viewBox=\"0 0 800 600\"\n                  style={{ background: 'radial-gradient(circle at center, rgba(0,0,0,0.9) 0%, black 100%)' }}\n                >\n                  <defs>\n                    {/* Golden gradient for nodes */}\n                    <radialGradient id=\"goldGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n                      <stop offset=\"0%\" stopColor={webColors.tertiary} stopOpacity=\"1\" />\n                      <stop offset=\"50%\" stopColor={webColors.primary} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={webColors.secondary} stopOpacity=\"0.6\" />\n                    </radialGradient>\n                    \n                    {/* Glow filter */}\n                    <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                      <feGaussianBlur stdDeviation=\"4\" result=\"coloredBlur\"/>\n                      <feMerge>\n                        <feMergeNode in=\"coloredBlur\"/>\n                        <feMergeNode in=\"SourceGraphic\"/>\n                      </feMerge>\n                    </filter>\n\n                    {/* Web pattern */}\n                    <pattern id=\"webPattern\" width=\"60\" height=\"60\" patternUnits=\"userSpaceOnUse\">\n                      <circle cx=\"30\" cy=\"30\" r=\"1\" fill={webColors.primary} opacity=\"0.1\"/>\n                      <path d=\"M0,30 Q30,15 60,30 Q30,45 0,30\" stroke={webColors.primary} strokeWidth=\"0.3\" fill=\"none\" opacity=\"0.05\"/>\n                    </pattern>\n                  </defs>\n                  \n                  {/* Background web pattern */}\n                  <rect width=\"100%\" height=\"100%\" fill=\"url(#webPattern)\" />\n                  \n                  {/* Render connections (spider web strands) */}\n                  <g filter=\"url(#glow)\">\n                    {renderConnections()}\n                  </g>\n                  \n                  {/* Render nodes (intersection points) */}\n                  <g>\n                    {renderNodes()}\n                  </g>\n                  \n                  {/* Center focal point glow */}\n                  <circle\n                    cx={centerX}\n                    cy={centerY}\n                    r=\"50\"\n                    fill={webColors.glow}\n                    opacity=\"0.05\"\n                    filter=\"url(#glow)\"\n                    className=\"animate-pulse\"\n                  />\n                </svg>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Investigation Panel */}\n        <div className=\"space-y-4\">\n          {/* Selected Node Details */}\n          {selectedNode && (\n            <Card className=\"bg-black/80 border-yellow-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center space-x-2\" style={{ color: webColors.primary }}>\n                  {React.createElement(nodeIcons[selectedNode.type], { size: 16, color: webColors.accent })}\n                  <span>{selectedNode.label}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <div>\n                    <span className=\"text-gray-400\">Type:</span>\n                    <span className=\"ml-1 text-yellow-300 capitalize\">{selectedNode.type}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Risk:</span>\n                    <span className={`ml-1 capitalize`} style={{ color: riskColors[selectedNode.riskLevel] }}>\n                      {selectedNode.riskLevel}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Layer:</span>\n                    <span className=\"ml-1 text-yellow-300\">{selectedNode.layer || 0}</span>\n                  </div>\n                </div>\n                \n                {Object.entries(selectedNode.metadata).map(([key, value]) => (\n                  <div key={key} className=\"text-xs\">\n                    <span className=\"text-gray-400 capitalize\">{key.replace('_', ' ')}:</span>\n                    <span className=\"ml-1 text-gray-300\">{String(value)}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Investigation Questions */}\n          <Card className=\"bg-black/80 border-yellow-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\" style={{ color: webColors.primary }}>Investigation Questions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {activeQuestions.length > 0 ? activeQuestions.map((question, index) => (\n                <motion.div\n                  key={question.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className={`p-3 rounded-lg border ${\n                    question.triggered \n                      ? 'border-yellow-500/30 bg-yellow-500/5' \n                      : 'border-gray-700/30 bg-gray-800/30'\n                  }`}\n                >\n                  <div className=\"text-sm font-medium text-yellow-200 mb-1\">\n                    {question.text}\n                  </div>\n                  {question.answer && (\n                    <div className=\"text-xs text-gray-300 mb-2\">\n                      {question.answer}\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className={`px-2 py-1 rounded-full ${\n                      question.category === 'technical' ? 'bg-blue-400/20 text-blue-400' :\n                      question.category === 'behavioral' ? 'bg-purple-400/20 text-purple-400' :\n                      question.category === 'temporal' ? 'bg-yellow-400/20 text-yellow-400' :\n                      'bg-green-400/20 text-green-400'\n                    }`}>\n                      {question.category}\n                    </span>\n                    <span style={{ color: webColors.accent }}>\n                      {question.confidence}% confidence\n                    </span>\n                  </div>\n                </motion.div>\n              )) : (\n                <div className=\"text-sm text-gray-400 text-center py-4\">\n                  Select a node to view investigation questions\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Web Statistics */}\n          <Card className=\"bg-black/80 border-yellow-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\" style={{ color: webColors.primary }}>Web Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Total Nodes:</span>\n                  <span style={{ color: webColors.tertiary }}>{nodes.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Connections:</span>\n                  <span style={{ color: webColors.tertiary }}>{connections.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Web Layers:</span>\n                  <span style={{ color: webColors.tertiary }}>4</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Critical Alerts:</span>\n                  <span className=\"text-red-400\">{nodes.filter(n => n.riskLevel === 'critical').length}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InvestigationKnowledgeGraph;\nexport { InvestigationKnowledgeGraph };\n","size_bytes":24926},"client/src/components/ui/knowledge-graph.tsx":{"content":"\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ZoomIn, \n  ZoomOut, \n  RotateCcw, \n  Play, \n  Pause, \n  Filter, \n  Search,\n  Network,\n  Shield,\n  AlertTriangle,\n  User,\n  Server,\n  Globe,\n  Cpu,\n  Database,\n  Lock,\n  Eye,\n  FileText,\n  Activity\n} from \"lucide-react\";\n\ninterface GraphNode {\n  id: string;\n  label: string;\n  type: \"user\" | \"asset\" | \"ip\" | \"process\" | \"file\" | \"vulnerability\" | \"threat\" | \"connection\" | \"domain\" | \"service\";\n  risk: \"critical\" | \"high\" | \"medium\" | \"low\";\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  radius: number;\n  properties: Record<string, any>;\n  connections: string[];\n  isSelected: boolean;\n  isHighlighted: boolean;\n}\n\ninterface GraphEdge {\n  id: string;\n  source: string;\n  target: string;\n  type: \"communicates\" | \"executes\" | \"accesses\" | \"exploits\" | \"contains\" | \"originates\" | \"authenticates\";\n  weight: number;\n  isActive: boolean;\n  properties: Record<string, any>;\n}\n\ninterface GraphForce {\n  attraction: number;\n  repulsion: number;\n  damping: number;\n}\n\nconst nodeIcons = {\n  user: User,\n  asset: Server,\n  ip: Globe,\n  process: Cpu,\n  file: FileText,\n  vulnerability: AlertTriangle,\n  threat: Shield,\n  connection: Network,\n  domain: Globe,\n  service: Database\n};\n\nconst nodeColors = {\n  critical: \"#EF4444\",\n  high: \"#F97316\", \n  medium: \"#EAB308\",\n  low: \"#10B981\"\n};\n\nconst edgeColors = {\n  communicates: \"#3B82F6\",\n  executes: \"#8B5CF6\",\n  accesses: \"#10B981\",\n  exploits: \"#EF4444\",\n  contains: \"#F59E0B\",\n  originates: \"#06B6D4\",\n  authenticates: \"#84CC16\"\n};\n\nexport function KnowledgeGraph() {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [nodes, setNodes] = useState<GraphNode[]>([]);\n  const [edges, setEdges] = useState<GraphEdge[]>([]);\n  const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);\n  const [isSimulating, setIsSimulating] = useState(true);\n  const [zoom, setZoom] = useState(1);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [forces, setForces] = useState<GraphForce>({\n    attraction: 0.1,\n    repulsion: 100,\n    damping: 0.95\n  });\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRisk, setFilterRisk] = useState<string>(\"all\");\n\n  // Initialize sample cybersecurity graph data\n  useEffect(() => {\n    const sampleNodes: GraphNode[] = [\n      {\n        id: \"user-1\",\n        label: \"john.doe@company.com\",\n        type: \"user\",\n        risk: \"medium\",\n        x: 300,\n        y: 200,\n        vx: 0,\n        vy: 0,\n        radius: 25,\n        properties: { department: \"Finance\", lastLogin: \"2024-01-07 14:30\" },\n        connections: [\"asset-1\", \"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"asset-1\",\n        label: \"WORKSTATION-001\",\n        type: \"asset\",\n        risk: \"high\",\n        x: 200,\n        y: 150,\n        vx: 0,\n        vy: 0,\n        radius: 30,\n        properties: { os: \"Windows 11\", patch_level: \"Critical patches missing\" },\n        connections: [\"user-1\", \"ip-1\", \"vulnerability-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"ip-1\",\n        label: \"192.168.1.105\",\n        type: \"ip\",\n        risk: \"critical\",\n        x: 100,\n        y: 200,\n        vx: 0,\n        vy: 0,\n        radius: 20,\n        properties: { geo_location: \"Internal\", reputation: \"Clean\" },\n        connections: [\"asset-1\", \"threat-1\", \"connection-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"threat-1\",\n        label: \"APT29 Campaign\",\n        type: \"threat\",\n        risk: \"critical\",\n        x: 50,\n        y: 100,\n        vx: 0,\n        vy: 0,\n        radius: 35,\n        properties: { campaign: \"SolarWinds-related\", confidence: \"High\" },\n        connections: [\"ip-1\", \"vulnerability-1\", \"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"process-1\",\n        label: \"malware.exe\",\n        type: \"process\",\n        risk: \"critical\",\n        x: 400,\n        y: 150,\n        vx: 0,\n        vy: 0,\n        radius: 22,\n        properties: { pid: \"1337\", command_line: \"powershell.exe -enc <base64>\" },\n        connections: [\"user-1\", \"threat-1\", \"file-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"vulnerability-1\",\n        label: \"CVE-2024-1234\",\n        type: \"vulnerability\",\n        risk: \"high\",\n        x: 150,\n        y: 80,\n        vx: 0,\n        vy: 0,\n        radius: 18,\n        properties: { cvss_score: \"8.9\", description: \"Remote code execution\" },\n        connections: [\"asset-1\", \"threat-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"file-1\",\n        label: \"suspicious.dll\",\n        type: \"file\",\n        risk: \"high\",\n        x: 450,\n        y: 250,\n        vx: 0,\n        vy: 0,\n        radius: 16,\n        properties: { hash: \"a1b2c3d4...\", size: \"2.3MB\" },\n        connections: [\"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"connection-1\",\n        label: \"C2 Channel\",\n        type: \"connection\",\n        risk: \"critical\",\n        x: 80,\n        y: 300,\n        vx: 0,\n        vy: 0,\n        radius: 20,\n        properties: { protocol: \"HTTPS\", port: \"443\", encrypted: true },\n        connections: [\"ip-1\", \"domain-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"domain-1\",\n        label: \"evil-c2.com\",\n        type: \"domain\",\n        risk: \"critical\",\n        x: 180,\n        y: 350,\n        vx: 0,\n        vy: 0,\n        radius: 24,\n        properties: { registrar: \"Unknown\", creation_date: \"2024-01-01\" },\n        connections: [\"connection-1\"],\n        isSelected: false,\n        isHighlighted: false\n      }\n    ];\n\n    const sampleEdges: GraphEdge[] = [\n      {\n        id: \"edge-1\",\n        source: \"user-1\",\n        target: \"asset-1\",\n        type: \"authenticates\",\n        weight: 1,\n        isActive: true,\n        properties: { login_time: \"14:30\", success: true }\n      },\n      {\n        id: \"edge-2\",\n        source: \"asset-1\",\n        target: \"ip-1\",\n        type: \"communicates\",\n        weight: 2,\n        isActive: true,\n        properties: { bytes_transferred: \"1.2GB\", duration: \"3m\" }\n      },\n      {\n        id: \"edge-3\",\n        source: \"ip-1\",\n        target: \"threat-1\",\n        type: \"originates\",\n        weight: 3,\n        isActive: true,\n        properties: { detection_time: \"14:33\", confidence: \"95%\" }\n      },\n      {\n        id: \"edge-4\",\n        source: \"threat-1\",\n        target: \"vulnerability-1\",\n        type: \"exploits\",\n        weight: 3,\n        isActive: true,\n        properties: { exploit_kit: \"Metasploit\", success_rate: \"87%\" }\n      },\n      {\n        id: \"edge-5\",\n        source: \"user-1\",\n        target: \"process-1\",\n        type: \"executes\",\n        weight: 2,\n        isActive: true,\n        properties: { execution_time: \"14:35\", elevated: false }\n      },\n      {\n        id: \"edge-6\",\n        source: \"process-1\",\n        target: \"file-1\",\n        type: \"accesses\",\n        weight: 1,\n        isActive: true,\n        properties: { access_type: \"write\", timestamp: \"14:36\" }\n      },\n      {\n        id: \"edge-7\",\n        source: \"ip-1\",\n        target: \"connection-1\",\n        type: \"communicates\",\n        weight: 2,\n        isActive: true,\n        properties: { protocol: \"TLS 1.3\", encrypted: true }\n      },\n      {\n        id: \"edge-8\",\n        source: \"connection-1\",\n        target: \"domain-1\",\n        type: \"communicates\",\n        weight: 1,\n        isActive: true,\n        properties: { dns_resolution: \"1.2.3.4\", ttl: \"300s\" }\n      }\n    ];\n\n    setNodes(sampleNodes);\n    setEdges(sampleEdges);\n  }, []);\n\n  // Physics simulation\n  const updateSimulation = useCallback(() => {\n    if (!isSimulating) return;\n\n    setNodes(currentNodes => {\n      const newNodes = [...currentNodes];\n      \n      // Reset forces\n      newNodes.forEach(node => {\n        node.vx *= forces.damping;\n        node.vy *= forces.damping;\n      });\n\n      // Repulsion between nodes\n      for (let i = 0; i < newNodes.length; i++) {\n        for (let j = i + 1; j < newNodes.length; j++) {\n          const node1 = newNodes[i];\n          const node2 = newNodes[j];\n          \n          const dx = node2.x - node1.x;\n          const dy = node2.y - node1.y;\n          const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n          \n          const force = forces.repulsion / (distance * distance);\n          const fx = (dx / distance) * force;\n          const fy = (dy / distance) * force;\n          \n          node1.vx -= fx;\n          node1.vy -= fy;\n          node2.vx += fx;\n          node2.vy += fy;\n        }\n      }\n\n      // Attraction along edges\n      edges.forEach(edge => {\n        const source = newNodes.find(n => n.id === edge.source);\n        const target = newNodes.find(n => n.id === edge.target);\n        \n        if (source && target) {\n          const dx = target.x - source.x;\n          const dy = target.y - source.y;\n          const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n          const optimalDistance = 100;\n          \n          const force = forces.attraction * (distance - optimalDistance);\n          const fx = (dx / distance) * force;\n          const fy = (dy / distance) * force;\n          \n          source.vx += fx;\n          source.vy += fy;\n          target.vx -= fx;\n          target.vy -= fy;\n        }\n      });\n\n      // Update positions\n      newNodes.forEach(node => {\n        node.x += node.vx;\n        node.y += node.vy;\n        \n        // Boundary constraints\n        const margin = node.radius + 10;\n        if (node.x < margin) { node.x = margin; node.vx = 0; }\n        if (node.x > 580 - margin) { node.x = 580 - margin; node.vx = 0; }\n        if (node.y < margin) { node.y = margin; node.vy = 0; }\n        if (node.y > 380 - margin) { node.y = 380 - margin; node.vy = 0; }\n      });\n\n      return newNodes;\n    });\n  }, [isSimulating, forces, edges]);\n\n  useEffect(() => {\n    const interval = setInterval(updateSimulation, 50);\n    return () => clearInterval(interval);\n  }, [updateSimulation]);\n\n  const handleNodeClick = (node: GraphNode) => {\n    setSelectedNode(node);\n    setNodes(nodes => \n      nodes.map(n => ({\n        ...n,\n        isSelected: n.id === node.id,\n        isHighlighted: n.connections.includes(node.id) || n.id === node.id\n      }))\n    );\n  };\n\n  const handleZoom = (delta: number) => {\n    setZoom(prev => Math.max(0.5, Math.min(3, prev + delta)));\n  };\n\n  const resetView = () => {\n    setZoom(1);\n    setPan({ x: 0, y: 0 });\n    setSelectedNode(null);\n    setNodes(nodes => nodes.map(n => ({ ...n, isSelected: false, isHighlighted: false })));\n  };\n\n  const filteredNodes = nodes.filter(node => {\n    const matchesSearch = searchTerm === \"\" || \n      node.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      node.type.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRisk = filterRisk === \"all\" || node.risk === filterRisk;\n    \n    return matchesSearch && matchesRisk;\n  });\n\n  const getNodeIcon = (type: string) => {\n    const Icon = nodeIcons[type as keyof typeof nodeIcons] || Network;\n    return Icon;\n  };\n\n  return (\n    <div className=\"w-full h-full bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl\">\n      {/* Controls Header */}\n      <div className=\"p-4 border-b border-[hsl(330,100%,50%)]/20\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Network className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n            <h3 className=\"text-lg font-semibold text-white\">Deep Knowledge Graph</h3>\n            <Badge variant=\"outline\" className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n              Neo4j Style\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsSimulating(!isSimulating)}\n              className={`${isSimulating ? 'text-green-400' : 'text-gray-400'}`}\n            >\n              {isSimulating ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleZoom(0.1)}>\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleZoom(-0.1)}>\n              <ZoomOut className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={resetView}>\n              <RotateCcw className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search nodes...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg text-white placeholder:text-gray-400 focus:outline-none focus:border-[hsl(330,100%,50%)]/40\"\n            />\n          </div>\n          \n          <select\n            value={filterRisk}\n            onChange={(e) => setFilterRisk(e.target.value)}\n            className=\"px-3 py-2 bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg text-white focus:outline-none focus:border-[hsl(330,100%,50%)]/40\"\n          >\n            <option value=\"all\">All Risk Levels</option>\n            <option value=\"critical\">Critical</option>\n            <option value=\"high\">High</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"low\">Low</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"flex h-[600px]\">\n        {/* Graph Canvas */}\n        <div className=\"flex-1 relative overflow-hidden\">\n          <svg\n            ref={svgRef}\n            className=\"w-full h-full\"\n            viewBox={`${-pan.x} ${-pan.y} ${600 / zoom} ${400 / zoom}`}\n          >\n            <defs>\n              <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                <feMerge>\n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n              \n              <filter id=\"edge-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n                <feMerge>\n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n\n              <marker\n                id=\"arrowhead\"\n                markerWidth=\"10\"\n                markerHeight=\"7\"\n                refX=\"9\"\n                refY=\"3.5\"\n                orient=\"auto\"\n              >\n                <polygon\n                  points=\"0 0, 10 3.5, 0 7\"\n                  fill=\"#64748B\"\n                />\n              </marker>\n            </defs>\n\n            {/* Edges */}\n            {edges.map(edge => {\n              const source = filteredNodes.find(n => n.id === edge.source);\n              const target = filteredNodes.find(n => n.id === edge.target);\n              \n              if (!source || !target) return null;\n\n              const isHighlighted = source.isHighlighted && target.isHighlighted;\n              \n              return (\n                <g key={edge.id}>\n                  <line\n                    x1={source.x}\n                    y1={source.y}\n                    x2={target.x}\n                    y2={target.y}\n                    stroke={isHighlighted ? edgeColors[edge.type] : \"#374151\"}\n                    strokeWidth={isHighlighted ? edge.weight + 1 : 1}\n                    opacity={isHighlighted ? 0.8 : 0.4}\n                    filter={isHighlighted ? \"url(#edge-glow)\" : \"none\"}\n                    markerEnd=\"url(#arrowhead)\"\n                  />\n                  {isHighlighted && (\n                    <text\n                      x={(source.x + target.x) / 2}\n                      y={(source.y + target.y) / 2 - 5}\n                      textAnchor=\"middle\"\n                      className=\"fill-white text-xs font-medium\"\n                      filter=\"url(#glow)\"\n                    >\n                      {edge.type}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n\n            {/* Nodes */}\n            {filteredNodes.map(node => {\n              const Icon = getNodeIcon(node.type);\n              \n              return (\n                <g key={node.id}>\n                  <circle\n                    cx={node.x}\n                    cy={node.y}\n                    r={node.radius}\n                    fill={nodeColors[node.risk]}\n                    stroke={node.isSelected ? \"#FFFFFF\" : nodeColors[node.risk]}\n                    strokeWidth={node.isSelected ? 3 : 1}\n                    opacity={node.isHighlighted || !selectedNode ? 0.9 : 0.3}\n                    filter={node.isSelected || node.isHighlighted ? \"url(#glow)\" : \"none\"}\n                    className=\"cursor-pointer transition-all duration-200\"\n                    onClick={() => handleNodeClick(node)}\n                  />\n                  \n                  {/* Node Icon */}\n                  <foreignObject\n                    x={node.x - 8}\n                    y={node.y - 8}\n                    width=\"16\"\n                    height=\"16\"\n                    className=\"pointer-events-none\"\n                  >\n                    <Icon className=\"w-4 h-4 text-white\" />\n                  </foreignObject>\n                  \n                  {/* Node Label */}\n                  <text\n                    x={node.x}\n                    y={node.y + node.radius + 15}\n                    textAnchor=\"middle\"\n                    className=\"fill-white text-xs font-medium pointer-events-none\"\n                    opacity={node.isHighlighted || !selectedNode ? 1 : 0.5}\n                  >\n                    {node.label.length > 15 ? node.label.substring(0, 15) + \"...\" : node.label}\n                  </text>\n\n                  {/* Risk Badge */}\n                  {(node.isSelected || node.isHighlighted) && (\n                    <rect\n                      x={node.x + node.radius - 5}\n                      y={node.y - node.radius - 5}\n                      width=\"20\"\n                      height=\"12\"\n                      rx=\"6\"\n                      fill={nodeColors[node.risk]}\n                      opacity=\"0.9\"\n                    />\n                  )}\n                  {(node.isSelected || node.isHighlighted) && (\n                    <text\n                      x={node.x + node.radius + 5}\n                      y={node.y - node.radius + 2}\n                      textAnchor=\"middle\"\n                      className=\"fill-white text-xs font-bold\"\n                    >\n                      {node.risk.charAt(0).toUpperCase()}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n          </svg>\n\n          {/* Graph Stats Overlay */}\n          <div className=\"absolute top-4 left-4 bg-[hsl(0,0%,10%)]/80 backdrop-blur-sm rounded-lg p-3 border border-[hsl(330,100%,50%)]/20\">\n            <div className=\"text-xs text-gray-400 space-y-1\">\n              <div>Nodes: <span className=\"text-white font-medium\">{filteredNodes.length}</span></div>\n              <div>Edges: <span className=\"text-white font-medium\">{edges.length}</span></div>\n              <div>Zoom: <span className=\"text-white font-medium\">{(zoom * 100).toFixed(0)}%</span></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Node Details Panel */}\n        {selectedNode && (\n          <motion.div\n            initial={{ x: 300, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: 300, opacity: 0 }}\n            className=\"w-80 border-l border-[hsl(330,100%,50%)]/20 bg-[hsl(0,0%,6%)]/60 p-4 overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-semibold text-white\">Node Details</h4>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedNode(null)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                ✕\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                {(() => {\n                  const Icon = getNodeIcon(selectedNode.type);\n                  return <Icon className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />;\n                })()}\n                <div>\n                  <div className=\"text-white font-medium\">{selectedNode.label}</div>\n                  <div className=\"text-sm text-gray-400 capitalize\">{selectedNode.type}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={`${\n                  selectedNode.risk === 'critical' ? 'bg-red-500/20 text-red-400' :\n                  selectedNode.risk === 'high' ? 'bg-orange-500/20 text-orange-400' :\n                  selectedNode.risk === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :\n                  'bg-green-500/20 text-green-400'\n                }`}>\n                  {selectedNode.risk.toUpperCase()}\n                </Badge>\n                <Badge variant=\"outline\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                  {selectedNode.connections.length} connections\n                </Badge>\n              </div>\n\n              <div className=\"border-t border-gray-700 pt-4\">\n                <h5 className=\"text-sm font-medium text-gray-300 mb-2\">Properties</h5>\n                <div className=\"space-y-2\">\n                  {Object.entries(selectedNode.properties).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-400 capitalize\">{key.replace('_', ' ')}:</span>\n                      <span className=\"text-white\">{String(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-700 pt-4\">\n                <h5 className=\"text-sm font-medium text-gray-300 mb-2\">Connected Nodes</h5>\n                <div className=\"space-y-1\">\n                  {selectedNode.connections.map(connId => {\n                    const connectedNode = nodes.find(n => n.id === connId);\n                    if (!connectedNode) return null;\n                    \n                    return (\n                      <div\n                        key={connId}\n                        className=\"text-sm text-gray-300 hover:text-white cursor-pointer p-2 rounded bg-[hsl(0,0%,10%)]/40 hover:bg-[hsl(0,0%,10%)]/60 transition-colors\"\n                        onClick={() => handleNodeClick(connectedNode)}\n                      >\n                        {connectedNode.label}\n                        <span className=\"text-xs text-gray-500 ml-2\">({connectedNode.type})</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </div>\n\n      {/* Legend */}\n      <div className=\"p-4 border-t border-[hsl(330,100%,50%)]/20 bg-[hsl(0,0%,6%)]/40\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h6 className=\"text-sm font-medium text-gray-300 mb-2\">Risk Levels</h6>\n            <div className=\"flex space-x-3\">\n              {Object.entries(nodeColors).map(([risk, color]) => (\n                <div key={risk} className=\"flex items-center space-x-1\">\n                  <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: color }}></div>\n                  <span className=\"text-xs text-gray-400 capitalize\">{risk}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <h6 className=\"text-sm font-medium text-gray-300 mb-2\">Relationships</h6>\n            <div className=\"flex flex-wrap gap-2\">\n              {Object.entries(edgeColors).slice(0, 4).map(([type, color]) => (\n                <div key={type} className=\"flex items-center space-x-1\">\n                  <div className=\"w-3 h-0.5\" style={{ backgroundColor: color }}></div>\n                  <span className=\"text-xs text-gray-400\">{type}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25471},"client/src/components/ui/threat-visualization.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Shield, Zap, AlertTriangle, Eye, Target, Activity, Brain, TrendingUp, Clock, CheckCircle, X } from 'lucide-react';\nimport { Button } from './button';\n\ninterface DataSource {\n  id: string\n  name: string\n  position: { x: number; y: number }\n  isActive: boolean\n  color: string\n}\n\ninterface ThreatFlow {\n  id: string\n  sourceId: string\n  progress: number\n  classification: \"true-positive\" | \"false-positive\" | \"manual\" | null\n  phase: \"to-brain\" | \"processing\" | \"to-classification\" | \"completed\"\n  color: string\n}\n\ninterface ClassificationStack {\n  \"true-positive\": string[]\n  \"false-positive\": string[]\n  \"manual\": string[]\n}\n\nconst dataSources: DataSource[] = [\n  { id: \"1\", name: \"NCFW\", position: { x: 60, y: 30 }, isActive: false, color: \"#3B82F6\" },\n  { id: \"2\", name: \"Amazon\", position: { x: 30, y: 60 }, isActive: false, color: \"#10B981\" },\n  { id: \"3\", name: \"Azure\", position: { x: 30, y: 90 }, isActive: false, color: \"#8B5CF6\" },\n  { id: \"4\", name: \"Office 365\", position: { x: 30, y: 120 }, isActive: false, color: \"#F59E0B\" },\n  { id: \"5\", name: \"SharePoint\", position: { x: 30, y: 150 }, isActive: false, color: \"#EF4444\" },\n  { id: \"6\", name: \"Apache\", position: { x: 30, y: 180 }, isActive: false, color: \"#06B6D4\" },\n  { id: \"7\", name: \"Prisma Cloud\", position: { x: 30, y: 210 }, isActive: false, color: \"#84CC16\" },\n]\n\nexport function ThreatVisualization() {\n  const [sources, setSources] = useState<DataSource[]>(dataSources)\n  const [threatFlows, setThreatFlows] = useState<ThreatFlow[]>([])\n  const [classificationStacks, setClassificationStacks] = useState<ClassificationStack>({\n    \"true-positive\": [],\n    \"false-positive\": [],\n    \"manual\": [],\n  })\n  const [rotationAngle, setRotationAngle] = useState(0)\n  const [outputWires, setOutputWires] = useState({ tp: false, fp: false, manual: false })\n  const [threatCount, setThreatCount] = useState(0)\n  const svgRef = useRef<SVGSVGElement>(null)\n  const [showAgentPopup, setShowAgentPopup] = useState(false);\n\n  const agentAnalysisData = {\n    status: \"Active\",\n    confidence: 96.8,\n    totalEvents: \"2.3M\",\n    processedToday: 14672,\n    threatsStopped: 847,\n    falsePositives: 23,\n    avgResponseTime: \"1.2s\",\n    models: [\n      { name: \"Threat Detection Engine\", accuracy: 94.2, status: \"optimal\" },\n      { name: \"Behavioral Analytics\", accuracy: 91.7, status: \"active\" },\n      { name: \"ML Anomaly Detector\", accuracy: 89.3, status: \"learning\" }\n    ],\n    recentActions: [\n      { type: \"Blocked\", description: \"Suspicious PowerShell execution\", time: \"2 min ago\" },\n      { type: \"Quarantined\", description: \"Potential malware detected\", time: \"5 min ago\" },\n      { type: \"Analyzed\", description: \"Network anomaly investigation\", time: \"12 min ago\" }\n    ]\n  };\n\n  // ===== Layout =====\n  // RIGHT SIDE (unchanged)\n  const truePositiveCenter = { x: 500, y: 80 }\n  const falsePositiveCenter  = { x: 500, y: 200 }\n  const manualCenter         = { x: 500, y: 340 }\n\n  // Canvas width stays fixed; height will be computed dynamically\n  const CANVAS_W = 620\n\n  // Brain\n  const brainCenter = { x: 260, y: 220 }\n\n  // Left sources panel geometry\n  const rowHeight = 24\n  const leftPanelWidth  = 180\n  const leftPanelX      = 120 - leftPanelWidth\n  const leftPanelY      = 40\n  const leftPanelHeight = 64 + sources.length * rowHeight + 32\n\n  // Headings (unchanged)\n  const headingBoxWidth  = 130\n  const headingBoxHeight = 28\n  const tpHeadingX       = truePositiveCenter.x + 12\n  const tpHeadingY       = leftPanelY\n  const fpHeadingX       = falsePositiveCenter.x + 12\n  const fpHeadingY       = falsePositiveCenter.y - headingBoxHeight / 2\n  const manualHeadingX   = manualCenter.x + 12\n  const manualHeadingY   = manualCenter.y - headingBoxHeight / 2\n\n  // —— Bottom 4 cards: just below the lowest content ——\n  const bottomCardsX      = leftPanelX\n  const bottomGap         = 16 // small visual gap to the figure above\n  const figureBottom = Math.max(\n    leftPanelY + leftPanelHeight,       // bottom of sources panel\n    brainCenter.y + 80,                 // brain lower extent\n    manualHeadingY + headingBoxHeight,  // lowest right heading bottom\n  )\n  const bottomCardsY      = figureBottom + bottomGap\n  const bottomCardsWidth  = CANVAS_W - bottomCardsX - 20\n  const bottomCardsHeight = 70\n\n  // === Dynamic canvas/container height to remove bottom empty gap ===\n  const bottomPadding     = 46\n  const CANVAS_H          = bottomCardsY + bottomCardsHeight + bottomPadding\n  const containerHeight   = CANVAS_H; // keeps visual size, no scaling\n\n  // ===== Effects (logic unchanged) =====\n  useEffect(() => {\n    const t = setInterval(() => setRotationAngle((p) => (p + 1) % 360), 60)\n    return () => clearInterval(t)\n  }, [])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      const randomSource = sources[Math.floor(Math.random() * sources.length)]\n      const newThreat: ThreatFlow = {\n        id: `threat-${Date.now()}`,\n        sourceId: randomSource.id,\n        progress: 0,\n        classification: null,\n        phase: \"to-brain\",\n        color: randomSource.color,\n      }\n      setSources((prev) => prev.map((s) => (s.id === randomSource.id ? { ...s, isActive: true } : s)))\n      setThreatFlows((prev) => [...prev, newThreat])\n      setThreatCount((prev) => prev + 1)\n      setTimeout(() => {\n        setSources((prev) => prev.map((s) => (s.id === randomSource.id ? { ...s, isActive: false } : s)))\n      }, 2000)\n    }, 1800)\n    return () => clearInterval(t)\n  }, [sources])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setThreatFlows((prev) =>\n        prev.map((flow) => {\n          if (flow.phase === \"to-brain\" && flow.progress >= 100) {\n            const r = Math.random()\n            const classification: ThreatFlow[\"classification\"] =\n              r > 0.6 ? \"true-positive\" : r > 0.3 ? \"false-positive\" : \"manual\"\n\n            if (classification === \"true-positive\") {\n              setOutputWires((p) => ({ ...p, tp: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, tp: false })), 2000)\n            } else if (classification === \"false-positive\") {\n              setOutputWires((p) => ({ ...p, fp: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, fp: false })), 2000)\n            } else {\n              setOutputWires((p) => ({ ...p, manual: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, manual: false })), 2000)\n            }\n\n            return { ...flow, classification, phase: \"to-classification\", progress: 0 }\n          }\n\n          if (flow.phase === \"to-classification\" && flow.progress >= 100) {\n            if (flow.classification) {\n              setClassificationStacks((prevStacks) => ({\n                ...prevStacks,\n                [flow.classification!]: [...prevStacks[flow.classification!].slice(-4), flow.sourceId],\n              }))\n            }\n            return { ...flow, phase: \"completed\" }\n          }\n\n          if (flow.phase === \"completed\") return flow\n          return { ...flow, progress: Math.min(flow.progress + 3, 100) }\n        }),\n      )\n    }, 50)\n    return () => clearInterval(t)\n  }, [])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setThreatFlows((prev) =>\n        prev.filter((f) => f.phase !== \"completed\" || Date.now() - Number.parseInt(f.id.split(\"-\")[1]) < 1000),\n      )\n    }, 1000)\n    return () => clearInterval(t)\n  }, [])\n\n  // ===== Paths =====\n  const getSourceWirePath = (source: DataSource) => {\n    const startX = 120\n    const startY = source.position.y + 60\n    const endX = brainCenter.x - 45\n    const endY = brainCenter.y\n    const c1x = startX + 50\n    const c1y = startY + (endY - startY) * 0.3\n    const c2x = endX - 40\n    const c2y = endY + (startY - endY) * 0.2\n    return `M ${startX} ${startY} C ${c1x} ${c1y} ${c2x} ${c2y} ${endX} ${endY}`\n  }\n\n  const getOutputPath = (target: { x: number; y: number }) => {\n    const startX = brainCenter.x + 45\n    const startY = brainCenter.y\n    const endX = target.x - 16\n    const endY = target.y\n    const c1x = startX + 200\n    const c1y = startY + (endY - startY) * 0.6\n    const c2x = endX - 40\n    const c2y = endY + (startY - endY) * 0.2\n    return `M ${startX} ${startY} C ${c1x} ${c1y} ${c2x} ${c2y} ${endX} ${endY}`\n  }\n\n  const renderFloatingStack = (\n    center: { x: number; y: number },\n    items: string[],\n    color: string,\n    labelMap: (id: string) => string,\n  ) => {\n    const max = 5\n    const list = items.slice(-max)\n    const startX = center.x + 18\n    const startY = center.y + 22\n    const step = 12\n    return (\n      <g>\n        {list.map((id, i) => {\n          const y = startY + i * step\n          const text = labelMap(id)\n          const w = Math.max(28, Math.min(160, text.length * 6.6))\n          return (\n            <g key={`${center.x}-${center.y}-${i}`} transform={`translate(${startX}, ${y})`}>\n              <rect\n                x={0}\n                y={-8}\n                rx={4}\n                ry={4}\n                width={w}\n                height={16}\n                fill=\"rgba(148,163,184,0.18)\"\n                stroke={color}\n                strokeOpacity={0.45}\n                strokeWidth={0.8}\n              />\n              <text\n                x={6}\n                y={4}\n                fontSize=\"10\"\n                fill={color}\n                style={{ fontFamily: \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\" }}\n              >\n                {text}\n              </text>\n            </g>\n          )\n        })}\n      </g>\n    )\n  }\n\n  return (\n    <div\n      className=\"w-full bg-gradient-to-r from-[hsl(220,15%,5%)] via-[hsl(220,20%,8%)] to-[hsl(220,15%,5%)] font-mono overflow-hidden relative rounded-xl border border-[hsl(330,100%,50%)]/20\"\n      style={{ height: `${containerHeight}px` }}  // <-- dynamic height removes bottom gap\n    >\n      <svg\n        ref={svgRef}\n        width=\"100%\"\n        height=\"100%\"\n        viewBox={`0 0 ${CANVAS_W} ${CANVAS_H}`}  // matches dynamic canvas height\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n          <filter id=\"strongGlow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur stdDeviation=\"5\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n          <linearGradient id=\"inactiveGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#374151\" stopOpacity=\"0.3\" />\n            <stop offset=\"50%\" stopColor=\"#4B5563\" stopOpacity=\"0.5\" />\n            <stop offset=\"100%\" stopColor=\"#374151\" stopOpacity=\"0.3\" />\n          </linearGradient>\n          <radialGradient id=\"brainGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n            <stop offset=\"0%\" stopColor=\"hsl(220,15%,5%)\" />\n            <stop offset=\"50%\" stopColor=\"hsl(285,75%,27%)\" />\n            <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" />\n          </radialGradient>\n          <linearGradient id=\"outputGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"hsl(220,15%,5%)\" stopOpacity=\"0.8\" />\n            <stop offset=\"50%\" stopColor=\"hsl(285,75%,27%)\" stopOpacity=\"1\" />\n            <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0.8\" />\n          </linearGradient>\n        </defs>\n\n        {/* Input wires */}\n        {sources.map((source) => {\n          const wirePath = getSourceWirePath(source)\n          return (\n            <g key={`wire-${source.id}`}>\n              <path\n                d={wirePath}\n                stroke={source.isActive ? source.color : \"url(#inactiveGradient)\"}\n                strokeWidth={source.isActive ? 3 : 2}\n                fill=\"none\"\n                opacity={source.isActive ? 0.9 : 0.4}\n                filter={source.isActive ? \"url(#glow)\" : \"none\"}\n              />\n              {threatFlows\n                .filter((flow) => flow.sourceId === source.id && flow.phase === \"to-brain\")\n                .map((flow) => {\n                  const progress = flow.progress / 100\n                  return (\n                    <circle key={flow.id} r={4} fill={flow.color} filter=\"url(#strongGlow)\" opacity={0.9}>\n                      <animateMotion\n                        dur=\"3s\"\n                        begin=\"0s\"\n                        fill=\"freeze\"\n                        path={wirePath}\n                        keyPoints={`${progress};${progress}`}\n                        keyTimes=\"0;1\"\n                      />\n                    </circle>\n                  )\n                })}\n            </g>\n          )\n        })}\n\n        {/* Output wires (right side unchanged) */}\n        <path d={getOutputPath(truePositiveCenter)} stroke={outputWires.tp ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.tp ? 4 : 2} fill=\"none\" opacity={outputWires.tp ? 1 : 0.4} filter={outputWires.tp ? \"url(#glow)\" : \"none\"} />\n        <path d={getOutputPath(falsePositiveCenter)} stroke={outputWires.fp ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.fp ? 4 : 2} fill=\"none\" opacity={outputWires.fp ? 1 : 0.4} filter={outputWires.fp ? \"url(#glow)\" : \"none\"} />\n        <path d={getOutputPath(manualCenter)} stroke={outputWires.manual ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.manual ? 4 : 2} fill=\"none\" opacity={outputWires.manual ? 1 : 0.4} filter={outputWires.manual ? \"url(#glow)\" : \"none\"} />\n\n        {/* Brain */}\n        <g transform={`translate(${brainCenter.x}, ${brainCenter.y})`}>\n          {Array.from({ length: 16 }).map((_, i) => {\n            const base = (i * 22.5 * Math.PI) / 180\n            const rot = base + (rotationAngle * Math.PI) / 180\n            const z = Math.sin(rot * 2) * 0.7\n            const radius = 50 + Math.sin(i * 0.8) * 5\n            const x = Math.cos(rot) * radius * (1 + z * 0.3)\n            const y = Math.sin(rot) * radius * (0.6 + z * 0.4)\n            const scale = 1 + z * 0.5\n            return <circle key={i} cx={x} cy={y} r={1.5 * scale} fill=\"hsl(330,100%,50%)\" opacity={0.6 + z * 0.3} filter=\"url(#glow)\" />\n          })}\n          <circle cx=\"0\" cy=\"0\" r=\"40\" fill=\"url(#brainGradient)\" stroke=\"hsl(330,100%,50%)\" strokeWidth=\"2\" filter=\"url(#strongGlow)\" opacity=\"0.8\" />\n          {Array.from({ length: 8 }).map((_, i) => {\n            const a = (i * 45 * Math.PI) / 180\n            return <line key={i} x1={Math.cos(a) * 15} y1={Math.sin(a) * 15} x2={Math.cos(a + Math.PI / 4) * 25} y2={Math.sin(a + Math.PI / 4) * 25} stroke=\"hsl(285,75%,27%)\" strokeWidth=\"1\" opacity=\"0.7\" />\n          })}\n          {/* Central AI Core - Clickable */}\n          <motion.div\n            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24 rounded-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center glow-button z-10 cursor-pointer hover:scale-110 transition-all\"\n            animate={{\n              scale: [1, 1.1, 1],\n              boxShadow: [\n                \"0 0 20px rgba(255,20,147,0.5)\",\n                \"0 0 40px rgba(255,20,147,0.8)\",\n                \"0 0 20px rgba(255,20,147,0.5)\"\n              ]\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            onClick={() => setShowAgentPopup(true)}\n            whileHover={{ scale: 1.15 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Brain className=\"w-12 h-12 text-white\" />\n          </motion.div>\n        </g>\n\n        {/* Sources panel */}\n        <foreignObject x={leftPanelX} y={leftPanelY} width={leftPanelWidth} height={leftPanelHeight}>\n          <div className=\"bg-slate-900/30 backdrop-blur-md rounded-lg p-3 border border-pink-500/30 shadow-xl w-[180px]\">\n            <h3 className=\"text-[11px] font-bold text-pink-200 mb-2 flex items-center gap-1\">\n              <div className=\"w-1 h-1 bg-pink-400 rounded-full animate-pulse\"></div>\n              SOURCES\n            </h3>\n            <div className=\"space-y-1\">\n              {sources.map((source) => (\n                <div\n                  key={source.id}\n                  className={`relative flex items-center justify-between px-2 py-1 rounded text-[11px] transition-all duration-300 ${\n                    source.isActive ? \"bg-slate-800/40 border-l-2 shadow-lg\" : \"bg-slate-800/20 border border-slate-700/30\"\n                  }`}\n                  style={{ borderLeftColor: source.isActive ? source.color : \"transparent\" }}\n                >\n                  <span className={`font-medium truncate ${source.isActive ? \"text-white\" : \"text-slate-300\"}`}>\n                    {source.name}\n                  </span>\n                  <div\n                    className={`w-2 h-2 rounded-full transition-all duration-300 ${source.isActive ? \"shadow-lg\" : \"\"}`}\n                    style={{\n                      backgroundColor: source.isActive ? source.color : \"#64748B\",\n                      boxShadow: source.isActive ? `0 0 8px ${source.color}` : \"none\",\n                    }}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </foreignObject>\n\n        {/* Right headings (unchanged) */}\n        <foreignObject x={tpHeadingX} y={tpHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-red-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-red-300\">TRUE+</h3>\n            </div>\n          </div>\n        </foreignObject>\n        <foreignObject x={fpHeadingX} y={fpHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-yellow-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-yellow-300\">FALSE+</h3>\n            </div>\n          </div>\n        </foreignObject>\n        <foreignObject x={manualHeadingX} y={manualHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-blue-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-blue-300\">MANUAL</h3>\n            </div>\n          </div>\n        </foreignObject>\n\n        {/* Floating stacks (unchanged) */}\n        {renderFloatingStack(truePositiveCenter, classificationStacks[\"true-positive\"], \"#fca5a5\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n        {renderFloatingStack(falsePositiveCenter, classificationStacks[\"false-positive\"], \"#fde68a\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n        {renderFloatingStack(manualCenter, classificationStacks[\"manual\"], \"#93c5fd\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n\n        {/* Bottom 4 info cards — just under the figure */}\n        <foreignObject x={bottomCardsX} y={bottomCardsY} width={bottomCardsWidth} height={bottomCardsHeight}>\n          <div className=\"flex items-stretch gap-3\">\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-cyan-300 leading-none\">22</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Events</div>\n              <div className=\"text-[11px] text-cyan-300 font-medium mt-1 leading-none\">GB/24H</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-green-300 leading-none\">36</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Data</div>\n              <div className=\"text-[11px] text-green-300 font-medium mt-1 leading-none\">TB/24H</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-orange-300 leading-none\">12</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Open</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-purple-300 leading-none\">157K</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Prevented</div>\n            </div>\n          </div>\n        </foreignObject>\n      </svg>\n\n      {/* Agent Analysis Popup Modal */}\n      <AnimatePresence>\n        {showAgentPopup && (\n          <motion.div \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            onClick={() => setShowAgentPopup(false)}\n          >\n            <motion.div \n              initial={{ scale: 0.8, opacity: 0, y: 20 }}\n              animate={{ scale: 1, opacity: 1, y: 0 }}\n              exit={{ scale: 0.8, opacity: 0, y: 20 }}\n              className=\"bg-black/80 backdrop-blur-md border border-[hsl(330,100%,50%)]/30 rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto\"\n              style={{\n                background: \"linear-gradient(135deg, rgba(255,20,147,0.05) 0%, rgba(138,43,226,0.08) 50%, rgba(0,0,0,0.9) 100%)\"\n              }}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] bg-clip-text text-transparent\">\n                  AI Agent Analysis Center\n                </h2>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setShowAgentPopup(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </Button>\n              </div>\n\n              {/* Agent Status Overview */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"bg-[hsl(330,100%,50%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Agent Status</span>\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-400\">{agentAnalysisData.status}</div>\n                  <div className=\"text-xs text-gray-400\">Confidence: {agentAnalysisData.confidence}%</div>\n                </div>\n\n                <div className=\"bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Events Today</span>\n                    <Activity className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">{agentAnalysisData.processedToday.toLocaleString()}</div>\n                  <div className=\"text-xs text-gray-400\">Total: {agentAnalysisData.totalEvents}</div>\n                </div>\n\n                <div className=\"bg-green-400/10 border border-green-400/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Threats Blocked</span>\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-400\">{agentAnalysisData.threatsStopped}</div>\n                  <div className=\"text-xs text-gray-400\">FP Rate: {((agentAnalysisData.falsePositives / agentAnalysisData.threatsStopped) * 100).toFixed(1)}%</div>\n                </div>\n              </div>\n\n              {/* AI Models Performance */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Brain className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                  Active AI Models\n                </h3>\n                <div className=\"space-y-3\">\n                  {agentAnalysisData.models.map((model, index) => (\n                    <div key={index} className=\"bg-[hsl(0,0%,8%)]/50 border border-[hsl(330,100%,50%)]/10 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-white\">{model.name}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs ${\n                          model.status === 'optimal' ? 'bg-green-400/10 text-green-400' :\n                          model.status === 'active' ? 'bg-[hsl(330,100%,50%)]/10 text-[hsl(330,100%,50%)]' :\n                          'bg-yellow-400/10 text-yellow-400'\n                        }`}>\n                          {model.status}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div \n                            className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full transition-all duration-1000\"\n                            style={{ width: `${model.accuracy}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-[hsl(330,100%,50%)] font-medium\">{model.accuracy}%</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Recent Actions */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Clock className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                  Recent Actions\n                </h3>\n                <div className=\"space-y-2\">\n                  {agentAnalysisData.recentActions.map((action, index) => (\n                    <div key={index} className=\"bg-[hsl(0,0%,8%)]/50 border border-[hsl(330,100%,50%)]/10 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            action.type === 'Blocked' ? 'bg-red-400' :\n                            action.type === 'Quarantined' ? 'bg-orange-400' :\n                            'bg-blue-400'\n                          }`} />\n                          <div>\n                            <span className={`text-sm font-medium ${\n                              action.type === 'Blocked' ? 'text-red-400' :\n                              action.type === 'Quarantined' ? 'text-orange-400' :\n                              'text-blue-400'\n                            }`}>\n                              {action.type}\n                            </span>\n                            <p className=\"text-xs text-gray-300\">{action.description}</p>\n                          </div>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">{action.time}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Performance Metrics */}\n              <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)]/10 to-[hsl(267,100%,67%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-xl p-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">{agentAnalysisData.avgResponseTime}</div>\n                    <div className=\"text-xs text-gray-400\">Avg Response</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">99.2%</div>\n                    <div className=\"text-xs text-gray-400\">Uptime</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">87%</div>\n                    <div className=\"text-xs text-gray-400\">Auto-resolved</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-400\">2.3ms</div>\n                    <div className=\"text-xs text-gray-400\">Latency</div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}","size_bytes":30166},"NewFrontend/alpha-platform/client/src/components/demo-request-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2 } from \"lucide-react\";\nimport SignupDialog from \"./signup-dialog\";\n\nconst demoRequestSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().min(1, \"Company name is required\"),\n  jobTitle: z.string().optional(),\n  phoneNumber: z.string().optional(),\n  message: z.string().optional(),\n});\n\ntype DemoRequestForm = z.infer<typeof demoRequestSchema>;\n\ninterface DemoRequestDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function DemoRequestDialog({ open, onOpenChange }: DemoRequestDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showSignup, setShowSignup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<DemoRequestForm>({\n    resolver: zodResolver(demoRequestSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      jobTitle: \"\",\n      phoneNumber: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitDemoRequest = useMutation({\n    mutationFn: async (data: DemoRequestForm) => {\n      return await apiRequest(\"POST\", \"/api/demo-requests\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo request submitted!\",\n        description: \"We'll be in touch within 24 hours to schedule your demo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/demo-requests\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error submitting request\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DemoRequestForm) => {\n    submitDemoRequest.mutate(data);\n  };\n\n  return (\n    <>\n      <SignupDialog open={showSignup} onOpenChange={setShowSignup} />\n      <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] bg-[hsl(215,28%,5%)] border-[hsl(170,100%,48%)]/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text\">Request a Demo</DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            See how Prophet Security can transform your security operations. We'll schedule a personalized demo for your team.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"John Doe\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Email *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"john@company.com\" \n                        type=\"email\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Company *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"ACME Corp\" \n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"jobTitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Job Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"CISO\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"+1 (555) 123-4567\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Message</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Tell us about your current security challenges...\" \n                      rows={3}\n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)] resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1 bg-transparent border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"glow\"\n                disabled={submitDemoRequest.isPending}\n                className=\"flex-1\"\n              >\n                {submitDemoRequest.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  \"Request Demo\"\n                )}\n              </Button>\n            </div>\n\n            <div className=\"text-center pt-4 border-t border-gray-700\">\n              <p className=\"text-sm text-gray-400 mb-3\">\n                Ready to get started immediately?\n              </p>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  onOpenChange(false);\n                  setShowSignup(true);\n                }}\n                className=\"w-full bg-[hsl(330,100%,50%)]/10 border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n              >\n                Create Account Instead\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n    </>\n  );\n}","size_bytes":9353},"NewFrontend/alpha-platform/client/src/components/error-boundary.tsx":{"content":"\nimport { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"min-h-screen bg-[hsl(220,15%,5%)] text-white flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Something went wrong</h2>\n            <p className=\"text-gray-300 mb-4\">We're experiencing technical difficulties</p>\n            <button \n              className=\"bg-[hsl(330,100%,50%)] hover:opacity-90 px-4 py-2 rounded\"\n              onClick={() => this.setState({ hasError: false })}\n            >\n              Try again\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":1215},"NewFrontend/alpha-platform/client/src/components/login-dialog.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Shield,\n  Lock,\n  CheckCircle2,\n  Eye,\n  EyeOff,\n  Zap,\n  AlertCircle,\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface LoginDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function LoginDialog({ open, onOpenChange }: LoginDialogProps) {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginStep, setLoginStep] = useState(0); // 0: locked, 1: email entered, 2: password entered, 3: success\n  const [showLaserGrid, setShowLaserGrid] = useState(true);\n  const [showFirewall, setShowFirewall] = useState(true);\n  const [gateOpen, setGateOpen] = useState(false);\n\n  // Reset state when dialog opens/closes\n  useEffect(() => {\n    if (open) {\n      setEmail(\"\");\n      setPassword(\"\");\n      setLoginStep(0);\n      setShowLaserGrid(true);\n      setShowFirewall(true);\n      setGateOpen(false);\n    }\n  }, [open]);\n\n  // Update barriers based on input progress\n  useEffect(() => {\n    if (email && email.includes(\"@\")) {\n      setLoginStep(1);\n      setShowLaserGrid(false);\n    } else {\n      setLoginStep(0);\n      setShowLaserGrid(true);\n    }\n\n    if (password && password.length >= 6) {\n      setLoginStep(2);\n      setShowFirewall(false);\n    } else if (email && email.includes(\"@\")) {\n      setLoginStep(1);\n      setShowFirewall(true);\n    }\n  }, [email, password]);\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    \n    // Simulate login process\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setLoginStep(3);\n    setGateOpen(true);\n    \n    // Close dialog and redirect to dashboard after successful animation\n    setTimeout(() => {\n      setIsLoading(false);\n      onOpenChange(false);\n      setLocation(\"/dashboard\");\n    }, 2000);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] bg-[hsl(215,28%,5%)] border-[hsl(330,100%,50%)]/30 overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" />\n            Access Control Vault\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Enter your credentials to access the secured digital environment.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* DNA of Cyber Attack Animation */}\n        <div className=\"relative h-40 mb-6 overflow-hidden rounded-lg bg-gradient-to-br from-[hsl(220,15%,5%)] to-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20\">\n          {/* Attack Chain Background */}\n          <div className=\"absolute inset-0 opacity-10\">\n            <div className=\"grid grid-cols-6 grid-rows-4 h-full\">\n              {Array.from({ length: 24 }).map((_, i) => (\n                <div key={i} className=\"border border-[hsl(330,100%,50%)]/5\" />\n              ))}\n            </div>\n          </div>\n\n          {/* Attack Stages */}\n          <div className=\"absolute inset-0 flex items-center justify-between px-4\">\n            {[\n              { id: 1, label: \"Phishing\", icon: \"📧\", color: \"red\", progress: loginStep >= 0 ? 100 : 0 },\n              { id: 2, label: \"Credential\", icon: \"🔑\", color: \"orange\", progress: loginStep >= 1 ? 100 : 0 },\n              { id: 3, label: \"Lateral Move\", icon: \"🌐\", color: \"yellow\", progress: loginStep >= 2 ? 100 : 0 },\n              { id: 4, label: \"Exfiltration\", icon: \"📤\", color: \"red\", progress: loginStep >= 3 ? 100 : 0 }\n            ].map((stage, index) => (\n              <div key={stage.id} className=\"relative flex flex-col items-center\">\n                {/* Attack Stage */}\n                <motion.div\n                  initial={{ scale: 0.5, opacity: 0.3 }}\n                  animate={{ \n                    scale: stage.progress > 0 ? 1 : 0.5,\n                    opacity: stage.progress > 0 ? 1 : 0.3,\n                    boxShadow: stage.progress > 0 ? `0 0 20px ${stage.color === 'red' ? '#ef4444' : stage.color === 'orange' ? '#f97316' : '#eab308'}` : 'none'\n                  }}\n                  transition={{ duration: 0.6, delay: index * 0.2 }}\n                  className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs ${\n                    stage.progress > 0 \n                      ? `border-${stage.color}-500 bg-${stage.color}-500/20` \n                      : 'border-gray-600 bg-gray-600/20'\n                  }`}\n                >\n                  <span>{stage.icon}</span>\n                </motion.div>\n                \n                {/* Stage Label */}\n                <motion.div\n                  initial={{ opacity: 0, y: 5 }}\n                  animate={{ opacity: stage.progress > 0 ? 1 : 0.5, y: 0 }}\n                  transition={{ duration: 0.4, delay: index * 0.2 + 0.3 }}\n                  className=\"text-xs text-gray-300 mt-1 text-center\"\n                >\n                  {stage.label}\n                </motion.div>\n\n                {/* Connection Line */}\n                {index < 3 && (\n                  <motion.div\n                    initial={{ scaleX: 0, opacity: 0 }}\n                    animate={{ \n                      scaleX: stage.progress > 0 ? 1 : 0,\n                      opacity: stage.progress > 0 ? 1 : 0.3\n                    }}\n                    transition={{ duration: 0.8, delay: index * 0.2 + 0.4 }}\n                    className=\"absolute top-4 left-8 w-8 h-0.5 bg-gradient-to-r from-red-500 to-orange-500 origin-left\"\n                  />\n                )}\n\n                {/* Countermeasure */}\n                <AnimatePresence>\n                  {stage.progress > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0, y: -20 }}\n                      animate={{ opacity: 1, scale: 1, y: -25 }}\n                      exit={{ opacity: 0, scale: 0, y: -20 }}\n                      transition={{ duration: 0.5, delay: index * 0.2 + 0.6 }}\n                      className=\"absolute top-0 bg-green-500/20 border border-green-500/50 rounded px-1 py-0.5 text-xs text-green-400\"\n                    >\n                      {stage.id === 1 && \"Email Blocked\"}\n                      {stage.id === 2 && \"MFA Required\"}\n                      {stage.id === 3 && \"Network Isolated\"}\n                      {stage.id === 4 && \"Data Protected\"}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n            ))}\n          </div>\n\n          {/* Attack Flow Visualization */}\n          <motion.div\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: loginStep >= 3 ? 1 : loginStep / 3 }}\n            transition={{ duration: 2, ease: \"easeInOut\" }}\n            className=\"absolute inset-0\"\n          >\n            <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n              <motion.path\n                d=\"M 10 50 Q 30 30, 50 50 Q 70 70, 90 50\"\n                stroke=\"url(#attackGradient)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: loginStep / 3 }}\n                transition={{ duration: 1.5, ease: \"easeInOut\" }}\n              />\n              <defs>\n                <linearGradient id=\"attackGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                  <stop offset=\"50%\" stopColor=\"#f97316\" />\n                  <stop offset=\"100%\" stopColor=\"#eab308\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </motion.div>\n          {/* Success State - All Threats Neutralized */}\n          <AnimatePresence>\n            {gateOpen && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"absolute inset-0\"\n              >\n                {/* Success Overlay */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 1, delay: 0.5 }}\n                  className=\"absolute inset-0 bg-gradient-to-br from-green-500/20 via-[hsl(330,100%,50%)]/20 to-blue-500/20 flex items-center justify-center\"\n                >\n                  <div className=\"text-green-400 font-bold text-lg flex items-center gap-2\">\n                    <CheckCircle2 className=\"w-6 h-6\" />\n                    THREATS NEUTRALIZED\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Security Status Indicator */}\n          <div className=\"absolute top-2 right-2\">\n            <motion.div\n              animate={{ \n                backgroundColor: loginStep === 3 ? \"#10b981\" : loginStep >= 1 ? \"#f59e0b\" : \"#ef4444\",\n                boxShadow: loginStep === 3 ? \"0 0 10px rgba(16, 185, 129, 0.6)\" : loginStep >= 1 ? \"0 0 10px rgba(245, 158, 11, 0.6)\" : \"0 0 10px rgba(239, 68, 68, 0.6)\"\n              }}\n              className=\"w-3 h-3 rounded-full\"\n            />\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"agent@example.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"bg-[hsl(0,0%,8%)] border-[hsl(330,100%,50%)]/30 focus:border-[hsl(330,100%,50%)]\"\n              disabled={isLoading || gateOpen}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter your secure password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-[hsl(0,0%,8%)] border-[hsl(330,100%,50%)]/30 focus:border-[hsl(330,100%,50%)] pr-10\"\n                disabled={isLoading || gateOpen}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                disabled={isLoading || gateOpen}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Security Progress Indicator */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <div className=\"flex gap-1\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div\n                  key={i}\n                  className={`w-2 h-2 rounded-full transition-colors duration-300 ${\n                    i < loginStep ? \"bg-[hsl(330,100%,50%)]\" : \"bg-gray-600\"\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"text-gray-400\">\n              {loginStep === 0 && \"Identify attack vector: Phishing detected\"}\n              {loginStep === 1 && \"Credentials compromised: Deploy MFA\"}\n              {loginStep === 2 && \"Lateral movement blocked: Isolate network\"}\n              {loginStep === 3 && \"All threats neutralized: Access secure\"}\n            </span>\n          </div>\n\n          <Button\n            onClick={handleLogin}\n            disabled={!email || !password || password.length < 6 || isLoading || gateOpen}\n            className=\"w-full bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] hover:opacity-90 disabled:opacity-50\"\n            size=\"lg\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full\"\n                />\n                Authenticating...\n              </div>\n            ) : gateOpen ? (\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle2 className=\"w-4 h-4\" />\n                Access Granted\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"w-4 h-4\" />\n                Access Vault\n              </div>\n            )}\n          </Button>\n\n          <div className=\"text-center text-sm text-gray-400\">\n            Don't have access credentials?{\" \"}\n            <Button variant=\"link\" className=\"p-0 h-auto text-[hsl(330,100%,50%)] hover:text-[hsl(330,100%,60%)]\">\n              Request Access\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13799},"NewFrontend/alpha-platform/client/src/components/signup-dialog.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, Shield, Lock, CheckCircle2, AlertCircle } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  company: z.string().min(1, \"Company name is required\"),\n  jobTitle: z.string().optional(),\n  phoneNumber: z.string().optional(),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain a number\")\n    .regex(/[^A-Za-z0-9]/, \"Password must contain special character\"),\n  confirmPassword: z.string(),\n  message: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\ninterface SignupDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function SignupDialog({ open, onOpenChange }: SignupDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [passwordScore, setPasswordScore] = useState(0);\n  const [showBarriers, setShowBarriers] = useState(true);\n\n  const form = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      company: \"\",\n      jobTitle: \"\",\n      phoneNumber: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      message: \"\",\n    },\n  });\n\n  const password = form.watch(\"password\");\n\n  useEffect(() => {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n    \n    setPasswordScore(score);\n    setShowBarriers(score < 5);\n  }, [password]);\n\n  const submitSignup = useMutation({\n    mutationFn: async (data: SignupForm) => {\n      const { confirmPassword, ...submitData } = data;\n      return await apiRequest(\"POST\", \"/api/signup\", submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Welcome to Prophet Security. You can now access your dashboard.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating account\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupForm) => {\n    submitSignup.mutate(data);\n  };\n\n  const passwordCriteria = [\n    { test: (p: string) => p.length >= 8, label: \"8+ characters\" },\n    { test: (p: string) => /[A-Z]/.test(p), label: \"Uppercase letter\" },\n    { test: (p: string) => /[a-z]/.test(p), label: \"Lowercase letter\" },\n    { test: (p: string) => /[0-9]/.test(p), label: \"Number\" },\n    { test: (p: string) => /[^A-Za-z0-9]/.test(p), label: \"Special character\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] bg-[hsl(215,28%,5%)] border-[hsl(170,100%,48%)]/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold glow-text flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-[hsl(170,100%,48%)]\" />\n            Join Prophet Security\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Create your account to access our advanced AI-powered SOC platform.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* DNA of Cyber Attack - Advanced Version */}\n        <div className=\"relative h-24 mb-4 overflow-hidden rounded-lg bg-[hsl(0,0%,10%)]/50 border border-[hsl(170,100%,48%)]/20\">\n          {/* Background DNA Helix Pattern */}\n          <div className=\"absolute inset-0 opacity-10\">\n            <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n              <motion.path\n                d=\"M 0 30 Q 25 10, 50 30 Q 75 50, 100 30\"\n                stroke=\"url(#helixGradient1)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: 1 }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              />\n              <motion.path\n                d=\"M 0 70 Q 25 50, 50 70 Q 75 90, 100 70\"\n                stroke=\"url(#helixGradient2)\"\n                strokeWidth=\"0.5\"\n                fill=\"none\"\n                initial={{ pathLength: 0 }}\n                animate={{ pathLength: 1 }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 1 }}\n              />\n              <defs>\n                <linearGradient id=\"helixGradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                  <stop offset=\"100%\" stopColor=\"#f97316\" />\n                </linearGradient>\n                <linearGradient id=\"helixGradient2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#10b981\" />\n                  <stop offset=\"100%\" stopColor=\"#06d6a0\" />\n                </linearGradient>\n              </defs>\n            </svg>\n          </div>\n\n          {/* Attack Stages Timeline */}\n          <div className=\"absolute inset-0 flex items-center justify-between px-3\">\n            {[\n              { id: 1, label: \"Recon\", icon: \"🔍\", threat: \"Social Engineering\", countermeasure: \"Awareness Training\" },\n              { id: 2, label: \"Initial\", icon: \"🎯\", threat: \"Phishing Email\", countermeasure: \"Email Security\" },\n              { id: 3, label: \"Execution\", icon: \"⚡\", threat: \"Malware Deployed\", countermeasure: \"EDR Detection\" },\n              { id: 4, label: \"Persistence\", icon: \"🔗\", threat: \"Backdoor Created\", countermeasure: \"Behavior Analysis\" },\n              { id: 5, label: \"Escalation\", icon: \"⬆️\", threat: \"Privilege Escalation\", countermeasure: \"Zero Trust\" },\n              { id: 6, label: \"Exfiltration\", icon: \"📤\", threat: \"Data Theft\", countermeasure: \"DLP Protection\" }\n            ].map((stage, index) => {\n              const isActive = passwordScore > index;\n              return (\n                <div key={stage.id} className=\"relative flex flex-col items-center\">\n                  {/* Attack Stage Circle */}\n                  <motion.div\n                    initial={{ scale: 0.3, opacity: 0.2 }}\n                    animate={{ \n                      scale: isActive ? 1 : 0.3,\n                      opacity: isActive ? 1 : 0.2,\n                      boxShadow: isActive ? `0 0 15px rgba(239, 68, 68, 0.6)` : 'none'\n                    }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className={`w-6 h-6 rounded-full border flex items-center justify-center text-xs ${\n                      isActive \n                        ? 'border-red-500 bg-red-500/20 text-red-400' \n                        : 'border-gray-600 bg-gray-600/20 text-gray-500'\n                    }`}\n                  >\n                    <span className=\"text-xs\">{stage.icon}</span>\n                  </motion.div>\n\n                  {/* Connection DNA Strand */}\n                  {index < 5 && (\n                    <motion.div\n                      initial={{ scaleX: 0 }}\n                      animate={{ scaleX: isActive ? 1 : 0 }}\n                      transition={{ duration: 0.6, delay: index * 0.1 + 0.3 }}\n                      className=\"absolute top-3 left-6 w-4 h-0.5 bg-gradient-to-r from-red-500 to-orange-500 origin-left\"\n                    />\n                  )}\n\n                  {/* Threat Label */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 5 }}\n                    animate={{ opacity: isActive ? 1 : 0.3, y: 0 }}\n                    className=\"absolute -top-6 text-xs text-red-400 whitespace-nowrap\"\n                    style={{ fontSize: '10px' }}\n                  >\n                    {stage.threat}\n                  </motion.div>\n\n                  {/* Countermeasure Animation */}\n                  <AnimatePresence>\n                    {isActive && (\n                      <motion.div\n                        initial={{ opacity: 0, scale: 0, y: 10 }}\n                        animate={{ opacity: 1, scale: 1, y: 8 }}\n                        exit={{ opacity: 0, scale: 0, y: 10 }}\n                        transition={{ duration: 0.4, delay: index * 0.1 + 0.5 }}\n                        className=\"absolute top-8 bg-green-500/20 border border-green-500/50 rounded px-1 py-0.5 text-green-400 whitespace-nowrap\"\n                        style={{ fontSize: '9px' }}\n                      >\n                        ✓ {stage.countermeasure}\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Progress Indicator */}\n          <motion.div\n            initial={{ width: \"0%\" }}\n            animate={{ width: `${(passwordScore / 6) * 100}%` }}\n            transition={{ duration: 0.3 }}\n            className=\"absolute bottom-0 left-0 h-1 bg-gradient-to-r from-red-500 via-orange-500 to-green-500\"\n          />\n\n          {/* Complete Security Animation */}\n          <AnimatePresence>\n            {passwordScore >= 5 && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-r from-green-500/20 to-[hsl(170,100%,48%)]/20 backdrop-blur-sm\"\n              >\n                <div className=\"text-xs font-bold text-[hsl(170,100%,48%)] flex items-center gap-1\">\n                  <CheckCircle2 className=\"w-3 h-3\" />\n                  SECURITY CHAIN COMPLETE\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"John Doe\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Email *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"john@company.com\" \n                        type=\"email\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Company *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"ACME Corp\" \n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"jobTitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Job Title</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"CISO\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"+1 (555) 123-4567\" \n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Password *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"••••••••\" \n                        type=\"password\"\n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Confirm Password *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"••••••••\" \n                        type=\"password\"\n                        {...field} \n                        className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)]\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Password Requirements */}\n            {password && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: \"auto\" }}\n                className=\"bg-[hsl(0,0%,10%)]/30 rounded-lg p-3 border border-[hsl(170,100%,48%)]/20\"\n              >\n                <div className=\"text-sm text-gray-300 mb-2\">Password Requirements:</div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {passwordCriteria.map((criteria, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -10 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-center gap-2 text-xs ${\n                        criteria.test(password) ? \"text-green-400\" : \"text-gray-500\"\n                      }`}\n                    >\n                      {criteria.test(password) ? (\n                        <CheckCircle2 className=\"w-3 h-3\" />\n                      ) : (\n                        <AlertCircle className=\"w-3 h-3\" />\n                      )}\n                      {criteria.label}\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white\">Message</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Tell us about your security requirements...\" \n                      rows={3}\n                      {...field} \n                      className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(170,100%,48%)]/30 text-white placeholder:text-gray-400 focus:border-[hsl(170,100%,48%)] resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1 bg-transparent border-gray-600 text-gray-300 hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"glow\"\n                disabled={submitSignup.isPending || showBarriers}\n                className=\"flex-1\"\n              >\n                {submitSignup.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Creating Account...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Create Account\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":19607},"NewFrontend/alpha-platform/client/src/hooks/use-gsap-animations.ts":{"content":"\nimport { useEffect, useRef, MutableRefObject } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport const useGSAPFadeIn = (trigger?: string, delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element,\n        { opacity: 0, y: 30 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.8,\n          delay,\n          ease: \"power2.out\",\n          scrollTrigger: trigger ? {\n            trigger: element,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          } : undefined\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [trigger, delay]);\n\n  return ref;\n};\n\nexport const useGSAPScaleIn = (delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element,\n        { scale: 0.8, opacity: 0 },\n        {\n          scale: 1,\n          opacity: 1,\n          duration: 0.6,\n          delay,\n          ease: \"back.out(1.7)\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [delay]);\n\n  return ref;\n};\n\nexport const useGSAPStagger = (selector: string, delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.fromTo(element.querySelectorAll(selector),\n        { opacity: 0, y: 20 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.5,\n          stagger: 0.1,\n          delay,\n          ease: \"power2.out\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [selector, delay]);\n\n  return ref;\n};\n\nexport const useGSAPSlideIn = (direction: 'left' | 'right' | 'up' | 'down' = 'up', delay = 0) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const getTransform = () => {\n      switch (direction) {\n        case 'left': return { x: -50, y: 0 };\n        case 'right': return { x: 50, y: 0 };\n        case 'up': return { x: 0, y: 50 };\n        case 'down': return { x: 0, y: -50 };\n        default: return { x: 0, y: 50 };\n      }\n    };\n\n    const ctx = gsap.context(() => {\n      const { x, y } = getTransform();\n      gsap.fromTo(element,\n        { opacity: 0, x, y },\n        {\n          opacity: 1,\n          x: 0,\n          y: 0,\n          duration: 0.8,\n          delay,\n          ease: \"power3.out\"\n        }\n      );\n    }, ref);\n\n    return () => ctx.revert();\n  }, [direction, delay]);\n\n  return ref;\n};\n\nexport const useGSAPFloat = (intensity = 10, duration = 2) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const ctx = gsap.context(() => {\n      gsap.to(element, {\n        y: -intensity,\n        duration,\n        yoyo: true,\n        repeat: -1,\n        ease: \"power2.inOut\"\n      });\n    }, ref);\n\n    return () => ctx.revert();\n  }, [intensity, duration]);\n\n  return ref;\n};\n","size_bytes":3271},"NewFrontend/alpha-platform/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"NewFrontend/alpha-platform/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"NewFrontend/alpha-platform/client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface DashboardStats {\n  activeIncidents: number;\n  alertsToday: number;\n  avgResponseTime: string;\n  modelAccuracy: number;\n}\n\nexport interface AlertData {\n  id: string;\n  sourceId: string;\n  payload: Record<string, any>;\n  receivedAt: string;\n  type?: string;\n  severity?: 'critical' | 'high' | 'medium' | 'low';\n  title?: string;\n  description?: string;\n}\n\nexport interface DatasetStats {\n  stats: {\n    total: number;\n    crowdstrike: number;\n    sentinelone: number;\n    email: number;\n    firewall: number;\n  };\n  sources: Array<{\n    id: string;\n    name: string;\n    type: string;\n  }>;\n}\n\nexport interface Incident {\n  id: string;\n  title: string;\n  description?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'open' | 'investigating' | 'monitoring' | 'resolved';\n  assignedTo?: string;\n  createdAt: string;\n  closedAt?: string;\n  confidence?: number;\n}\n\nexport const api = {\n  // Dashboard\n  getDashboardStats: (): Promise<DashboardStats> =>\n    fetch('/api/dashboard/stats', { credentials: 'include' }).then(res => res.json()),\n\n  // Dataset Stats\n  getDatasetStats: (): Promise<DatasetStats> =>\n    fetch('/api/alerts/dataset-stats', { credentials: 'include' }).then(res => res.json()),\n\n  // Sources\n  getSources: () =>\n    fetch('/api/sources', { credentials: 'include' }).then(res => res.json()),\n    \n  createSource: (source: any) =>\n    apiRequest('POST', '/api/sources', source),\n    \n  updateSource: (id: string, source: any) =>\n    apiRequest('PUT', `/api/sources/${id}`, source),\n    \n  deleteSource: (id: string) =>\n    apiRequest('DELETE', `/api/sources/${id}`),\n\n  // Incidents\n  getIncidents: (): Promise<Incident[]> =>\n    fetch('/api/incidents', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncident: (id: string) =>\n    fetch(`/api/incidents/${id}`, { credentials: 'include' }).then(res => res.json()),\n    \n  createIncident: (incident: any) =>\n    apiRequest('POST', '/api/incidents', incident),\n    \n  updateIncident: (id: string, incident: any) =>\n    apiRequest('PUT', `/api/incidents/${id}`, incident),\n    \n  bulkUpdateIncidents: (incidentIds: string[], operation: string, data?: any) =>\n    apiRequest('PATCH', '/api/incidents/bulk', { incidentIds, operation, data }),\n\n  // Actions\n  getActions: () =>\n    fetch('/api/actions', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncidentActions: (incidentId: string) =>\n    fetch(`/api/incidents/${incidentId}/actions`, { credentials: 'include' }).then(res => res.json()),\n    \n  createAction: (incidentId: string, action: any) =>\n    apiRequest('POST', `/api/incidents/${incidentId}/actions`, action),\n\n  // Alerts\n  getAlerts: () =>\n    fetch('/api/alerts', { credentials: 'include' }).then(res => res.json()),\n    \n  createAlert: (alert: any) =>\n    apiRequest('POST', '/api/alerts', alert),\n\n  // Alert Normalization & Simulation\n  simulateAlerts: (sourceType: string, count: number = 10) =>\n    apiRequest('POST', `/api/alerts/simulate/${sourceType}`, { count }),\n    \n  simulateRealTimeAlerts: (sourceType: string, durationMinutes: number = 5) =>\n    apiRequest('POST', `/api/alerts/simulate-realtime/${sourceType}`, { durationMinutes }),\n    \n  getSampleAlert: (sourceType: string) =>\n    fetch(`/api/alerts/sample/${sourceType}`, { credentials: 'include' }).then(res => res.json()),\n\n  // Feedback\n  getFeedback: () =>\n    fetch('/api/feedback', { credentials: 'include' }).then(res => res.json()),\n    \n  getIncidentFeedback: (incidentId: string) =>\n    fetch(`/api/incidents/${incidentId}/feedback`, { credentials: 'include' }).then(res => res.json()),\n    \n  createFeedback: (feedback: any) =>\n    apiRequest('POST', '/api/feedback', feedback),\n\n  // Metrics\n  getMetrics: () =>\n    fetch('/api/metrics', { credentials: 'include' }).then(res => res.json()),\n    \n  createMetric: (metric: any) =>\n    apiRequest('POST', '/api/metrics', metric),\n\n  // Threat Intelligence\n  getThreatIntel: () =>\n    fetch('/api/threatintel', { credentials: 'include' }).then(res => res.json()),\n\n  // Export functionality\n  exportIncidents: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n    severity?: string[];\n    status?: string[];\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    if (filters?.severity?.length) params.append('severity', filters.severity.join(','));\n    if (filters?.status?.length) params.append('status', filters.status.join(','));\n    \n    return fetch(`/api/export/incidents?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportAlerts: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n    severity?: string[];\n    sourceId?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    if (filters?.severity?.length) params.append('severity', filters.severity.join(','));\n    if (filters?.sourceId) params.append('source_id', filters.sourceId);\n    \n    return fetch(`/api/export/alerts?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportAnalytics: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    \n    return fetch(`/api/export/analytics?${params.toString()}`, { credentials: 'include' });\n  },\n\n  exportActions: (format: 'csv' | 'json', filters?: {\n    startDate?: string;\n    endDate?: string;\n  }) => {\n    const params = new URLSearchParams({ format });\n    if (filters?.startDate) params.append('start_date', filters.startDate);\n    if (filters?.endDate) params.append('end_date', filters.endDate);\n    \n    return fetch(`/api/export/actions?${params.toString()}`, { credentials: 'include' });\n  },\n\n  // Authentication\n  login: (credentials: { email: string; password: string }) =>\n    apiRequest('POST', '/api/auth/login', credentials),\n    \n  register: (userData: { email: string; password: string; firstName?: string; lastName?: string }) =>\n    apiRequest('POST', '/api/auth/register', userData),\n    \n  logout: () =>\n    apiRequest('POST', '/api/auth/logout'),\n    \n  getCurrentUser: () =>\n    fetch('/api/auth/me', { credentials: 'include' }).then(res => res.json()),\n};","size_bytes":6663},"NewFrontend/alpha-platform/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"NewFrontend/alpha-platform/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"NewFrontend/alpha-platform/client/src/pages/ai-assistant.tsx":{"content":"\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, Send, Mic, Paperclip, MoreHorizontal, Copy, ExternalLink, ChevronDown, Network, Server, Users, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ChatMessage {\n  id: string;\n  type: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\ninterface AlertSummary {\n  alertId: string;\n  severity: \"Critical\" | \"High\" | \"Medium\" | \"Low\";\n  status: \"Active\" | \"Investigating\" | \"Resolved\";\n  detected: string;\n  lastUpdated: string;\n  assignedAnalyst: string;\n  riskScore: number;\n  aiConfidence: number;\n  sourceIp: string;\n  destinationIp: string;\n  destinationPort: string;\n  protocol: string;\n  detectedBy: string;\n  actionTaken: string;\n  geoLocation: string;\n}\n\ninterface NetworkFlow {\n  flowId: string;\n  startTime: string;\n  endTime: string;\n  bytesSent: string;\n  bytesReceived: string;\n  packets: string;\n  flags: string;\n  application: string;\n}\n\ninterface ImpactedEntity {\n  type: \"user\" | \"device\" | \"server\";\n  name: string;\n  identifier: string;\n  icon: typeof User | typeof Server | typeof Network;\n}\n\ninterface IoC {\n  id: string;\n  type: string;\n  value: string;\n  confidence: string;\n}\n\nexport default function AIAssistant() {\n  const [, setLocation] = useLocation();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const alertData: AlertSummary = {\n    alertId: \"ALT-2804-001\",\n    severity: \"Critical\",\n    status: \"Active\",\n    detected: \"2024-07-26 16:30 UTC\",\n    lastUpdated: \"2024-07-26 16:45 UTC\",\n    assignedAnalyst: \"Sarah Chen\",\n    riskScore: 92,\n    aiConfidence: 88,\n    sourceIp: \"192.168.1.105\",\n    destinationIp: \"185.199.108.153\",\n    destinationPort: \"443\",\n    protocol: \"TCP\",\n    detectedBy: \"IDS/IPS Rule 703\",\n    actionTaken: \"Blocked by Firewall\",\n    geoLocation: \"Destination Russia\"\n  };\n\n  const impactedEntities: ImpactedEntity[] = [\n    { type: \"user\", name: \"jane.doe@example.com\", identifier: \"User Account\", icon: User },\n    { type: \"device\", name: \"HR-Laptop-007\", identifier: \"Device\", icon: Network },\n    { type: \"server\", name: \"prod-web-server-01\", identifier: \"Server\", icon: Server }\n  ];\n\n  const indicators: IoC[] = [\n    { id: \"1\", type: \"IP\", value: \"185.199.108.153\", confidence: \"High\" },\n    { id: \"2\", type: \"Hash\", value: \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\", confidence: \"Medium\" },\n    { id: \"3\", type: \"Domain\", value: \"malicious-c2server.ru\", confidence: \"High\" }\n  ];\n\n  const networkFlow: NetworkFlow = {\n    flowId: \"0x48C0123EF04\",\n    startTime: \"2024-07-26 14:30:15\",\n    endTime: \"2024-07-26 14:33:15\",\n    bytesSent: \"1.2 GB\",\n    bytesReceived: \"45.6 MB\",\n    packets: \"15,200\",\n    flags: \"SYN, ACK, PSH, FIN\",\n    application: \"HTTPS\"\n  };\n\n  const initialMessages: ChatMessage[] = [\n    {\n      id: \"1\",\n      type: \"assistant\",\n      content: \"I've detected unusual outbound traffic originating from '192.168.1.105' to a known malicious IP '185.199.108.153' on port '443' (HTTPS). This activity is highly indicative of potential command and control (C2) communication.\\n\\nSource IP: 192.168.1.105\\nDestination IP: 185.199.108.153\\nDestination Port: 443\\nProtocol: TCP\\nAnomaly Type: Outbound C2 Traffic\",\n      timestamp: new Date()\n    },\n    {\n      id: \"2\",\n      type: \"user\",\n      content: \"What process initiated this connection on 192.168.1.105?\",\n      timestamp: new Date()\n    },\n    {\n      id: \"3\",\n      type: \"assistant\",\n      content: \"Analysis indicates the connection was initiated by 'cmd.exe' running under a compromised user account. Further investigation into process tree and executed commands is recommended. Would you like me to initiate an automated scan?\",\n      timestamp: new Date()\n    }\n  ];\n\n  const suggestedActions = [\n    \"Run Automated Scan\",\n    \"View Process Tree\", \n    \"Show me the full network flow data for this connection\",\n    \"Run full vulnerability scan\",\n    \"Isolate impacted host\",\n    \"Generate incident report\",\n    \"Check user login activity\",\n    \"Analyze\"\n  ];\n\n  useEffect(() => {\n    setMessages(initialMessages);\n  }, []);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const simulateTyping = (content: string, callback: () => void) => {\n    setIsTyping(true);\n    setTimeout(() => {\n      setIsTyping(false);\n      callback();\n    }, 1000 + Math.random() * 2000);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n\n    // Simulate AI response\n    simulateTyping(\"\", () => {\n      const aiResponses = [\n        \"Here is a summary of the network flow for the suspicious connection. High volume outbound traffic observed. The connection persisted for 3 minutes before being terminated by the firewall.\\n\\nFlow ID: 0x48C0123EF04\\nStart Time: 2024-07-26 14:30:15\\nEnd Time: 2024-07-26 14:33:15\\nBytes Sent: 1.2 GB\\nBytes Received: 45.6 MB\\nPackets: 15,200\\nFlags: SYN, ACK, PSH, FIN\\nApplication: HTTPS\",\n        \"Based on my analysis, this appears to be a coordinated attack. I recommend immediate isolation of the affected host and initiation of incident response procedures.\",\n        \"I've completed the vulnerability scan. The system shows 3 critical vulnerabilities that need immediate attention. Would you like me to generate a remediation plan?\",\n        \"The automated scan has been initiated. I'll monitor the progress and notify you of any findings. Estimated completion time: 5 minutes.\"\n      ];\n\n      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: \"assistant\",\n        content: randomResponse,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    });\n  };\n\n  const handleSuggestedAction = (action: string) => {\n    setInputValue(action);\n    handleSendMessage();\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'Critical': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'High': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      case 'Medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'bg-cyan-500/20 text-cyan-400 border-cyan-500/30';\n      case 'Investigating': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-green-500/20 text-green-400 border-green-500/30';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Smart Alert Management</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Left Panel - AI Assistant Chat */}\n        <motion.div \n          initial={{ x: -50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6 }}\n          className=\"w-1/2 border-r border-[hsl(330,100%,50%)]/20 flex flex-col\"\n        >\n          <div className=\"bg-[hsl(0,0%,8%)]/80 border-b border-[hsl(330,100%,50%)]/20 px-6 py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full flex items-center justify-center\">\n                <Bot className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold text-white\">AI Assistant</h2>\n                <p className=\"text-sm text-gray-400\">Analyzing suspicious network traffic...</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n            <AnimatePresence>\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div className={`max-w-[80%] ${\n                    message.type === 'user' \n                      ? 'bg-[hsl(330,100%,50%)]/20 border border-[hsl(330,100%,50%)]/30 rounded-l-lg rounded-tr-lg' \n                      : 'bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg'\n                  } p-4`}>\n                    <div className=\"whitespace-pre-wrap text-sm text-gray-100\">\n                      {message.content}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-2\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex justify-start\"\n              >\n                <div className=\"bg-[hsl(0,0%,10%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-r-lg rounded-tl-lg p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-[hsl(267,100%,67%)] rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">AI is analyzing...</span>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Suggested Actions */}\n          <div className=\"px-6 py-3 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex flex-wrap gap-2 mb-3\">\n              {suggestedActions.slice(0, 4).map((action, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                  onClick={() => handleSuggestedAction(action)}\n                  className=\"text-xs bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 hover:border-[hsl(330,100%,50%)]/40 text-gray-300 hover:text-white px-3 py-1 rounded-full transition-all\"\n                >\n                  {action}\n                </motion.button>\n              ))}\n            </div>\n          </div>\n\n          {/* Input Area */}\n          <div className=\"p-6 border-t border-[hsl(330,100%,50%)]/20\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex-1 relative\">\n                <Input\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  placeholder=\"Ask the AI for more details...\"\n                  className=\"bg-[hsl(0,0%,10%)]/60 border-[hsl(330,100%,50%)]/20 text-white placeholder:text-gray-400 pr-20\"\n                />\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Mic className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                    <Paperclip className=\"w-4 h-4 text-gray-400\" />\n                  </Button>\n                </div>\n              </div>\n              <Button \n                onClick={handleSendMessage}\n                className=\"bg-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,60%)] text-white\"\n                size=\"icon\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Right Panel - Alert Details */}\n        <motion.div \n          initial={{ x: 50, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-1/2 overflow-y-auto\"\n        >\n          <div className=\"p-6 space-y-6\">\n            {/* Alert Header */}\n            <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-400\" />\n                  <h2 className=\"text-xl font-bold text-white\">Suspicious Network Traffic Detected</h2>\n                </div>\n                <Button variant=\"outline\" className=\"border-green-500/20 text-green-400\">\n                  Bulk Auto-Triage\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                <div>\n                  <span className=\"text-xs text-gray-400\">Risk Score:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(330,100%,50%)]\">{alertData.riskScore}%</span>\n                    <Progress value={alertData.riskScore} className=\"flex-1\" />\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-xs text-gray-400\">AI Confidence:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xl font-bold text-[hsl(267,100%,67%)]\">{alertData.aiConfidence}%</span>\n                    <Progress value={alertData.aiConfidence} className=\"flex-1\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-400\">Alert ID:</span>\n                  <div className=\"text-white font-mono\">{alertData.alertId}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Detected:</span>\n                  <div className=\"text-white\">{alertData.detected}</div>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">Last Updated:</span>\n                  <div className=\"text-white\">{alertData.lastUpdated}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex space-x-2\">\n                  <Badge className={getSeverityColor(alertData.severity)}>\n                    {alertData.severity}\n                  </Badge>\n                  <Badge className={getStatusColor(alertData.status)}>\n                    {alertData.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                  <User className=\"w-4 h-4\" />\n                  <span>{alertData.assignedAnalyst}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Alert Summary */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400\">Source IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.sourceIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination IP:</span>\n                    <div className=\"text-white font-mono\">{alertData.destinationIp}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Destination Port:</span>\n                    <div className=\"text-white\">{alertData.destinationPort}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Protocol:</span>\n                    <div className=\"text-white\">{alertData.protocol}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Detected By:</span>\n                    <div className=\"text-white\">{alertData.detectedBy}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Action Taken:</span>\n                    <div className=\"text-white\">{alertData.actionTaken}</div>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <span className=\"text-gray-400\">Geo-Location:</span>\n                    <div className=\"text-white\">{alertData.geoLocation}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Impacted Entities */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Impacted Entities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {impactedEntities.map((entity, index) => {\n                    const Icon = entity.icon;\n                    return (\n                      <div key={index} className=\"flex items-center space-x-3 p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                        <Icon className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                        <div className=\"flex-1\">\n                          <div className=\"text-white font-medium\">{entity.name}</div>\n                          <div className=\"text-xs text-gray-400\">{entity.identifier}</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Indicators of Compromise */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Indicators of Compromise (IOCs)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {indicators.map((ioc) => (\n                    <div key={ioc.id} className=\"flex items-center justify-between p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant=\"outline\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                          {ioc.type}\n                        </Badge>\n                        <span className=\"text-white font-mono text-sm\">{ioc.value}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={ioc.confidence === 'High' ? 'bg-red-500/20 text-red-400' : 'bg-yellow-500/20 text-yellow-400'}>\n                          {ioc.confidence}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23444},"NewFrontend/alpha-platform/client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ngsap.registerPlugin(ScrollTrigger);\nimport { ArrowLeft, Settings, Bell, User, Shield, AlertTriangle, CheckCircle, Search, Filter, BarChart3, Activity, Eye, Clock, TrendingUp, Target, Zap, Brain, Calendar, MessageSquare, Download, Moon, Sun, PieChart, LineChart, TrendingDown, Bot, Lightbulb, FileText, RefreshCw, ArrowRight, PlayCircle, PauseCircle, UserCheck, X, ThumbsUp, ThumbsDown, Workflow, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { ThreatVisualization } from \"@/components/ui/threat-visualization\";\n\ntype AlertSeverity = \"Critical\" | \"High\" | \"Medium\" | \"Low\";\ntype AlertStatus = \"Active\" | \"Investigating\" | \"Resolved\";\n\ninterface Alert {\n  id: string;\n  severity: AlertSeverity;\n  status: AlertStatus;\n  title: string;\n  assignedAnalyst: string;\n  time: string;\n  source: string;\n  confidence: number;\n  aiRecommendation: string;\n  rootCause?: string;\n}\n\ninterface ModelResponse {\n  id: string;\n  timestamp: string;\n  prediction: string;\n  confidence: number;\n  recommendation: string;\n  status: \"Processing\" | \"Complete\" | \"Failed\";\n  explainability: string;\n}\n\ninterface AIInsight {\n  type: \"trend\" | \"anomaly\" | \"prediction\" | \"correlation\";\n  title: string;\n  description: string;\n  confidence: number;\n  impact: \"High\" | \"Medium\" | \"Low\";\n}\n\ninterface WorkflowAlert {\n  id: string;\n  vendorName: string;\n  timestamp: string;\n  severity: AlertSeverity;\n  status: \"incoming\" | \"processing\" | \"predicted\" | \"completed\";\n  stage: \"vendor\" | \"ai_model\" | \"prediction\" | \"outcome\";\n  aiModel?: string;\n  confidence?: number;\n  processingTime?: number;\n  outcome?: \"TP\" | \"FP\" | \"Escalate\";\n  explanation?: string;\n  escalationReason?: string;\n  assignedAnalyst?: string;\n}\n\ninterface EscalationItem {\n  alertId: string;\n  reason: string;\n  assignedAnalyst: string;\n  timestamp: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n}\n\ninterface AutomationMetrics {\n  tpHandled: number;\n  fpDismissed: number;\n  totalProcessed: number;\n  avgProcessingTime: number;\n  confidence: {\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nconst mockAlerts: Alert[] = [\n  { \n    id: \"ALT-2024-001\", \n    severity: \"Critical\", \n    status: \"Active\", \n    title: \"Suspicious Network Traffic Detected\", \n    assignedAnalyst: \"Sarah Chen\", \n    time: \"2 min ago\", \n    source: \"NGFW\", \n    confidence: 95,\n    aiRecommendation: \"Immediate isolation of affected endpoints and traffic analysis\",\n    rootCause: \"Potential APT group activity based on TTP correlation\"\n  },\n  { \n    id: \"ALT-2024-002\", \n    severity: \"High\", \n    status: \"Investigating\", \n    title: \"Potential Data Exfiltration\", \n    assignedAnalyst: \"Marcus Johnson\", \n    time: \"15 min ago\", \n    source: \"AWS CloudTrail\", \n    confidence: 87,\n    aiRecommendation: \"Monitor data flows and check for unauthorized access patterns\",\n    rootCause: \"Compromised service account credentials detected\"\n  },\n  { \n    id: \"ALT-2024-003\", \n    severity: \"Medium\", \n    status: \"Active\", \n    title: \"Unauthorized Access Attempt\", \n    assignedAnalyst: \"AI Auto-Triage\", \n    time: \"32 min ago\", \n    source: \"Okta\", \n    confidence: 78,\n    aiRecommendation: \"Enable additional MFA verification and user behavior analysis\",\n    rootCause: \"Credential stuffing attack from known botnet infrastructure\"\n  },\n];\n\nconst mockModelResponses: ModelResponse[] = [\n  { \n    id: \"MR-001\", \n    timestamp: \"09:45:23\", \n    prediction: \"DDoS Attack Pattern\", \n    confidence: 94, \n    recommendation: \"Activate DDoS protection and rate limiting\", \n    status: \"Complete\",\n    explainability: \"Model detected anomalous traffic patterns matching known DDoS signatures. Key indicators: 300% traffic spike, unusual geographic distribution, repetitive request patterns.\"\n  },\n  { \n    id: \"MR-002\", \n    timestamp: \"09:43:12\", \n    prediction: \"Phishing Campaign\", \n    confidence: 89, \n    recommendation: \"Block sender domains and notify users\", \n    status: \"Complete\",\n    explainability: \"Email content analysis revealed suspicious URL patterns and social engineering tactics commonly used in phishing campaigns.\"\n  },\n];\n\nconst mockAIInsights: AIInsight[] = [\n  {\n    type: \"trend\",\n    title: \"Alert Volume Increasing\",\n    description: \"Critical alerts have increased by 23% over the past 48 hours, primarily from network security sources.\",\n    confidence: 87,\n    impact: \"High\"\n  },\n  {\n    type: \"prediction\",\n    title: \"Forecasted Peak Activity\",\n    description: \"AI predicts a 40% increase in security incidents during the next 7 days based on threat intelligence patterns.\",\n    confidence: 82,\n    impact: \"Medium\"\n  },\n  {\n    type: \"correlation\",\n    title: \"Geographic Correlation Detected\",\n    description: \"85% of high-severity alerts originate from similar geographic regions, suggesting coordinated threat activity.\",\n    confidence: 91,\n    impact: \"High\"\n  },\n  {\n    type: \"anomaly\",\n    title: \"Unusual User Behavior\",\n    description: \"Detected anomalous login patterns for 12 users outside normal business hours with geographic inconsistencies.\",\n    confidence: 76,\n    impact: \"Medium\"\n  }\n];\n\nconst mockWorkflowAlerts: WorkflowAlert[] = [\n  {\n    id: \"WF-001\",\n    vendorName: \"CrowdStrike\",\n    timestamp: \"10:45:23\",\n    severity: \"Critical\",\n    status: \"processing\",\n    stage: \"ai_model\",\n    aiModel: \"ThreatDetector v2.1\",\n    confidence: 94,\n    processingTime: 1.2\n  },\n  {\n    id: \"WF-002\", \n    vendorName: \"Splunk\",\n    timestamp: \"10:44:15\",\n    severity: \"High\",\n    status: \"completed\",\n    stage: \"outcome\",\n    outcome: \"TP\",\n    confidence: 89,\n    processingTime: 2.1,\n    explanation: \"Suspicious network traffic pattern matching known APT indicators\"\n  },\n  {\n    id: \"WF-003\",\n    vendorName: \"Microsoft Sentinel\",\n    timestamp: \"10:43:47\",\n    severity: \"Medium\",\n    status: \"completed\",\n    stage: \"outcome\", \n    outcome: \"FP\",\n    confidence: 76,\n    processingTime: 1.8,\n    explanation: \"Benign administrative activity misclassified due to timing correlation\"\n  },\n  {\n    id: \"WF-004\",\n    vendorName: \"Palo Alto\",\n    timestamp: \"10:42:33\",\n    severity: \"High\",\n    status: \"completed\",\n    stage: \"outcome\",\n    outcome: \"Escalate\",\n    escalationReason: \"Low confidence score requires human analysis\",\n    assignedAnalyst: \"Sarah Chen\",\n    confidence: 67,\n    processingTime: 3.4\n  },\n  {\n    id: \"WF-005\",\n    vendorName: \"AWS GuardDuty\", \n    timestamp: \"10:45:55\",\n    severity: \"Low\",\n    status: \"incoming\",\n    stage: \"vendor\"\n  }\n];\n\nconst mockEscalationQueue: EscalationItem[] = [\n  {\n    alertId: \"WF-004\",\n    reason: \"Low confidence score requires human analysis\",\n    assignedAnalyst: \"Sarah Chen\",\n    timestamp: \"10:42:33\",\n    status: \"pending\"\n  },\n  {\n    alertId: \"WF-007\",\n    reason: \"Potential zero-day exploit detected\",\n    assignedAnalyst: \"Marcus Johnson\",\n    timestamp: \"10:38:12\",\n    status: \"approved\"\n  },\n  {\n    alertId: \"WF-012\",\n    reason: \"Anomalous behavior pattern outside training data\",\n    assignedAnalyst: \"Lisa Wang\",\n    timestamp: \"10:35:44\",\n    status: \"pending\"\n  }\n];\n\nconst mockAutomationMetrics: AutomationMetrics = {\n  tpHandled: 847,\n  fpDismissed: 1203,\n  totalProcessed: 2156,\n  avgProcessingTime: 2.3,\n  confidence: {\n    high: 67,\n    medium: 28,\n    low: 5\n  }\n};\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [selectedAlert, setSelectedAlert] = useState<Alert | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [nlQuery, setNlQuery] = useState(\"\");\n  const [showWhatIf, setShowWhatIf] = useState(false);\n  const [selectedWorkflowAlert, setSelectedWorkflowAlert] = useState<WorkflowAlert | null>(null);\n  const [showEscalationModal, setShowEscalationModal] = useState(false);\n  const [escalationDecision, setEscalationDecision] = useState<\"approve\" | \"reject\" | \"assign\" | null>(null);\n  const [workflowAlerts, setWorkflowAlerts] = useState<WorkflowAlert[]>(mockWorkflowAlerts);\n  const [showLogoutOverlay, setShowLogoutOverlay] = useState(false);\n  \n  // GSAP refs\n  const headerRef = useRef<HTMLElement>(null);\n  const sidebarRef = useRef<HTMLElement>(null);\n  const mainRef = useRef<HTMLElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Dashboard entrance animations\n      gsap.fromTo(headerRef.current,\n        { y: -50, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.6, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(sidebarRef.current,\n        { x: -250, opacity: 0 },\n        { x: 0, opacity: 1, duration: 0.6, delay: 0.2, ease: \"power3.out\" }\n      );\n\n      gsap.fromTo(mainRef.current,\n        { opacity: 0, y: 20 },\n        { opacity: 1, y: 0, duration: 0.6, delay: 0.4, ease: \"power2.out\" }\n      );\n\n      // Stats cards animation\n      if (statsRef.current) {\n        gsap.fromTo(statsRef.current.children,\n          { scale: 0.9, opacity: 0 },\n          { scale: 1, opacity: 1, duration: 0.5, stagger: 0.1, delay: 0.6, ease: \"back.out(1.7)\" }\n        );\n      }\n    });\n\n    return () => ctx.revert();\n  }, [activeTab]);\n\n  // Simulate real-time workflow updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWorkflowAlerts(current => \n        current.map(alert => {\n          if (alert.status === \"incoming\" && Math.random() > 0.7) {\n            return { ...alert, status: \"processing\", stage: \"ai_model\", aiModel: \"ThreatDetector v2.1\" };\n          }\n          if (alert.status === \"processing\" && Math.random() > 0.8) {\n            const outcomes: Array<\"TP\" | \"FP\" | \"Escalate\"> = [\"TP\", \"FP\", \"Escalate\"];\n            const outcome = outcomes[Math.floor(Math.random() * outcomes.length)];\n            return { \n              ...alert, \n              status: \"completed\", \n              stage: \"outcome\", \n              outcome,\n              confidence: Math.floor(Math.random() * 40) + 60,\n              processingTime: Math.random() * 3 + 1\n            };\n          }\n          return alert;\n        })\n      );\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle logout with redirect\n  useEffect(() => {\n    if (showLogoutOverlay) {\n      const timer = setTimeout(() => {\n        setLocation(\"/\");\n      }, 2500);\n\n      return () => clearTimeout(timer);\n    }\n  }, [showLogoutOverlay, setLocation]);\n\n  const getSeverityColor = (severity: AlertSeverity) => {\n    switch (severity) {\n      case \"Critical\": return \"text-red-400 bg-red-400/10 border-red-400/20\";\n      case \"High\": return \"text-orange-400 bg-orange-400/10 border-orange-400/20\";\n      case \"Medium\": return \"text-yellow-400 bg-yellow-400/10 border-yellow-400/20\";\n      case \"Low\": return \"text-green-400 bg-green-400/10 border-green-400/20\";\n    }\n  };\n\n  const getStatusColor = (status: AlertStatus) => {\n    switch (status) {\n      case \"Active\": return \"text-red-400 bg-red-400/10\";\n      case \"Investigating\": return \"text-yellow-400 bg-yellow-400/10\";\n      case \"Resolved\": return \"text-green-400 bg-green-400/10\";\n    }\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"trend\": return <TrendingUp className=\"w-4 h-4\" />;\n      case \"prediction\": return <Brain className=\"w-4 h-4\" />;\n      case \"correlation\": return <Target className=\"w-4 h-4\" />;\n      case \"anomaly\": return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredAlerts = mockAlerts.filter(alert => \n    alert.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    alert.id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Enhanced Top Navigation Bar */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n            <span className=\"text-lg text-gray-300\">Command Center</span>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Actions */}\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n\n            {/* Dark/Light Mode Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\"\n            >\n              {isDarkMode ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n            </Button>\n\n            {/* System Status */}\n            <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-400\">AI Models Online</span>\n            </div>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center\">3</span>\n            </Button>\n\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"flex\">\n        {/* Enhanced Sidebar Navigation */}\n        <motion.aside \n          initial={{ x: -250, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"w-64 bg-[hsl(0,0%,8%)] border-r border-[hsl(330,100%,50%)]/20 min-h-screen\"\n        >\n          <div className=\"p-4 space-y-2\">\n            <nav className=\"space-y-2\">\n              <button\n                onClick={() => setActiveTab(\"dashboard\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"dashboard\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Dashboard</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"alerts\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"alerts\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alerts</span>\n                <span className=\"ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full\">\n                  {mockAlerts.filter(a => a.status === \"Active\").length}\n                </span>\n              </button>\n\n              <button\n                onClick={() => setLocation(\"/investigation\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"investigations\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Eye className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Investigations</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"models\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"models\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Brain className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Model Responses</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"analytics\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"analytics\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <PieChart className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Analytics</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"workflow\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"workflow\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Workflow className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Alert Pipeline</span>\n              </button>\n\n              <button\n                onClick={() => setActiveTab(\"settings\")}\n                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all ${\n                  activeTab === \"settings\" \n                    ? \"text-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/10 nav-item-active\" \n                    : \"text-gray-300 hover:text-[hsl(330,100%,50%)] nav-item-hover\"\n                }`}\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Settings</span>\n              </button>\n\n              {/* Logout Button */}\n              <button\n                onClick={() => setShowLogoutOverlay(true)}\n                className=\"w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all text-red-400 hover:text-red-300 hover:bg-red-400/10\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Logout</span>\n              </button>\n            </nav>\n\n            {/* Data Quality Indicator */}\n            <div className=\"mt-8 p-3 bg-[hsl(0,0%,6%)] rounded-lg border border-[hsl(330,100%,50%)]/10\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-gray-400\">Data Quality</span>\n                <span className=\"text-xs text-[hsl(330,100%,50%)]\">96.8%</span>\n              </div>\n              <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[96.8%]\"></div>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full mt-2 text-xs text-gray-400 hover:text-[hsl(330,100%,50%)]\">\n                <RefreshCw className=\"w-3 h-3 mr-1\" />\n                Auto-clean data\n              </Button>\n            </div>\n          </div>\n        </motion.aside>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 p-6 bg-gradient-to-br from-[hsl(215,28%,5%)] to-[hsl(215,28%,7%)]\">\n          {activeTab === \"dashboard\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">AI-Powered Analytics Dashboard</h1>\n\n                {/* Natural Language Query */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <MessageSquare className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-[hsl(330,100%,50%)]\" />\n                    <Input \n                      placeholder=\"Ask me anything about your data...\"\n                      value={nlQuery}\n                      onChange={(e) => setNlQuery(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20 w-80\"\n                    />\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setLocation(\"/ai-assistant\")}\n                    className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n                  >\n                    <MessageSquare className=\"w-4 h-4 mr-2\" />\n                    Ask AI\n                  </Button>\n                </div>\n              </div>\n\n\n                <ThreatVisualization/>\n\n              {/* SOC Operations Center */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold flex items-center glow-text\">\n                    <Shield className=\"w-6 h-6 text-[hsl(330,100%,50%)] mr-2\" />\n                    SOC Operations Center\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">Live Monitoring</span>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Real-time Threat Landscape */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Target className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                      Global Threat Intelligence\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-red-400\">127</div>\n                          <div className=\"text-xs text-gray-400\">Active Campaigns</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-orange-400\">2.8K</div>\n                          <div className=\"text-xs text-gray-400\">IOCs Tracked</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">94.2%</div>\n                          <div className=\"text-xs text-gray-400\">Detection Rate</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">APT Groups</span>\n                          <span className=\"text-red-400 font-medium\">23 Active</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Malware Families</span>\n                          <span className=\"text-orange-400 font-medium\">156 Tracked</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-gray-300\">Zero-Days</span>\n                          <span className=\"text-yellow-400 font-medium\">4 Monitored</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Incident Response Metrics */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Activity className=\"w-5 h-5 text-green-400 mr-2\" />\n                      Incident Response KPIs\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Detection (MTTD)</span>\n                        <span className=\"text-green-400 font-bold\">2.3 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-green-400 h-2 rounded-full w-[92%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Response (MTTR)</span>\n                        <span className=\"text-[hsl(330,100%,50%)] font-bold\">8.7 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-[85%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-300\">Mean Time to Containment (MTTC)</span>\n                        <span className=\"text-[hsl(267,100%,67%)] font-bold\">18.4 min</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-[hsl(267,100%,67%)] h-2 rounded-full w-[78%]\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Threat Hunting Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-xl font-semibold mb-6 flex items-center glow-text\">\n                  <Eye className=\"w-6 h-6 text-[hsl(267,100%,67%)] mr-2\" />\n                  Advanced Threat Hunting & Analysis\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {/* MITRE ATT&CK Coverage */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">MITRE ATT&CK Coverage</h4>\n                    <div className=\"text-center mb-4\">\n                      <div className=\"text-3xl font-bold text-[hsl(330,100%,50%)]\">78%</div>\n                      <div className=\"text-xs text-gray-400\">Techniques Covered</div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {['Initial Access', 'Execution', 'Persistence', 'Privilege Escalation', 'Defense Evasion'].map((tactic, i) => (\n                        <div key={i} className=\"flex items-center justify-between text-xs\">\n                          <span className=\"text-gray-400\">{tactic}</span>\n                          <span className=\"text-[hsl(330,100%,50%)]\">{Math.floor(Math.random() * 30) + 70}%</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Behavioral Analytics */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(267,100%,67%)]/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Behavioral Analytics</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">User Anomalies</span>\n                        <span className=\"text-orange-400 font-medium\">12</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">Entity Deviations</span>\n                        <span className=\"text-yellow-400 font-medium\">47</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400\">Process Anomalies</span>\n                        <span className=\"text-red-400 font-medium\">8</span>\n                      </div>\n                      <div className=\"mt-3 p-2 bg-[hsl(267,100%,67%)]/10 rounded border border-[hsl(267,100%,67%)]/20\">\n                        <div className=\"text-xs text-[hsl(267,100%,67%)] font-medium\">AI Confidence: 94.2%</div>\n                        <div className=\"text-xs text-gray-400\">Baseline accuracy improving</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Threat Attribution */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-green-400/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Threat Attribution</h4>\n                    <div className=\"space-y-2\">\n                      {[\n                        { actor: 'APT29', confidence: 87, attacks: 3 },\n                        { actor: 'Lazarus', confidence: 74, attacks: 2 },\n                        { actor: 'FIN7', confidence: 92, attacks: 1 },\n                        { actor: 'Unknown', confidence: 45, attacks: 8 }\n                      ].map((threat, i) => (\n                        <div key={i} className=\"p-2 bg-[hsl(0,0%,4%)]/60 rounded\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-xs font-medium text-white\">{threat.actor}</span>\n                            <span className=\"text-xs text-[hsl(330,100%,50%)]\">{threat.attacks} attacks</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex-1 bg-gray-700 rounded-full h-1\">\n                              <div \n                                className=\"bg-green-400 h-1 rounded-full\"\n                                style={{ width: `${threat.confidence}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-green-400\">{threat.confidence}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Hunt Results */}\n                  <div className=\"bg-[hsl(0,0%,6%)]/60 border border-orange-400/10 rounded-lg p-4\">\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Active Hunt Results</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-center mb-3\">\n                        <div className=\"text-2xl font-bold text-orange-400\">23</div>\n                        <div className=\"text-xs text-gray-400\">Active Hunts</div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {[\n                          { name: 'Living off the Land', findings: 7, status: 'active' },\n                          { name: 'Lateral Movement', findings: 3, status: 'investigating' },\n                          { name: 'Data Staging', findings: 12, status: 'completed' }\n                        ].map((hunt, i) => (\n                          <div key={i} className=\"p-2 bg-[hsl(0,0%,4%)]/60 rounded\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <span className=\"text-xs font-medium text-white\">{hunt.name}</span>\n                              <span className={`px-1 py-0.5 rounded text-xs ${\n                                hunt.status === 'active' ? 'bg-green-400/10 text-green-400' :\n                                hunt.status === 'investigating' ? 'bg-yellow-400/10 text-yellow-400' :\n                                'bg-gray-400/10 text-gray-400'\n                              }`}>\n                                {hunt.status}\n                              </span>\n                            </div>\n                            <div className=\"text-xs text-orange-400\">{hunt.findings} findings</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* AI-Generated Insights Panel */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.3 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center\">\n                    <Lightbulb className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    AI-Generated Security Insights\n                  </h3>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)]\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {mockAIInsights.map((insight, index) => (\n                    <motion.div \n                      key={index}\n                      initial={{ x: -20, opacity: 0 }}\n                      animate={{ x: 0, opacity: 1 }}\n                      transition={{ duration: 0.4, delay: 0.4 + index * 0.1 }}\n                      className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/10 rounded-lg p-4 hover:border-[hsl(330,100%,50%)]/20 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getInsightIcon(insight.type)}\n                          <span className=\"text-sm font-medium\">{insight.title}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`px-2 py-1 rounded-full text-xs ${\n                            insight.impact === 'High' ? 'bg-red-400/10 text-red-400' :\n                            insight.impact === 'Medium' ? 'bg-yellow-400/10 text-yellow-400' :\n                            'bg-green-400/10 text-green-400'\n                          }`}>\n                            {insight.impact}\n                          </span>\n                          <span className=\"text-xs text-[hsl(330,100%,50%)]\">{insight.confidence}%</span>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-gray-300\">{insight.description}</p>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n\n              {/* Key Metrics with AI Suggestions */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.1 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">22.1K</div>\n                      <div className=\"text-sm text-gray-400\">Active Endpoints</div>\n                    </div>\n                    <Shield className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center justify-between\">\n                    <div className=\"flex-1 bg-gray-700 rounded-full h-2 mr-2\">\n                      <div className=\"bg-[hsl(330,100%,50%)] h-2 rounded-full w-4/5\"></div>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">98.2%</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Suggestion: Monitor 3 offline endpoints\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.2 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-orange-400/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-orange-400\">1,406</div>\n                      <div className=\"text-sm text-gray-400\">Active Alerts</div>\n                    </div>\n                    <AlertTriangle className=\"w-8 h-8 text-orange-400\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center space-x-2\">\n                    <TrendingUp className=\"w-4 h-4 text-red-400\" />\n                    <span className=\"text-xs text-red-400\">+23% (48h trend)</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Prediction: Peak expected in 6 hours\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.3 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(267,100%,67%)]/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">87%</div>\n                      <div className=\"text-sm text-gray-400\">AI Auto-Triage</div>\n                    </div>\n                    <Bot className=\"w-8 h-8 text-[hsl(267,100%,67%)]\" />\n                  </div>\n                  <div className=\"mt-4 text-xs text-green-400\">\n                    Model Accuracy: 94.2%\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Insight: False positive rate decreased\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  initial={{ scale: 0.9, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 0.4 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-green-400/20 rounded-xl p-6 stats-card-hover\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-400\">2.3s</div>\n                      <div className=\"text-sm text-gray-400\">Avg Response Time</div>\n                    </div>\n                    <Clock className=\"w-8 h-8 text-green-400\" />\n                  </div>\n                  <div className=\"mt-4 flex items-center space-x-2\">\n                    <TrendingDown className=\"w-4 h-4 text-green-400\" />\n                    <span className=\"text-xs text-green-400\">-15% improvement</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Optimization: 40% faster processing\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Interactive Charts Section */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* AI-Suggested Chart: Alert Trends */}\n                <motion.div \n                  initial={{ x: -50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.5 }}\n                  className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">Alert Trends & Forecasting</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs text-[hsl(267,100%,67%)] bg-[hsl(267,100%,67%)]/10 px-2 py-1 rounded\">\n                        AI Recommended\n                      </span>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)]\">\n                        <LineChart className=\"w-4 h-4 mr-2\" />\n                        Switch View\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"h-64 flex items-end space-x-2\">\n                    {Array.from({ length: 24 }, (_, i) => {\n                      const height = Math.random() * 80 + 20;\n                      const isPrediction = i > 16;\n                      return (\n                        <div key={i} className=\"flex-1 flex flex-col items-center\">\n                          <div \n                            className={`w-full rounded-sm ${\n                              isPrediction \n                                ? 'bg-gradient-to-t from-[hsl(267,100%,67%)]/40 to-[hsl(267,100%,67%)]/60 border-dashed border-t-2 border-[hsl(267,100%,67%)]' \n                                : 'bg-gradient-to-t from-[hsl(330,100%,50%)]/60 to-[hsl(267,100%,67%)]/60'\n                            }`}\n                            style={{ height: `${height}%` }}\n                          ></div>\n                          <span className=\"text-xs text-gray-400 mt-1\">{String(i).padStart(2, '0')}</span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"mt-4 flex items-center justify-between text-xs text-gray-400\">\n                    <span>Historical Data</span>\n                    <span className=\"text-[hsl(267,100%,67%)]\">AI Forecast (Next 7 hours)</span>\n                  </div>\n                </motion.div>\n\n                {/* Dynamic Risk Heatmap */}\n                <motion.div \n                  initial={{ x: 50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.6 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-4\">Real-time Risk Heatmap</h3>\n                  <div className=\"grid grid-cols-8 gap-1 h-48\">\n                    {Array.from({ length: 64 }, (_, i) => {\n                      const intensity = Math.random();\n                      return (\n                        <motion.div \n                          key={i}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: 0.7 + i * 0.01 }}\n                          className=\"rounded-sm cursor-pointer hover:scale-110 transition-transform\"\n                          style={{\n                            backgroundColor: intensity > 0.7 ? '#ef4444' : \n                                           intensity > 0.4 ? '#f97316' : \n                                           intensity > 0.2 ? '#eab308' : '#22c55e',\n                            opacity: 0.3 + intensity * 0.7\n                          }}\n                          title={`Risk Level: ${Math.round(intensity * 100)}%`}\n                        ></motion.div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"flex justify-between mt-4 text-xs text-gray-400\">\n                    <span>Low Risk</span>\n                    <span>High Risk</span>\n                  </div>\n                  <div className=\"mt-2 text-xs text-[hsl(267,100%,67%)]\">\n                    AI Detected: 3 high-risk zones require attention\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === \"analytics\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">AI-Powered Analytics Command Center</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n                    <div className=\"w-2 h-2 bg-[hsl(330,100%,50%)] rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">AI Models Active</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    Neural Network Status\n                  </Button>\n                </div>\n              </div>\n\n              {/* Advanced AI Model Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.1 }}\n                className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\"\n              >\n                {/* AI Processing Center */}\n                <div className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Zap className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    Neural Processing Matrix\n                  </h3>\n                  \n                  {/* Real-time Processing Visualization */}\n                  <div className=\"relative h-64 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 overflow-hidden mb-4\">\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"relative\">\n                        {/* Central AI Core */}\n                        <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center animate-pulse\">\n                          <Brain className=\"w-10 h-10 text-white\" />\n                        </div>\n                        \n                        {/* Orbiting Processing Nodes */}\n                        {Array.from({ length: 8 }).map((_, i) => (\n                          <motion.div\n                            key={i}\n                            className=\"absolute w-3 h-3 bg-[hsl(330,100%,50%)] rounded-full\"\n                            style={{\n                              top: '50%',\n                              left: '50%',\n                              transformOrigin: `${60 + Math.cos(i * Math.PI / 4) * 20}px ${Math.sin(i * Math.PI / 4) * 20}px`,\n                            }}\n                            animate={{\n                              rotate: 360,\n                            }}\n                            transition={{\n                              duration: 4 + (i * 0.5),\n                              repeat: Infinity,\n                              ease: \"linear\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Data Stream Visualization */}\n                    <div className=\"absolute top-4 left-4 right-4\">\n                      <div className=\"grid grid-cols-12 gap-1 h-2\">\n                        {Array.from({ length: 48 }).map((_, i) => (\n                          <motion.div\n                            key={i}\n                            className=\"bg-[hsl(330,100%,50%)] rounded-full h-1\"\n                            animate={{\n                              opacity: [0.2, 1, 0.2],\n                              scaleY: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 2,\n                              delay: i * 0.1,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Processing Statistics */}\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">2.3M</div>\n                      <div className=\"text-xs text-gray-400\">Events/Hour</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">847ms</div>\n                      <div className=\"text-xs text-gray-400\">Avg Latency</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\">99.7%</div>\n                      <div className=\"text-xs text-gray-400\">Accuracy</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Model Performance Metrics */}\n                <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Target className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Model Performance\n                  </h3>\n                  \n                  <div className=\"space-y-4\">\n                    {/* Threat Detection Model */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Threat Detection</span>\n                        <span className=\"text-[hsl(330,100%,50%)] text-xs\">Active</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full w-[94%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">94%</span>\n                      </div>\n                    </div>\n\n                    {/* Anomaly Detection Model */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Anomaly Detection</span>\n                        <span className=\"text-green-400 text-xs\">Optimal</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-green-400 h-2 rounded-full w-[97%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">97%</span>\n                      </div>\n                    </div>\n\n                    {/* Behavioral Analysis */}\n                    <div className=\"p-3 bg-[hsl(0,0%,6%)]/60 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Behavioral Analysis</span>\n                        <span className=\"text-yellow-400 text-xs\">Training</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-yellow-400 h-2 rounded-full w-[89%]\"></div>\n                        </div>\n                        <span className=\"text-xs text-gray-300\">89%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Real-time Predictions */}\n                <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Eye className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                    Live Predictions\n                  </h3>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-red-400/10 border border-red-400/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-red-400\">Critical Alert Expected</span>\n                        <span className=\"text-xs text-red-400\">92% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Next 18 minutes</div>\n                    </div>\n\n                    <div className=\"p-3 bg-orange-400/10 border border-orange-400/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-orange-400\">Traffic Spike</span>\n                        <span className=\"text-xs text-orange-400\">78% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Next 2.5 hours</div>\n                    </div>\n\n                    <div className=\"p-3 bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-[hsl(267,100%,67%)]\">System Optimization</span>\n                        <span className=\"text-xs text-[hsl(267,100%,67%)]\">85% confidence</span>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">Recommended now</div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Threat Intelligence Dashboard */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold flex items-center\">\n                    <Activity className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Advanced Threat Intelligence Matrix\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh Intel\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\"\n                      onClick={() => setShowWhatIf(!showWhatIf)}\n                    >\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Scenario Analysis\n                    </Button>\n                  </div>\n                </div>\n\n                {showWhatIf && (\n                  <motion.div \n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: \"auto\", opacity: 1 }}\n                    transition={{ duration: 0.4 }}\n                    className=\"mb-6 p-6 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10\"\n                  >\n                    <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Target className=\"w-4 h-4 text-[hsl(267,100%,67%)] mr-2\" />\n                      AI-Powered Scenario Simulation\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">Threat Volume Multiplier</label>\n                        <Input \n                          type=\"range\" \n                          min=\"0.5\" \n                          max=\"5\" \n                          step=\"0.1\"\n                          defaultValue=\"1.0\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>0.5x</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 1.0x</span>\n                          <span>5.0x</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">Response Efficiency</label>\n                        <Input \n                          type=\"range\" \n                          min=\"50\" \n                          max=\"100\" \n                          defaultValue=\"87\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>50%</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 87%</span>\n                          <span>100%</span>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <label className=\"text-sm font-medium text-gray-300\">AI Automation Level</label>\n                        <Input \n                          type=\"range\" \n                          min=\"0\" \n                          max=\"100\" \n                          defaultValue=\"73\" \n                          className=\"w-full accent-[hsl(330,100%,50%)]\"\n                        />\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>0%</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">Current: 73%</span>\n                          <span>100%</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* AI Prediction Results */}\n                    <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"p-4 bg-[hsl(267,100%,67%)]/10 rounded border border-[hsl(267,100%,67%)]/20\">\n                        <div className=\"flex items-center mb-2\">\n                          <Brain className=\"w-4 h-4 text-[hsl(267,100%,67%)] mr-2\" />\n                          <span className=\"text-sm font-medium text-[hsl(267,100%,67%)]\">AI Prediction</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300\">\n                          With current settings: <span className=\"text-[hsl(330,100%,50%)]\">94% efficiency</span> expected, \n                          handling <span className=\"text-green-400\">2.3k alerts/hour</span> with <span className=\"text-yellow-400\">1.8s avg response</span>\n                        </p>\n                      </div>\n                      \n                      <div className=\"p-4 bg-[hsl(330,100%,50%)]/10 rounded border border-[hsl(330,100%,50%)]/20\">\n                        <div className=\"flex items-center mb-2\">\n                          <AlertTriangle className=\"w-4 h-4 text-[hsl(330,100%,50%)] mr-2\" />\n                          <span className=\"text-sm font-medium text-[hsl(330,100%,50%)]\">Risk Assessment</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300\">\n                          Risk level: <span className=\"text-green-400\">Low</span> | \n                          False positive rate: <span className=\"text-yellow-400\">12%</span> | \n                          Coverage: <span className=\"text-[hsl(330,100%,50%)]\">98.7%</span>\n                        </p>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Threat Intelligence Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Geographic Threat Distribution</h4>\n                    <div className=\"relative h-32 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 overflow-hidden\">\n                      {/* Simplified world map visualization */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"relative w-24 h-16 opacity-30\">\n                          {/* Threat hotspots */}\n                          {[\n                            { x: '20%', y: '30%', intensity: 'high' },\n                            { x: '60%', y: '40%', intensity: 'medium' },\n                            { x: '80%', y: '60%', intensity: 'critical' },\n                            { x: '15%', y: '70%', intensity: 'low' }\n                          ].map((spot, i) => (\n                            <motion.div\n                              key={i}\n                              className={`absolute w-3 h-3 rounded-full ${\n                                spot.intensity === 'critical' ? 'bg-red-400' :\n                                spot.intensity === 'high' ? 'bg-orange-400' :\n                                spot.intensity === 'medium' ? 'bg-yellow-400' : 'bg-green-400'\n                              }`}\n                              style={{ left: spot.x, top: spot.y }}\n                              animate={{\n                                scale: [1, 1.5, 1],\n                                opacity: [0.6, 1, 0.6]\n                              }}\n                              transition={{\n                                duration: 2,\n                                delay: i * 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-xs space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Asia-Pacific:</span>\n                        <span className=\"text-red-400\">High Risk</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Europe:</span>\n                        <span className=\"text-yellow-400\">Medium Risk</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Americas:</span>\n                        <span className=\"text-green-400\">Low Risk</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Attack Vector Analysis</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        { vector: 'Phishing', percentage: 34, trend: 'up' },\n                        { vector: 'Malware', percentage: 28, trend: 'down' },\n                        { vector: 'Ransomware', percentage: 19, trend: 'up' },\n                        { vector: 'DDoS', percentage: 19, trend: 'stable' }\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-xs text-gray-300\">{item.vector}</span>\n                            {item.trend === 'up' && <TrendingUp className=\"w-3 h-3 text-red-400\" />}\n                            {item.trend === 'down' && <TrendingDown className=\"w-3 h-3 text-green-400\" />}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-16 bg-gray-700 rounded-full h-1\">\n                              <div \n                                className=\"bg-[hsl(330,100%,50%)] h-1 rounded-full\"\n                                style={{ width: `${item.percentage}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-[hsl(330,100%,50%)] font-medium w-8\">{item.percentage}%</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">AI Model Confidence</h4>\n                    <div className=\"relative h-32\">\n                      {/* Confidence meter visualization */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"relative w-20 h-20\">\n                          <motion.div\n                            className=\"w-full h-full rounded-full border-4 border-gray-700\"\n                            style={{\n                              background: `conic-gradient(from 0deg, hsl(330,100%,50%) 0%, hsl(267,100%,67%) ${94 * 3.6}deg, hsl(0,0%,20%) ${94 * 3.6}deg)`\n                            }}\n                          />\n                          <div className=\"absolute inset-2 bg-[hsl(0,0%,8%)] rounded-full flex items-center justify-center\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold text-[hsl(330,100%,50%)]\">94%</div>\n                              <div className=\"text-xs text-gray-400\">Confidence</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-xs space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Model Accuracy:</span>\n                        <span className=\"text-green-400\">Excellent</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Data Quality:</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">96.8%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-sm font-semibold text-gray-300\">Predictive Alerts</h4>\n                    <div className=\"space-y-2\">\n                      {[\n                        { type: 'Infrastructure Anomaly', time: '12 min', confidence: 87, severity: 'medium' },\n                        { type: 'Credential Compromise', time: '28 min', confidence: 92, severity: 'high' },\n                        { type: 'Data Exfiltration Risk', time: '1.2 hr', confidence: 78, severity: 'critical' }\n                      ].map((alert, i) => (\n                        <div key={i} className={`p-2 rounded-lg border ${\n                          alert.severity === 'critical' ? 'bg-red-400/10 border-red-400/20' :\n                          alert.severity === 'high' ? 'bg-orange-400/10 border-orange-400/20' :\n                          'bg-yellow-400/10 border-yellow-400/20'\n                        }`}>\n                          <div className=\"text-xs font-medium\">{alert.type}</div>\n                          <div className=\"flex justify-between items-center mt-1\">\n                            <span className=\"text-xs text-gray-400\">in {alert.time}</span>\n                            <span className={`text-xs ${\n                              alert.severity === 'critical' ? 'text-red-400' :\n                              alert.severity === 'high' ? 'text-orange-400' :\n                              'text-yellow-400'\n                            }`}>\n                              {alert.confidence}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Advanced Analytics Tools */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.3 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-lg font-semibold mb-6 flex items-center\">\n                  <Workflow className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                  Advanced Analytics & Automation Suite\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {/* Custom Query Builder */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/30 transition-colors\">\n                    <MessageSquare className=\"w-8 h-8 text-[hsl(330,100%,50%)] mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Natural Language Queries</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Ask complex security questions in plain English</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-[hsl(330,100%,50%)]/20\">\n                      Launch Query Builder\n                    </Button>\n                  </div>\n\n                  {/* Machine Learning Insights */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-[hsl(267,100%,67%)]/10 hover:border-[hsl(267,100%,67%)]/30 transition-colors\">\n                    <Brain className=\"w-8 h-8 text-[hsl(267,100%,67%)] mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">ML Pattern Recognition</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Discover hidden patterns in your security data</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-[hsl(267,100%,67%)]/20\">\n                      Analyze Patterns\n                    </Button>\n                  </div>\n\n                  {/* Automated Response Orchestration */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-green-400/10 hover:border-green-400/30 transition-colors\">\n                    <Zap className=\"w-8 h-8 text-green-400 mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Response Orchestration</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Automate complex incident response workflows</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-green-400/20\">\n                      Configure Workflows\n                    </Button>\n                  </div>\n\n                  {/* Advanced Report Generation */}\n                  <div className=\"p-4 bg-[hsl(0,0%,6%)]/60 rounded-lg border border-orange-400/10 hover:border-orange-400/30 transition-colors\">\n                    <FileText className=\"w-8 h-8 text-orange-400 mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Executive Reporting</h4>\n                    <p className=\"text-sm text-gray-400 mb-3\">Generate C-suite ready security reports instantly</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full border-orange-400/20\">\n                      Generate Report\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {activeTab === \"alerts\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">Smart Alert Management</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <Input \n                      placeholder=\"Search alerts...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/20\"\n                    />\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    AI Filter\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n                    <Bot className=\"w-4 h-4 mr-2\" />\n                    Bulk Auto-Triage\n                  </Button>\n                </div>\n              </div>\n\n              {/* Enhanced Alerts Table */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl overflow-hidden\"\n              >\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-[hsl(0,0%,6%)] border-b border-[hsl(330,100%,50%)]/20\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Alert ID</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Title</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Severity</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Status</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Assigned Analyst</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">AI Recommendation</th>\n                        <th className=\"text-left p-4 text-sm font-semibold text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredAlerts.map((alert, index) => (\n                        <motion.tr \n                          key={alert.id}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          className=\"border-b border-[hsl(330,100%,50%)]/10 hover:bg-[hsl(0,0%,6%)]/50 transition-colors\"\n                        >\n                          <td className=\"p-4 text-sm font-mono text-[hsl(330,100%,50%)]\">{alert.id}</td>\n                          <td className=\"p-4 text-sm\">{alert.title}</td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(alert.severity)}`}>\n                              {alert.severity}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(alert.status)}`}>\n                              {alert.status}\n                            </span>\n                          </td>\n                          <td className=\"p-4 text-sm text-gray-300\">{alert.assignedAnalyst}</td>\n                          <td className=\"p-4 text-sm text-[hsl(267,100%,67%)] max-w-xs truncate\">\n                            {alert.aiRecommendation}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => setSelectedAlert(alert)}\n                                className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-[hsl(267,100%,67%)] hover:bg-[hsl(267,100%,67%)]/20\"\n                              >\n                                <Bot className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </motion.tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n\n          {activeTab === \"models\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <h1 className=\"text-3xl font-bold glow-text\">AI Model Responses & Explainability</h1>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {mockModelResponses.map((response, index) => (\n                  <motion.div \n                    key={response.id}\n                    initial={{ y: 20, opacity: 0 }}\n                    animate={{ y: 0, opacity: 1 }}\n                    transition={{ duration: 0.6, delay: index * 0.2 }}\n                    className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Brain className=\"w-5 h-5 text-[hsl(267,100%,67%)]\" />\n                        <span className=\"font-mono text-sm text-[hsl(330,100%,50%)]\">{response.id}</span>\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        response.status === 'Complete' ? 'bg-green-400/10 text-green-400' :\n                        response.status === 'Processing' ? 'bg-yellow-400/10 text-yellow-400' :\n                        'bg-red-400/10 text-red-400'\n                      }`}>\n                        {response.status}\n                      </span>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Prediction:</span>\n                        <p className=\"text-white font-medium\">{response.prediction}</p>\n                      </div>\n\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Confidence Score:</span>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                            <div \n                              className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full transition-all duration-1000\"\n                              style={{ width: `${response.confidence}%` }}\n                            ></div>\n                          </div>\n                          <span className=\"text-sm text-[hsl(330,100%,50%)] font-medium\">{response.confidence}%</span>\n                        </div>\n                      </div>\n\n                      <div>\n                        <span className=\"text-xs text-gray-400\">Recommendation:</span>\n                        <p className=\"text-gray-300 text-sm\">{response.recommendation}</p>\n                      </div>\n\n                      {/* XAI Explainability Section */}\n                      <div className=\"border-t border-gray-700 pt-4\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Lightbulb className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                          <span className=\"text-xs text-gray-400\">AI Explanation (XAI):</span>\n                        </div>\n                        <p className=\"text-sm text-gray-300 bg-[hsl(0,0%,6%)]/60 p-3 rounded border border-[hsl(330,100%,50%)]/10\">\n                          {response.explainability}\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-xs text-gray-400 pt-2\">\n                        <span>Timestamp: {response.timestamp}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\">\n                          <FileText className=\"w-3 h-3 mr-1\" />\n                          Export Analysis\n                        </Button>\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n\n          {activeTab === \"workflow\" && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-3xl font-bold glow-text\">Alert Processing Pipeline</h1>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 bg-[hsl(0,0%,10%)]/50 rounded-lg px-3 py-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm text-gray-400\">Pipeline Active</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh Pipeline\n                  </Button>\n                </div>\n              </div>\n\n              {/* Real-Time Alert Stream & Workflow */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                {/* Left Sidebar - Incoming Alerts Stream */}\n                <motion.div \n                  initial={{ x: -50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.1 }}\n                  className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Activity className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                    Live Alert Stream\n                  </h3>\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {workflowAlerts.slice(0, 8).map((alert, index) => (\n                      <motion.div \n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.4, delay: index * 0.1 }}\n                        className={`p-3 rounded-lg border cursor-pointer transition-all hover:scale-105 ${\n                          selectedWorkflowAlert?.id === alert.id \n                            ? 'bg-[hsl(330,100%,50%)]/20 border-[hsl(330,100%,50%)]/40' \n                            : 'bg-[hsl(0,0%,6%)]/60 border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/20'\n                        }`}\n                        onClick={() => setSelectedWorkflowAlert(alert)}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-xs font-mono text-[hsl(330,100%,50%)]\">{alert.id}</span>\n                          <span className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(alert.severity)}`}>\n                            {alert.severity}\n                          </span>\n                        </div>\n                        <div className=\"text-sm text-gray-300 mb-1\">{alert.vendorName}</div>\n                        <div className=\"text-xs text-gray-400\">{alert.timestamp}</div>\n                        <div className=\"flex items-center mt-2\">\n                          <div className={`w-2 h-2 rounded-full mr-2 ${\n                            alert.status === 'incoming' ? 'bg-blue-400' :\n                            alert.status === 'processing' ? 'bg-purple-400 animate-pulse' :\n                            'bg-green-400'\n                          }`}></div>\n                          <span className=\"text-xs text-gray-400 capitalize\">{alert.status}</span>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </motion.div>\n\n                {/* Center - Workflow Pipeline Visualization */}\n                <motion.div \n                  initial={{ y: 20, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.2 }}\n                  className=\"lg:col-span-2 bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n                >\n                  <h3 className=\"text-lg font-semibold mb-6\">Processing Pipeline</h3>\n\n                  {/* Pipeline Stages */}\n                  <div className=\"relative\">\n                    <div className=\"flex items-center justify-between mb-8\">\n                      {/* Vendor Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center mb-2 relative\">\n                          <Shield className=\"w-8 h-8 text-white\" />\n                          {selectedWorkflowAlert?.stage === 'vendor' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-blue-400 rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className=\"text-sm font-medium text-blue-400\">Vendor</span>\n                        <span className=\"text-xs text-gray-400\">Detection</span>\n                      </motion.div>\n\n                      {/* Animated Connector */}\n                      <div className=\"flex-1 mx-4 relative\">\n                        <div className=\"h-1 bg-gray-600 rounded-full\">\n                          <motion.div \n                            className=\"h-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\"\n                            animate={{ width: selectedWorkflowAlert?.stage !== 'vendor' ? '100%' : '0%' }}\n                            transition={{ duration: 0.8 }}\n                          />\n                        </div>\n                        <ArrowRight className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      </div>\n\n                      {/* AI Model Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center mb-2 relative\">\n                          <Brain className=\"w-8 h-8 text-white\" />\n                          {selectedWorkflowAlert?.stage === 'ai_model' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-purple-400 rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className=\"text-sm font-medium text-purple-400\">AI Model</span>\n                        <span className=\"text-xs text-gray-400\">Analysis</span>\n                      </motion.div>\n\n                      {/* Animated Connector */}\n                      <div className=\"flex-1 mx-4 relative\">\n                        <div className=\"h-1 bg-gray-600 rounded-full\">\n                          <motion.div \n                            className=\"h-1 bg-gradient-to-r from-purple-500 to-green-500 rounded-full\"\n                            animate={{ width: selectedWorkflowAlert?.stage === 'outcome' ? '100%' : '0%' }}\n                            transition={{ duration: 0.8 }}\n                          />\n                        </div>\n                        <ArrowRight className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                      </div>\n\n                      {/* Outcome Stage */}\n                      <motion.div \n                        className=\"flex flex-col items-center\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className={`w-16 h-16 rounded-full flex items-center justify-center mb-2 relative ${\n                          selectedWorkflowAlert?.outcome === 'TP' ? 'bg-gradient-to-r from-green-500 to-green-600' :\n                          selectedWorkflowAlert?.outcome === 'FP' ? 'bg-gradient-to-r from-orange-500 to-orange-600' :\n                          selectedWorkflowAlert?.outcome === 'Escalate' ? 'bg-gradient-to-r from-red-500 to-red-600' :\n                          'bg-gradient-to-r from-gray-500 to-gray-600'\n                        }`}>\n                          {selectedWorkflowAlert?.outcome === 'TP' && <CheckCircle className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.outcome === 'FP' && <X className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.outcome === 'Escalate' && <AlertTriangle className=\"w-8 h-8 text-white\" />}\n                          {!selectedWorkflowAlert?.outcome && <Target className=\"w-8 h-8 text-white\" />}\n                          {selectedWorkflowAlert?.stage === 'outcome' && (\n                            <motion.div\n                              className=\"absolute inset-0 border-2 border-white rounded-full\"\n                              animate={{ scale: [1, 1.2, 1] }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            />\n                          )}\n                        </div>\n                        <span className={`text-sm font-medium ${\n                          selectedWorkflowAlert?.outcome === 'TP' ? 'text-green-400' :\n                          selectedWorkflowAlert?.outcome === 'FP' ? 'text-orange-400' :\n                          selectedWorkflowAlert?.outcome === 'Escalate' ? 'text-red-400' :\n                          'text-gray-400'\n                        }`}>\n                          {selectedWorkflowAlert?.outcome || 'Outcome'}\n                        </span>\n                        <span className=\"text-xs text-gray-400\">Decision</span>\n                      </motion.div>\n                    </div>\n\n                    {/* Alert Details Panel */}\n                    {selectedWorkflowAlert && (\n                      <motion.div \n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg p-4\"\n                      >\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"text-xs text-gray-400\">Alert ID:</span>\n                            <p className=\"text-sm font-mono text-[hsl(330,100%,50%)]\">{selectedWorkflowAlert.id}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-xs text-gray-400\">Vendor:</span>\n                            <p className=\"text-sm text-white\">{selectedWorkflowAlert.vendorName}</p>\n                          </div>\n                          {selectedWorkflowAlert.aiModel && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">AI Model:</span>\n                              <p className=\"text-sm text-purple-400\">{selectedWorkflowAlert.aiModel}</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.confidence && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Confidence:</span>\n                              <p className=\"text-sm text-[hsl(330,100%,50%)]\">{selectedWorkflowAlert.confidence}%</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.processingTime && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Processing Time:</span>\n                              <p className=\"text-sm text-gray-300\">{selectedWorkflowAlert.processingTime.toFixed(1)}s</p>\n                            </div>\n                          )}\n                          {selectedWorkflowAlert.outcome && (\n                            <div>\n                              <span className=\"text-xs text-gray-400\">Final Outcome:</span>\n                              <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${\n                                selectedWorkflowAlert.outcome === 'TP' ? 'bg-green-400/10 text-green-400' :\n                                selectedWorkflowAlert.outcome === 'FP' ? 'bg-orange-400/10 text-orange-400' :\n                                'bg-red-400/10 text-red-400'\n                              }`}>\n                                {selectedWorkflowAlert.outcome === 'TP' ? 'True Positive' :\n                                 selectedWorkflowAlert.outcome === 'FP' ? 'False Positive' :\n                                 'Escalated'}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n\n                        {selectedWorkflowAlert.explanation && (\n                          <div className=\"mt-4 border-t border-gray-700 pt-3\">\n                            <span className=\"text-xs text-gray-400\">AI Explanation:</span>\n                            <p className=\"text-sm text-gray-300 mt-1\">{selectedWorkflowAlert.explanation}</p>\n                          </div>\n                        )}\n\n                        {selectedWorkflowAlert.outcome === 'Escalate' && (\n                          <div className=\"mt-4 flex space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-green-400/20 text-green-400 hover:bg-green-400/10\"\n                              onClick={() => setShowEscalationModal(true)}\n                            >\n                              <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                              Approve\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-red-400/20 text-red-400 hover:bg-red-400/10\"\n                            >\n                              <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                              Reject\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\"\n                            >\n                              <UserCheck className=\"w-4 h-4 mr-2\" />\n                              Assign\n                            </Button>\n                          </div>\n                        )}\n                      </motion.div>\n                    )}\n                  </div>\n                </motion.div>\n\n                {/* Right Sidebar - Automation Metrics & Escalation Queue */}\n                <motion.div \n                  initial={{ x: 50, opacity: 0 }}\n                  animate={{ x: 0, opacity: 1 }}\n                  transition={{ duration: 0.6, delay: 0.3 }}\n                  className=\"space-y-6\"\n                >\n                  {/* Automation Metrics */}\n                  <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Bot className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                      Automation Status\n                    </h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">TP Handled</span>\n                        <span className=\"text-green-400 font-medium\">{mockAutomationMetrics.tpHandled}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">FP Dismissed</span>\n                        <span className=\"text-orange-400 font-medium\">{mockAutomationMetrics.fpDismissed}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-400\">Avg Processing</span>\n                        <span className=\"text-[hsl(330,100%,50%)] font-medium\">{mockAutomationMetrics.avgProcessingTime}s</span>\n                      </div>\n\n                      <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                        <span className=\"text-sm text-gray-400 mb-2 block\">Confidence Distribution</span>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-400\">High (&gt;80%)</span>\n                            <span className=\"text-green-400 text-xs\">{mockAutomationMetrics.confidence.high}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                            <div className=\"bg-green-400 h-2 rounded-full\" style={{ width: `${mockAutomationMetrics.confidence.high}%` }}></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Escalation Queue */}\n                  <div className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-400 mr-2\" />\n                      Escalation Queue\n                    </h3>\n                    <div className=\"space-y-3 max-h-48 overflow-y-auto\">\n                      {mockEscalationQueue.map((item, index) => (\n                        <motion.div \n                          key={item.alertId}\n                          initial={{ opacity: 0, x: 20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ duration: 0.4, delay: index * 0.1 }}\n                          className=\"p-3 bg-[hsl(0,0%,6%)]/60 border border-red-400/20 rounded-lg\"\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-xs font-mono text-[hsl(330,100%,50%)]\">{item.alertId}</span>\n                            <span className={`px-2 py-1 rounded-full text-xs ${\n                              item.status === 'pending' ? 'bg-yellow-400/10 text-yellow-400' :\n                              item.status === 'approved' ? 'bg-green-400/10 text-green-400' :\n                              'bg-red-400/10 text-red-400'\n                            }`}>\n                              {item.status}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-gray-300 mb-1\">{item.reason}</p>\n                          <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                            <span>{item.assignedAnalyst}</span>\n                            <span>{item.timestamp}</span>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* AI & Analyst Metrics Panel */}\n              <motion.div \n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ duration: 0.6, delay: 0.4 }}\n                className=\"bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl p-6\"\n              >\n                <h3 className=\"text-lg font-semibold mb-6\">Pipeline Performance Analytics</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Outcome Distribution */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Outcome Distribution</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-green-400\">True Positives</span>\n                        <span className=\"text-green-400 font-medium\">42%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-green-400 h-2 rounded-full w-[42%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-orange-400\">False Positives</span>\n                        <span className=\"text-orange-400 font-medium\">31%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-orange-400 h-2 rounded-full w-[31%]\"></div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-red-400\">Escalated</span>\n                        <span className=\"text-red-400 font-medium\">27%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                        <div className=\"bg-red-400 h-2 rounded-full w-[27%]\"></div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Processing Time Comparison */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Avg Handling Time</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-lg p-3\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm text-[hsl(267,100%,67%)]\">Automated</span>\n                          <span className=\"text-[hsl(267,100%,67%)] font-medium\">2.3s</span>\n                        </div>\n                        <div className=\"text-xs text-gray-400\">AI Processing</div>\n                      </div>\n\n                      <div className=\"bg-[hsl(330,100%,50%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-lg p-3\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-sm text-[hsl(330,100%,50%)]\">Manual</span>\n                          <span className=\"text-[hsl(330,100%,50%)] font-medium\">18.7m</span>\n                        </div>\n                        <div className=\"text-xs text-gray-400\">Analyst Review</div>\n                      </div>\n\n                      <div className=\"text-xs text-gray-400 text-center\">\n                        87% faster with AI automation\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Vendor Performance */}\n                  <div>\n                    <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Top Alert Sources</h4>\n                    <div className=\"space-y-2\">\n                      {['CrowdStrike', 'Splunk', 'Microsoft Sentinel', 'Palo Alto', 'AWS GuardDuty'].map((vendor, index) => (\n                        <div key={vendor} className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-300\">{vendor}</span>\n                          <span className=\"text-xs text-[hsl(330,100%,50%)]\">{Math.floor(Math.random() * 200) + 50}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          )}\n        </main>\n      </div>\n\n      {/* Enhanced Alert Detail Modal with Root Cause Analysis */}\n      {selectedAlert && (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n          onClick={() => setSelectedAlert(null)}\n        >\n          <motion.div \n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20 rounded-xl p-6 max-w-4xl w-full max-h-[80vh] overflow-y-auto\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-bold glow-text\">Alert Investigation Center</h2>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setSelectedAlert(null)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                ✕\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Alert ID:</span>\n                    <p className=\"text-[hsl(330,100%,50%)] font-mono\">{selectedAlert.id}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Source:</span>\n                    <p className=\"text-white\">{selectedAlert.source}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <span className=\"text-sm text-gray-400\">Title:</span>\n                  <p className=\"text-white font-medium\">{selectedAlert.title}</p>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Severity:</span>\n                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium border mt-1 ${getSeverityColor(selectedAlert.severity)}`}>\n                      {selectedAlert.severity}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Status:</span>\n                    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium mt-1 ${getStatusColor(selectedAlert.status)}`}>\n                      {selectedAlert.status}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-sm text-gray-400\">Confidence:</span>\n                    <p className=\"text-[hsl(330,100%,50%)] font-medium\">{selectedAlert.confidence}%</p>\n                  </div>\n                </div>\n\n                <div>\n                  <span className=\"text-sm text-gray-400\">Assigned Analyst:</span>\n                  <p className=\"text-white\">{selectedAlert.assignedAnalyst}</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* AI Root Cause Analysis */}\n                <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(267,100%,67%)]/20 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Brain className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                    <span className=\"text-sm font-semibold text-[hsl(267,100%,67%)]\">AI Root Cause Analysis</span>\n                  </div>\n                  <p className=\"text-sm text-gray-300\">{selectedAlert.rootCause}</p>\n                </div>\n\n                {/* AI Recommendation */}\n                <div className=\"bg-[hsl(0,0%,6%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Lightbulb className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n                    <span className=\"text-sm font-semibold text-[hsl(330,100%,50%)]\">AI Recommendation</span>\n                  </div>\n                  <p className=\"text-sm text-gray-300\">{selectedAlert.aiRecommendation}</p>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Isolate\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n                    <Bot className=\"w-4 h-4 mr-2\" />\n                    Auto-Remediate\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n\n      {/* Modal for Escalation Decision */}\n      {showEscalationModal && (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"fixed inset-0 bg-black/70 backdrop-blur-lg z-50 flex items-center justify-center p-4\"\n          onClick={() => setShowEscalationModal(false)}\n        >\n          <motion.div \n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-[hsl(0,0%,8%)] border border-[hsl(330,100%,50%)]/20 rounded-xl p-8 max-w-2xl w-full\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <h3 className=\"text-xl font-bold mb-6 text-center glow-text\">Escalation Action</h3>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-300 text-center\">Choose an action for the escalated alert.</p>\n              <div className=\"flex justify-center space-x-4 mt-6\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-green-400/20 text-green-400 hover:bg-green-400/10\"\n                  onClick={() => { setEscalationDecision(\"approve\"); setShowEscalationModal(false); }}\n                >\n                  <ThumbsUp className=\"w-4 h-4 mr-2\" />\n                  Approve & Assign\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"border-red-400/20 text-red-400 hover:bg-red-400/10\"\n                  onClick={() => { setEscalationDecision(\"reject\"); setShowEscalationModal(false); }}\n                >\n                  <ThumbsDown className=\"w-4 h-4 mr-2\" />\n                  Reject\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n\n      {/* Logout Overlay */}\n      <AnimatePresence>\n        {showLogoutOverlay && (\n          <motion.div \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-md z-[9999] flex items-center justify-center\"\n            style={{\n              background: \"linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(51,0,51,0.4) 50%, rgba(0,0,0,0.8) 100%)\"\n            }}\n          >\n            <motion.div \n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              className=\"text-center\"\n            >\n              <motion.h1 \n                initial={{ y: 20 }}\n                animate={{ y: 0 }}\n                className=\"text-6xl font-bold mb-4 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] bg-clip-text text-transparent\"\n                style={{\n                  textShadow: \"0 0 30px rgba(255,20,147,0.5), 0 0 60px rgba(138,43,226,0.3)\"\n                }}\n              >\n                See You Soon!\n              </motion.h1>\n              \n              <motion.div \n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.3 }}\n                className=\"flex items-center justify-center space-x-2 mb-6\"\n              >\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-6 h-6 border-2 border-[hsl(330,100%,50%)] border-t-transparent rounded-full\"\n                />\n                <span className=\"text-gray-300\">Logging out securely...</span>\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: [0, 1, 0] }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n                className=\"text-[hsl(267,100%,67%)] text-lg\"\n              >\n                ✨ Thank you for using Alpha Platform ✨\n              </motion.div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":119549},"NewFrontend/alpha-platform/client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/sections/header\";\nimport Hero from \"@/components/sections/hero\";\nimport TrustedBy from \"@/components/sections/trusted-by\";\nimport DashboardShowcase from \"@/components/sections/dashboard-showcase\";\nimport Integrations from \"@/components/sections/integrations\";\nimport Testimonials from \"@/components/sections/testimonials\";\nimport FAQ from \"@/components/sections/faq\";\nimport Footer from \"@/components/sections/footer\";\nimport DemoRequestDialog from \"@/components/demo-request-dialog\";\nimport LoginDialog from \"@/components/login-dialog\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [showDemoDialog, setShowDemoDialog] = useState(false);\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(220,15%,5%)] text-white\">\n      <DemoRequestDialog open={showDemoDialog} onOpenChange={setShowDemoDialog} />\n      <LoginDialog open={showLoginDialog} onOpenChange={setShowLoginDialog} />\n      <Header onRequestDemo={() => setShowDemoDialog(true)} />\n      <Hero onRequestDemo={() => setShowDemoDialog(true)} />\n      <TrustedBy />\n      <DashboardShowcase />\n      <div className=\"py-20 px-6 relative\">\n        {/* If your .gradient-glow uses old colors, consider updating it to a pink/navy glow */}\n        <div className=\"absolute inset-0 gradient-glow\"></div>\n        <div className=\"container mx-auto text-center relative z-10\">\n          <button\n            onClick={() => setShowDemoDialog(true)}\n            className=\"bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] text-white px-8 py-4 rounded-lg font-semibold text-lg glow-button animate-pulse-glow hover:opacity-90\"\n          >\n            Request a Demo\n          </button>\n        </div>\n      </div>\n      <Integrations />\n      <Testimonials />\n      <FAQ />\n      <Footer />\n    </div>\n  );\n}","size_bytes":2022},"NewFrontend/alpha-platform/client/src/pages/investigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Shield, Brain, AlertTriangle, CheckCircle, Clock, Eye, Download, RefreshCw, Activity, Users, Server, Network, FileText, Target, Zap, TrendingUp, BarChart3, Settings, Bell, User, Search, Filter, Calendar, MessageSquare, ExternalLink, ChevronDown, ChevronRight, Play, Pause } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { ThreatVisualization } from \"@/components/ui/threat-visualization\";\nimport InvestigationKnowledgeGraph from \"@/components/ui/investigation-knowledge-graph\";\n\ninterface TimelineEvent {\n  id: string;\n  timestamp: string;\n  type: \"detection\" | \"analysis\" | \"investigation\" | \"containment\" | \"closed\";\n  status: \"completed\" | \"in_progress\" | \"pending\";\n  title: string;\n  description: string;\n  user?: string;\n}\n\ninterface KnowledgeNode {\n  id: string;\n  type: \"asset\" | \"user\" | \"ip\" | \"process\";\n  label: string;\n  x: number;\n  y: number;\n  connections: string[];\n  risk: \"high\" | \"medium\" | \"low\";\n}\n\nexport default function Investigation() {\n  const [, setLocation] = useLocation();\n  const [selectedTimelineEvent, setSelectedTimelineEvent] = useState<string | null>(null);\n  const [knowledgeGraphExpanded, setKnowledgeGraphExpanded] = useState(false);\n  const [animationNodes, setAnimationNodes] = useState<{ id: string; x: number; y: number }[]>([]);\n\n  const timelineEvents: TimelineEvent[] = [\n    {\n      id: \"1\",\n      timestamp: \"2024-01-15 09:15:23\",\n      type: \"detection\",\n      status: \"completed\",\n      title: \"Alert Raised\",\n      description: \"SLA compliance: On Track\",\n      user: \"System\"\n    },\n    {\n      id: \"2\", \n      timestamp: \"2024-01-15 09:16:45\",\n      type: \"analysis\",\n      status: \"completed\",\n      title: \"Acknowledged\",\n      description: \"Analyst review initiated\",\n      user: \"John Doe\"\n    },\n    {\n      id: \"3\",\n      timestamp: \"2024-01-15 09:25:12\",\n      type: \"investigation\",\n      status: \"in_progress\",\n      title: \"Investigation Completed\",\n      description: \"Threat analysis in progress\",\n      user: \"Sarah Chen\"\n    },\n    {\n      id: \"4\",\n      timestamp: \"2024-01-15 10:30:00\",\n      type: \"containment\",\n      status: \"pending\",\n      title: \"Contained\",\n      description: \"Mitigation actions pending\",\n      user: \"Marcus Johnson\"\n    },\n    {\n      id: \"5\",\n      timestamp: \"2024-01-15 11:00:00\",\n      type: \"closed\",\n      status: \"pending\",\n      title: \"Closed\",\n      description: \"Resolution pending\",\n      user: \"AI System\"\n    }\n  ];\n\n  const knowledgeNodes: KnowledgeNode[] = [\n    { id: \"host-a\", type: \"asset\", label: \"Host A\", x: 150, y: 100, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"user-1\", type: \"user\", label: \"User Account\", x: 300, y: 80, connections: [\"host-a\", \"ip-1\"], risk: \"medium\" },\n    { id: \"ip-1\", type: \"ip\", label: \"192.168.1.50\", x: 450, y: 120, connections: [\"user-1\", \"process-1\"], risk: \"high\" },\n    { id: \"process-1\", type: \"process\", label: \"malware.exe\", x: 300, y: 200, connections: [\"host-a\", \"ip-1\"], risk: \"high\" },\n  ];\n\n  // Animate knowledge graph nodes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAnimationNodes(prev => \n        knowledgeNodes.map(node => ({\n          id: node.id,\n          x: node.x + Math.sin(Date.now() / 1000 + node.id.length) * 3,\n          y: node.y + Math.cos(Date.now() / 1000 + node.id.length) * 3,\n        }))\n      );\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTimelineIcon = (type: string, status: string) => {\n    const iconClass = status === 'completed' ? 'text-green-400' : status === 'in_progress' ? 'text-yellow-400' : 'text-gray-400';\n\n    switch (type) {\n      case 'detection': return <AlertTriangle className={`w-4 h-4 ${iconClass}`} />;\n      case 'analysis': return <Brain className={`w-4 h-4 ${iconClass}`} />;\n      case 'investigation': return <Eye className={`w-4 h-4 ${iconClass}`} />;\n      case 'containment': return <Shield className={`w-4 h-4 ${iconClass}`} />;\n      case 'closed': return <CheckCircle className={`w-4 h-4 ${iconClass}`} />;\n      default: return <Clock className={`w-4 h-4 ${iconClass}`} />;\n    }\n  };\n\n  const getNodeColor = (type: string, risk: string) => {\n    const riskColors = {\n      high: '#ef4444',\n      medium: '#f97316', \n      low: '#22c55e'\n    };\n    return riskColors[risk as keyof typeof riskColors];\n  };\n\n  const getNodeIcon = (type: string) => {\n    switch (type) {\n      case 'asset': return <Server className=\"w-4 h-4\" />;\n      case 'user': return <Users className=\"w-4 h-4\" />;\n      case 'ip': return <Network className=\"w-4 h-4\" />;\n      case 'process': return <Activity className=\"w-4 h-4\" />;\n      default: return <Target className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(215,28%,5%)] text-white font-['Inter']\">\n      {/* Header */}\n      <motion.header \n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.6 }}\n        className=\"bg-[hsl(215,28%,5%)]/95 backdrop-blur-sm border-b border-[hsl(330,100%,50%)]/20 px-6 py-4 sticky top-0 z-50\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-3xl glow-button\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-colors\">\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-5 h-5 text-gray-300\" />\n              <div className=\"text-sm\">\n                <div className=\"text-white\">Sarah Chen</div>\n                <div className=\"text-xs text-gray-400\">Senior Analyst</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Alert Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-red-400 mb-2\">Critical Malware Alert: Host A</h1>\n              <p className=\"text-gray-300\">Alert ID: CMA-2024-26-001 • Severity: CRITICAL • Jan 15, 2024, 13:15 AM UTC</p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Acknowledge\n              </Button>\n              <Button variant=\"outline\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Resolve\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Left Column - Risk Assessment Cards */}\n          <motion.div \n            initial={{ x: -50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n            className=\"space-y-6\"\n          >\n            {/* Rule-based Risk */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300\">Rule-based Risk</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(330,100%,50%)] mb-1\">92</div>\n                  <div className=\"text-xs text-gray-400\">out of 100</div>\n                </div>\n                <Progress value={92} className=\"mb-4\" />\n                <div className=\"space-y-2 text-xs\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Key Risk Factors:</span>\n                  </div>\n                  <div className=\"text-green-400\">• Critical asset involved</div>\n                  <div className=\"text-yellow-400\">• Known Vulnerability (Exposed)</div>\n                  <div className=\"text-red-400\">• High level of Anomaly</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* ML Prediction Details */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(267,100%,67%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Brain className=\"w-4 h-4 mr-2 text-[hsl(267,100%,67%)]\" />\n                  ML Prediction Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl font-bold text-[hsl(267,100%,67%)] mb-1\">98%</div>\n                  <div className=\"text-xs text-gray-400\">Confidence</div>\n                </div>\n                <div className=\"space-y-3 text-xs\">\n                  <div>\n                    <div className=\"text-gray-400 mb-1\">Top Contributing Features:</div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Anomaly Score</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">65%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Behavior Deviation</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">78%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Threat Intelligence Match</span>\n                        <span className=\"text-[hsl(330,100%,50%)]\">85%</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Recommendation */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-orange-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2 text-orange-400\" />\n                  AI Recommendation Based on Intent\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center text-red-400 font-bold text-lg mb-3\">\n                  Limit User Access\n                </div>\n                <p className=\"text-xs text-gray-300\">\n                  This action is recommended to mitigate the impact of the attack.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Related Alerts */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm text-gray-300 flex items-center\">\n                  <Target className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Related Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)] mb-1\">4</div>\n                  <div className=\"text-xs text-gray-400\">Similar incidents</div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Center Column - Deep Knowledge Graph */}\n          <motion.div \n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"lg:col-span-2\"\n          >\n            <InvestigationKnowledgeGraph />\n          </motion.div>\n\n          {/* Right Column - Timeline & Actions */}\n          <motion.div \n            initial={{ x: 50, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n            className=\"space-y-6\"\n          >\n            {/* Timeline */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Cybersecurity Alert Lifecycle Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {timelineEvents.map((event, index) => (\n                    <motion.div \n                      key={event.id}\n                      initial={{ x: 20, opacity: 0 }}\n                      animate={{ x: 0, opacity: 1 }}\n                      transition={{ duration: 0.4, delay: index * 0.1 }}\n                      className=\"flex items-start space-x-3\"\n                    >\n                      <div className=\"flex flex-col items-center\">\n                        <div className={`p-2 rounded-full border-2 ${\n                          event.status === 'completed' ? 'bg-green-400/20 border-green-400' :\n                          event.status === 'in_progress' ? 'bg-yellow-400/20 border-yellow-400' :\n                          'bg-gray-400/20 border-gray-400'\n                        }`}>\n                          {getTimelineIcon(event.type, event.status)}\n                        </div>\n                        {index < timelineEvents.length - 1 && (\n                          <div className=\"w-0.5 h-12 bg-gray-600 mt-2\"></div>\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"text-sm font-medium text-white\">{event.title}</h4>\n                          <Badge variant=\"outline\" className={\n                            event.status === 'completed' ? 'border-green-400/20 text-green-400' :\n                            event.status === 'in_progress' ? 'border-yellow-400/20 text-yellow-400' :\n                            'border-gray-400/20 text-gray-400'\n                          }>\n                            {event.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-400 mb-1\">{event.description}</p>\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>{event.timestamp}</span>\n                          {event.user && <span>by {event.user}</span>}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 pt-4 border-t border-gray-700\">\n                  <div className=\"flex justify-between text-xs text-gray-400 mb-2\">\n                    <span>Time Elapsed: 00:01:15</span>\n                    <span>Completion: 60%</span>\n                  </div>\n                  <Progress value={60} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-white\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Event Timeline\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\">\n                    <Server className=\"w-4 h-4 mr-2\" />\n                    Affected Assets\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-orange-500/20 text-orange-400 hover:bg-orange-500/10\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Remediation\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Bottom Section - Detailed Findings */}\n        <motion.div\n          initial={{ y: 50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n        >\n          {/* Alert Summary */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Alert Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-300 mb-4\">\n                A sophisticated malware attack was detected targeting a critical production server (Host A). The attack involved an exploit of a known vulnerability leading to lateral movement within the DMZ network and potential compromise of a user account. The system identified outbound connections to a known Command and Control (C2) server.\n              </p>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Key Findings:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• Host A (192.168.1.50) compromised via zero-day exploit.</div>\n                    <div>• Malware established C2 communications.</div>\n                    <div>• Potential lateral movement to internal networks.</div>\n                    <div>• User account 'john.doe' showed suspicious login activity.</div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-sm font-semibold text-white mb-2\">Recommended Actions:</h4>\n                  <div className=\"space-y-1 text-sm text-gray-300 ml-4\">\n                    <div>• Immediate isolation of Host A and affected network segments.</div>\n                    <div>• Forensic analysis on Host A to identify initial compromise vector.</div>\n                    <div>• Force password reset for 'john.doe' and review access logs.</div>\n                    <div>• Update IDS/IPS signatures and firewall rules.</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Event Log */}\n          <Card className=\"bg-[hsl(0,0%,8%)]/80 border-[hsl(330,100%,50%)]/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Detailed Event Log</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                <div className=\"text-xs space-y-2\">\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-red-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-red-400 font-medium\">2024-01-15 09:15:23</span>\n                      <Badge variant=\"outline\" className=\"border-red-400/20 text-red-400\">Critical</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Malicious executable detected on Host A</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-orange-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-orange-400 font-medium\">2024-01-15 09:16:05</span>\n                      <Badge variant=\"outline\" className=\"border-orange-400/20 text-orange-400\">High</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Outbound connection attempt to known C2 server (185.234.72.3)</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-yellow-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-yellow-400 font-medium\">2024-01-15 09:16:50</span>\n                      <Badge variant=\"outline\" className=\"border-yellow-400/20 text-yellow-400\">Medium</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Suspicious user login from unusual IP address (198.51.100.25)</p>\n                  </div>\n\n                  <div className=\"bg-[hsl(0,0%,6%)] p-3 rounded border border-green-500/20\">\n                    <div className=\"flex justify-between items-start mb-1\">\n                      <span className=\"text-green-400 font-medium\">2024-01-15 09:17:12</span>\n                      <Badge variant=\"outline\" className=\"border-green-400/20 text-green-400\">Info</Badge>\n                    </div>\n                    <p className=\"text-gray-300\">Alert generated by SIEM system based on correlated events</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":22787},"NewFrontend/alpha-platform/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"NewFrontend/alpha-platform/client/src/components/sections/dashboard-showcase.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { Shield, AlertTriangle, BarChart3, Workflow, Users, FileText } from \"lucide-react\";\n\ngsap.registerPlugin(ScrollTrigger);\n\ninterface FeatureStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  visual: string;\n}\n\nconst featureSteps: FeatureStep[] = [\n  {\n    id: \"unified-threat\",\n    title: \"Unified Threat Overview\",\n    description: \"Get complete visibility into threat landscape — by severity, source, and impact across all your security tools and endpoints.\",\n    icon: Shield,\n    visual: \"threat-overview\"\n  },\n  {\n    id: \"alert-triage\",\n    title: \"AI-Powered Alert Triage\",\n    description: \"Automatically classify and prioritize alerts using advanced AI scoring for true positives, false positives, and escalation paths.\",\n    icon: AlertTriangle,\n    visual: \"alert-triage\"\n  },\n  {\n    id: \"tactical-analytics\",\n    title: \"Real-Time Tactical Analytics\",\n    description: \"Track attacker behavior patterns, analyze file execution paths, and correlate process execution across your infrastructure.\",\n    icon: BarChart3,\n    visual: \"analytics\"\n  },\n  {\n    id: \"automated-playbooks\",\n    title: \"Automated Response Playbooks\",\n    description: \"Instantly isolate compromised devices, block malicious hashes, and notify security teams with predefined automated playbooks.\",\n    icon: Workflow,\n    visual: \"playbooks\"\n  },\n  {\n    id: \"user-entity\",\n    title: \"User Entity Behavior Analytics\",\n    description: \"Correlate security alerts back to specific users, domains, and asset movement patterns for comprehensive threat context.\",\n    icon: Users,\n    visual: \"entity-mapping\"\n  },\n  {\n    id: \"compliance\",\n    title: \"Compliance & Audit Reporting\",\n    description: \"Generate audit-ready compliance reports automatically mapped to ISO 27001, NIST Framework, SOC 2, and industry standards.\",\n    icon: FileText,\n    visual: \"compliance\"\n  }\n];\n\nexport default function DashboardShowcase() {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Create scroll-triggered animations for each section\n    featureSteps.forEach((_, index) => {\n      const sectionSelector = `.feature-section-${index}`;\n      const titleSelector = `${sectionSelector} .feature-title`;\n      const descSelector = `${sectionSelector} .feature-description`;\n      const visualSelector = `${sectionSelector} .feature-visual`;\n\n      ScrollTrigger.create({\n        trigger: sectionSelector,\n        start: \"top 80%\",\n        end: \"bottom 20%\",\n        onEnter: () => {\n          // Typewriter animation for title\n          const titleElement = container.querySelector(titleSelector);\n          if (titleElement) {\n            const titleText = titleElement.textContent || \"\";\n            titleElement.textContent = \"\";\n            titleElement.style.opacity = \"1\";\n\n            gsap.to({}, {\n              duration: titleText.length * 0.05,\n              ease: \"none\",\n              onUpdate: function() {\n                const progress = this.progress();\n                const currentLength = Math.floor(progress * titleText.length);\n                titleElement.textContent = titleText.substring(0, currentLength);\n              }\n            });\n          }\n\n          // Typewriter animation for description with delay\n          setTimeout(() => {\n            const descElement = container.querySelector(descSelector);\n            if (descElement) {\n              const descText = descElement.textContent || \"\";\n              descElement.textContent = \"\";\n              descElement.style.opacity = \"1\";\n\n              gsap.to({}, {\n                duration: descText.length * 0.02,\n                ease: \"none\",\n                onUpdate: function() {\n                  const progress = this.progress();\n                  const currentLength = Math.floor(progress * descText.length);\n                  descElement.textContent = descText.substring(0, currentLength);\n                }\n              });\n            }\n          }, 800);\n\n          // Visual fade-in with slide\n          gsap.fromTo(visualSelector,\n            { y: 80, opacity: 0 },\n            { y: 0, opacity: 1, duration: 1.2, ease: \"power3.out\", delay: 0.3 }\n          );\n        }\n      });\n    });\n\n    return () => {\n      ScrollTrigger.getAll().forEach(trigger => trigger.kill());\n    };\n  }, []);\n\n  const renderVisual = (visual: string) => {\n    const baseClasses = \"w-full h-full rounded-xl border border-[hsl(330,100%,50%)]/20 bg-gradient-to-br from-[hsl(220,15%,8%)] to-[hsl(220,15%,5%)] p-6 relative overflow-hidden backdrop-blur-sm\";\n\n    switch (visual) {\n      case \"threat-overview\":\n        return (\n          <div className={baseClasses}>\n            {/* Enhanced Background Grid */}\n            <div className=\"absolute inset-0 opacity-5\">\n              <div className=\"grid grid-cols-12 grid-rows-12 gap-px h-full\">\n                {Array.from({ length: 144 }).map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"bg-[hsl(330,100%,50%)] rounded-sm animate-pulse\"\n                    style={{\n                      animationDelay: `${i * 30}ms`,\n                      animationDuration: `${2 + (i % 3)}s`\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Floating particles */}\n            <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n              {Array.from({ length: 20 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 h-1 bg-[hsl(330,100%,50%)] rounded-full animate-pulse opacity-30\"\n                  style={{\n                    left: `${Math.random() * 100}%`,\n                    top: `${Math.random() * 100}%`,\n                    animationDelay: `${Math.random() * 3}s`,\n                    animationDuration: `${2 + Math.random() * 2}s`\n                  }}\n                />\n              ))}\n            </div>\n\n            {/* Main Content */}\n            <div className=\"relative z-10 grid grid-cols-2 gap-6 h-full\">\n              {/* Threat Categories */}\n              <div className=\"space-y-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 mb-3 flex items-center\">\n                  <div className=\"w-2 h-2 bg-[hsl(330,100%,50%)] rounded-full mr-2 animate-pulse\"></div>\n                  Threat Categories\n                </h4>\n                {[\n                  { name: \"Critical\", count: 23, color: \"red\", percentage: 78 },\n                  { name: \"High\", count: 156, color: \"orange\", percentage: 65 },\n                  { name: \"Medium\", count: 342, color: \"yellow\", percentage: 45 },\n                  { name: \"Low\", count: 1326, color: \"green\", percentage: 25 }\n                ].map((threat, i) => (\n                  <div key={i} className=\"space-y-2 group\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`w-3 h-3 rounded-full bg-${threat.color}-500 group-hover:scale-110 transition-transform duration-300`}></div>\n                        <span className=\"text-sm text-gray-300 group-hover:text-white transition-colors\">{threat.name}</span>\n                        <span className=\"text-xs text-gray-500\">({threat.count.toLocaleString()})</span>\n                      </div>\n                      <span className=\"text-xs font-mono text-[hsl(330,100%,50%)] group-hover:scale-110 transition-transform\">{threat.percentage}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-700/40 rounded-full h-2 overflow-hidden\">\n                      <div\n                        className={`h-full bg-gradient-to-r from-${threat.color}-500/60 to-${threat.color}-500 rounded-full transition-all duration-2000 animate-pulse`}\n                        style={{\n                          width: `${threat.percentage}%`,\n                          animationDelay: `${i * 200}ms`\n                        }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Enhanced Live Dashboard */}\n              <div className=\"bg-[hsl(0,0%,6%)]/80 rounded-xl p-4 border border-[hsl(330,100%,50%)]/20 backdrop-blur-sm relative overflow-hidden\">\n                {/* Scanning line effect */}\n                <div className=\"absolute inset-0 overflow-hidden\">\n                  <div className=\"absolute w-full h-px bg-gradient-to-r from-transparent via-[hsl(330,100%,50%)] to-transparent animate-ping\" style={{ top: '30%' }}></div>\n                </div>\n\n                <div className=\"text-center mb-4 relative z-10\">\n                  <div className=\"text-3xl font-bold text-[hsl(330,100%,50%)] mb-1 animate-pulse\">1,847</div>\n                  <div className=\"text-xs text-gray-400\">Active Threats Detected</div>\n                  <div className=\"text-xs text-[hsl(267,100%,67%)] mt-1\">Live monitoring • Updated 2s ago</div>\n                </div>\n\n                {/* Enhanced Real-time Activity Feed */}\n                <div className=\"space-y-2 text-xs relative z-10\">\n                  {[\n                    { type: \"Malware detected\", severity: \"red\", time: \"12:34:56\" },\n                    { type: \"Suspicious traffic\", severity: \"yellow\", time: \"12:34:52\" },\n                    { type: \"Brute force attempt\", severity: \"orange\", time: \"12:34:48\" },\n                    { type: \"Policy violation\", severity: \"blue\", time: \"12:34:44\" }\n                  ].map((alert, i) => (\n                    <div key={i} className={`flex items-center justify-between py-2 px-3 bg-${alert.severity}-500/10 rounded-lg border-l-2 border-${alert.severity}-500 hover:bg-${alert.severity}-500/20 transition-all duration-300 group`}>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`w-2 h-2 bg-${alert.severity}-500 rounded-full animate-pulse group-hover:scale-125 transition-transform`}></div>\n                        <span className={`text-${alert.severity}-300 group-hover:text-${alert.severity}-200 transition-colors`}>{alert.type}</span>\n                      </div>\n                      <span className=\"text-gray-500 font-mono\">{alert.time}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"alert-triage\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                  AI Alert Triage Engine\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\"></div>\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                    <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                  </div>\n                  <span className=\"text-xs text-green-400\">Processing</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3 flex-1\">\n                {[\n                  { id: \"ALT-2024-001\", type: \"Malware\", confidence: 95, severity: \"Critical\", source: \"Endpoint\", status: \"analyzing\" },\n                  { id: \"ALT-2024-002\", type: \"Phishing\", confidence: 87, severity: \"High\", source: \"Email\", status: \"confirmed\" },\n                  { id: \"ALT-2024-003\", type: \"Anomaly\", confidence: 72, severity: \"Medium\", source: \"Network\", status: \"pending\" },\n                  { id: \"ALT-2024-004\", type: \"Policy\", confidence: 45, severity: \"Low\", source: \"User\", status: \"dismissed\" }\n                ].map((alert, i) => (\n                  <div key={i} className=\"p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/40 transition-all duration-300 group backdrop-blur-sm\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-3 h-3 rounded-full group-hover:scale-110 transition-transform ${\n                          alert.severity === 'Critical' ? 'bg-red-500 animate-pulse' :\n                          alert.severity === 'High' ? 'bg-orange-500' :\n                          alert.severity === 'Medium' ? 'bg-yellow-500' : 'bg-green-500'\n                        }`}></div>\n                        <span className=\"text-sm font-mono text-gray-300 group-hover:text-white transition-colors\">{alert.id}</span>\n                        <span className=\"text-xs px-2 py-1 rounded-full bg-gray-700/50 text-gray-400 group-hover:bg-gray-600/50 transition-colors\">{alert.type}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-[hsl(330,100%,50%)] text-sm font-mono group-hover:scale-105 transition-transform\">{alert.confidence}%</div>\n                        <div className={`w-2 h-2 rounded-full ${\n                          alert.status === 'analyzing' ? 'bg-blue-500 animate-pulse' :\n                          alert.status === 'confirmed' ? 'bg-green-500' :\n                          alert.status === 'pending' ? 'bg-yellow-500 animate-pulse' :\n                          'bg-gray-500'\n                        }`}></div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-xs mb-2\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"text-gray-400\">Source: <span className=\"text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{alert.source}</span></span>\n                        <span className=\"text-gray-400\">Severity: <span className={`transition-colors ${\n                          alert.severity === 'Critical' ? 'text-red-400' :\n                          alert.severity === 'High' ? 'text-orange-400' :\n                          alert.severity === 'Medium' ? 'text-yellow-400' : 'text-green-400'\n                        }`}>{alert.severity}</span></span>\n                      </div>\n\n                      <div className=\"flex space-x-1\">\n                        <button className=\"px-2 py-1 text-xs bg-green-600/20 text-green-400 rounded-md hover:bg-green-600/40 transition-all duration-200 hover:scale-105\">Accept</button>\n                        <button className=\"px-2 py-1 text-xs bg-red-600/20 text-red-400 rounded-md hover:bg-red-600/40 transition-all duration-200 hover:scale-105\">Reject</button>\n                      </div>\n                    </div>\n\n                    {/* Enhanced AI Confidence Bar */}\n                    <div className=\"mt-2\">\n                      <div className=\"w-full bg-gray-700/40 rounded-full h-1.5 overflow-hidden\">\n                        <div\n                          className=\"h-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full transition-all duration-1000 relative\"\n                          style={{ width: `${alert.confidence}%` }}\n                        >\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"analytics\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <BarChart3 className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Tactical Analytics Dashboard\n                </h4>\n                <div className=\"flex space-x-2\">\n                  <button className=\"px-3 py-1 text-xs bg-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)] rounded-md border border-[hsl(330,100%,50%)]/20 hover:bg-[hsl(330,100%,50%)]/30 transition-all\">Live</button>\n                  <button className=\"px-3 py-1 text-xs bg-gray-700/50 text-gray-400 rounded-md hover:bg-gray-600/50 transition-all\">Historical</button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                {[\n                  { label: \"Avg Response Time\", value: \"2.3s\", color: \"hsl(330,100%,50%)\", trend: \"down\" },\n                  { label: \"Accuracy Rate\", value: \"98.7%\", color: \"green-400\", trend: \"up\" }\n                ].map((metric, i) => (\n                  <div key={i} className=\"text-center p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/20 transition-all duration-300 group\">\n                    <div className={`text-lg font-bold text-${metric.color} group-hover:scale-105 transition-transform`}>{metric.value}</div>\n                    <div className=\"text-xs text-gray-400\">{metric.label}</div>\n                    <div className={`text-xs mt-1 ${metric.trend === 'up' ? 'text-green-400' : 'text-blue-400'}`}>\n                      {metric.trend === 'up' ? '↗' : '↘'} Trending {metric.trend}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Enhanced Interactive Chart Area */}\n              <div className=\"flex-1 relative bg-[hsl(0,0%,6%)]/60 rounded-xl border border-gray-700/30 p-4 overflow-hidden\">\n                {/* Chart background grid */}\n                <div className=\"absolute inset-4\">\n                  <svg className=\"w-full h-full opacity-10\" viewBox=\"0 0 300 150\">\n                    <defs>\n                      <pattern id=\"chartGrid\" width=\"30\" height=\"15\" patternUnits=\"userSpaceOnUse\">\n                        <path d=\"M 30 0 L 0 0 0 15\" fill=\"none\" stroke=\"hsl(330,100%,50%)\" strokeWidth=\"0.5\"/>\n                      </pattern>\n                    </defs>\n                    <rect width=\"100%\" height=\"100%\" fill=\"url(#chartGrid)\"/>\n                  </svg>\n                </div>\n\n                {/* Main chart */}\n                <svg className=\"w-full h-full relative z-10\" viewBox=\"0 0 300 150\">\n                  <defs>\n                    <linearGradient id=\"areaGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0.4\"/>\n                      <stop offset=\"50%\" stopColor=\"hsl(267,100%,67%)\" stopOpacity=\"0.2\"/>\n                      <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0\"/>\n                    </linearGradient>\n                    <filter id=\"glow\">\n                      <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                      <feMerge>\n                        <feMergeNode in=\"coloredBlur\"/>\n                        <feMergeNode in=\"SourceGraphic\"/>\n                      </feMerge>\n                    </filter>\n                  </defs>\n\n                  {/* Data area */}\n                  <path\n                    d=\"M15,120 Q45,80 75,90 T135,70 T195,85 T255,75 T285,65 L285,130 L15,130 Z\"\n                    fill=\"url(#areaGradient)\"\n                  />\n\n                  {/* Data line */}\n                  <path\n                    d=\"M15,120 Q45,80 75,90 T135,70 T195,85 T255,75 T285,65\"\n                    fill=\"none\"\n                    stroke=\"hsl(330,100%,50%)\"\n                    strokeWidth=\"2\"\n                    filter=\"url(#glow)\"\n                    className=\"animate-pulse\"\n                  />\n\n                  {/* Animated data points */}\n                  {[\n                    { x: 75, y: 90 }, { x: 135, y: 70 }, { x: 195, y: 85 }, { x: 255, y: 75 }\n                  ].map((point, i) => (\n                    <g key={i}>\n                      <circle\n                        cx={point.x}\n                        cy={point.y}\n                        r=\"4\"\n                        fill=\"hsl(330,100%,50%)\"\n                        filter=\"url(#glow)\"\n                        className=\"animate-pulse cursor-pointer\"\n                        style={{ animationDelay: `${i * 200}ms` }}\n                      />\n                      <circle\n                        cx={point.x}\n                        cy={point.y}\n                        r=\"8\"\n                        fill=\"none\"\n                        stroke=\"hsl(330,100%,50%)\"\n                        strokeWidth=\"1\"\n                        opacity=\"0.3\"\n                        className=\"animate-ping\"\n                        style={{ animationDelay: `${i * 200}ms` }}\n                      />\n                    </g>\n                  ))}\n                </svg>\n\n                {/* Enhanced Hover Tooltips */}\n                <div className=\"absolute top-2 right-2 text-xs text-gray-400 bg-[hsl(0,0%,6%)]/80 rounded-lg p-2 border border-gray-700/30\">\n                  <div className=\"text-white\">Attack Pattern Analysis</div>\n                  <div className=\"text-[hsl(330,100%,50%)]\">Last 24h • Live</div>\n                  <div className=\"text-[hsl(267,100%,67%)] text-xs mt-1\">Next update: 30s</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"playbooks\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                  <Workflow className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  Automated Playbook Engine\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex space-x-1\">\n                    {[0, 1, 2].map((i) => (\n                      <div\n                        key={i}\n                        className=\"w-1 h-4 bg-blue-500 rounded-full animate-pulse\"\n                        style={{ animationDelay: `${i * 0.2}s` }}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-blue-400\">Executing</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4 flex-1\">\n                {[\n                  { step: \"Detect\", desc: \"AI identifies threat patterns\", icon: \"🔍\", time: \"0.2s\", status: \"complete\" },\n                  { step: \"Analyze\", desc: \"Context enrichment & correlation\", icon: \"🧠\", time: \"0.8s\", status: \"complete\" },\n                  { step: \"Contain\", desc: \"Isolate affected systems\", icon: \"🛡️\", time: \"1.2s\", status: \"active\" },\n                  { step: \"Remediate\", desc: \"Automated threat removal\", icon: \"🔧\", time: \"2.1s\", status: \"pending\" }\n                ].map((playbook, i) => {\n                  const isActive = i <= 2;\n                  const isCurrent = i === 2;\n\n                  return (\n                    <div key={i} className=\"relative\">\n                      {/* Enhanced Connection Line */}\n                      {i < 3 && (\n                        <div className=\"absolute left-4 top-12 w-px h-6\">\n                          <div className={`w-full h-full transition-all duration-1000 ${\n                            isActive ? 'bg-gradient-to-b from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)]' : 'bg-gray-600'\n                          }`}></div>\n                          {isActive && (\n                            <div className=\"absolute inset-0 w-full bg-gradient-to-b from-[hsl(330,100%,50%)] to-transparent animate-pulse\"></div>\n                          )}\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center space-x-4 p-4 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/30 transition-all duration-300 group\">\n                        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs transition-all duration-500 relative ${\n                          isActive ?\n                          'border-[hsl(330,100%,50%)] bg-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]' :\n                          'border-gray-600 text-gray-400'\n                        }`}>\n                          <span className=\"relative z-10\">{playbook.icon}</span>\n                          {isCurrent && (\n                            <div className=\"absolute inset-0 rounded-full border-2 border-[hsl(330,100%,50%)] animate-ping\"></div>\n                          )}\n                        </div>\n\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className={`text-sm font-medium transition-colors group-hover:text-[hsl(330,100%,50%)] ${\n                              isActive ? 'text-white' : 'text-gray-400'\n                            }`}>\n                              {playbook.step}\n                            </span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-xs text-[hsl(330,100%,50%)] font-mono\">\n                                {playbook.time}\n                              </span>\n                              <div className={`text-xs px-2 py-1 rounded-full ${\n                                playbook.status === 'complete' ? 'bg-green-500/20 text-green-400' :\n                                playbook.status === 'active' ? 'bg-blue-500/20 text-blue-400' :\n                                'bg-gray-500/20 text-gray-400'\n                              }`}>\n                                {playbook.status}\n                              </div>\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-gray-400 mt-1 group-hover:text-gray-300 transition-colors\">{playbook.desc}</p>\n\n                          {/* Enhanced Progress Bar */}\n                          <div className=\"mt-3 w-full bg-gray-700/40 rounded-full h-1.5 overflow-hidden\">\n                            <div\n                              className={`h-full rounded-full transition-all duration-1000 relative ${\n                                isActive ? 'bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)]' : 'bg-gray-600'\n                              } ${isActive ? 'w-full' : 'w-0'}`}\n                            >\n                              {isCurrent && (\n                                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\"></div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n\n              {/* Enhanced Status Footer */}\n              <div className=\"mt-4 p-4 bg-green-500/10 border border-green-500/20 rounded-xl text-center backdrop-blur-sm relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/5 via-transparent to-green-500/5 animate-pulse\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"text-sm text-green-400 font-medium flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                    Playbook Status: Active\n                  </div>\n                  <div className=\"text-xs text-gray-400 mt-1\">Last execution: 2 minutes ago • Success rate: 99.2%</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"entity-mapping\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"relative h-full overflow-hidden\">\n              {/* Network visualization background */}\n              <div className=\"absolute inset-0 opacity-20\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 400 300\">\n                  {/* Connection lines */}\n                  {[\n                    { x1: 100, y1: 150, x2: 200, y2: 100 },\n                    { x1: 100, y1: 150, x2: 200, y2: 200 },\n                    { x1: 200, y1: 100, x2: 300, y2: 150 },\n                    { x1: 200, y1: 200, x2: 300, y2: 150 },\n                    { x1: 300, y1: 150, x2: 350, y2: 100 },\n                    { x1: 300, y1: 150, x2: 350, y2: 200 }\n                  ].map((line, i) => (\n                    <line\n                      key={i}\n                      x1={line.x1}\n                      y1={line.y1}\n                      x2={line.x2}\n                      y2={line.y2}\n                      stroke=\"hsl(330,100%,50%)\"\n                      strokeWidth=\"1\"\n                      className=\"animate-pulse\"\n                      style={{ animationDelay: `${i * 0.2}s` }}\n                    />\n                  ))}\n                </svg>\n              </div>\n\n              <div className=\"relative z-10 h-full flex flex-col\">\n                <h4 className=\"text-sm font-semibold text-gray-300 mb-4 flex items-center\">\n                  <Users className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                  User Entity Behavior Analytics\n                </h4>\n\n                <div className=\"flex-1 grid grid-cols-3 gap-6 items-center\">\n                  {[\n                    { name: \"John Doe\", role: \"Admin\", risk: \"High\", activities: 47 },\n                    { name: \"Sarah Chen\", role: \"User\", risk: \"Medium\", activities: 23 },\n                    { name: \"Mike Johnson\", role: \"Guest\", risk: \"Low\", activities: 12 }\n                  ].map((user, i) => (\n                    <div key={i} className=\"text-center group\">\n                      <div className=\"relative mb-3\">\n                        <div className={`w-16 h-16 rounded-full bg-gradient-to-r mx-auto transition-all duration-500 group-hover:scale-110 ${\n                          user.risk === 'High' ? 'from-red-500 to-red-600 animate-pulse' :\n                          user.risk === 'Medium' ? 'from-yellow-500 to-yellow-600' :\n                          'from-green-500 to-green-600'\n                        }`}>\n                          <div className=\"w-full h-full rounded-full border-2 border-white/20 flex items-center justify-center text-white font-bold text-lg\">\n                            {user.name.split(' ').map(n => n[0]).join('')}\n                          </div>\n                        </div>\n\n                        {/* Risk indicator */}\n                        <div className={`absolute -top-1 -right-1 w-4 h-4 rounded-full border-2 border-[hsl(220,15%,5%)] ${\n                          user.risk === 'High' ? 'bg-red-500 animate-pulse' :\n                          user.risk === 'Medium' ? 'bg-yellow-500' :\n                          'bg-green-500'\n                        }`}></div>\n                      </div>\n\n                      <div className=\"space-y-1\">\n                        <div className=\"text-sm font-medium text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{user.name}</div>\n                        <div className=\"text-xs text-gray-400\">{user.role}</div>\n                        <div className={`text-xs font-medium ${\n                          user.risk === 'High' ? 'text-red-400' :\n                          user.risk === 'Medium' ? 'text-yellow-400' :\n                          'text-green-400'\n                        }`}>\n                          {user.risk} Risk\n                        </div>\n                        <div className=\"text-xs text-gray-500\">{user.activities} activities</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Activity timeline */}\n                <div className=\"mt-6 p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30\">\n                  <div className=\"text-xs text-gray-400 mb-2\">Recent Activity Timeline</div>\n                  <div className=\"flex space-x-1\">\n                    {Array.from({ length: 20 }).map((_, i) => (\n                      <div\n                        key={i}\n                        className={`w-1 rounded-full transition-all duration-300 ${\n                          Math.random() > 0.7 ? 'h-6 bg-red-500' :\n                          Math.random() > 0.5 ? 'h-4 bg-yellow-500' :\n                          'h-2 bg-green-500'\n                        }`}\n                        style={{ animationDelay: `${i * 50}ms` }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case \"compliance\":\n        return (\n          <div className={baseClasses}>\n            <div className=\"h-full flex flex-col\">\n              <h4 className=\"text-sm font-semibold text-gray-300 mb-4 flex items-center\">\n                <FileText className=\"w-4 h-4 mr-2 text-[hsl(330,100%,50%)]\" />\n                Compliance & Audit Reporting\n              </h4>\n\n              <div className=\"space-y-4 flex-1\">\n                {[\n                  { name: \"ISO 27001\", score: 94, color: \"green\", lastAudit: \"2 days ago\" },\n                  { name: \"NIST Framework\", score: 89, color: \"blue\", lastAudit: \"1 week ago\" },\n                  { name: \"SOC 2 Type II\", score: 96, color: \"purple\", lastAudit: \"3 days ago\" },\n                  { name: \"GDPR Compliance\", score: 92, color: \"orange\", lastAudit: \"5 days ago\" }\n                ].map((standard, i) => (\n                  <div key={i} className=\"p-4 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-gray-700/30 hover:border-[hsl(330,100%,50%)]/30 transition-all duration-300 group\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <span className=\"text-sm font-medium text-white group-hover:text-[hsl(330,100%,50%)] transition-colors\">{standard.name}</span>\n                        <div className=\"text-xs text-gray-400 mt-1\">Last audit: {standard.lastAudit}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-[hsl(330,100%,50%)]\">{standard.score}%</div>\n                        <div className=\"text-xs text-green-400\">Compliant</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex-1 bg-gray-700/40 rounded-full h-2 overflow-hidden\">\n                        <div\n                          className=\"h-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-full transition-all duration-1000 relative\"\n                          style={{ width: `${standard.score}%` }}\n                        >\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n                        </div>\n                      </div>\n                      <span className=\"text-xs text-[hsl(330,100%,50%)] font-mono\">{standard.score}%</span>\n                    </div>\n\n                    {/* Mini compliance breakdown */}\n                    <div className=\"mt-3 grid grid-cols-3 gap-2\">\n                      {['Controls', 'Policies', 'Procedures'].map((item, j) => (\n                        <div key={j} className=\"text-center\">\n                          <div className=\"text-xs text-gray-400\">{item}</div>\n                          <div className=\"text-xs font-mono text-green-400\">{Math.floor(Math.random() * 10) + 90}%</div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Report generation footer */}\n              <div className=\"mt-4 p-3 bg-[hsl(0,0%,6%)]/80 rounded-xl border border-[hsl(330,100%,50%)]/20 text-center\">\n                <button className=\"w-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white py-2 px-4 rounded-lg text-sm font-medium hover:opacity-90 transition-opacity\">\n                  Generate Compliance Report\n                </button>\n                <div className=\"text-xs text-gray-400 mt-2\">Auto-generated reports available 24/7</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return <div className={baseClasses}></div>;\n    }\n  };\n\n  return (\n    <div ref={containerRef} className=\"dashboard-showcase relative bg-[hsl(220,15%,5%)] py-20\">\n      {/* Enhanced Background Effects */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(330,100%,50%)]/5 to-[hsl(267,100%,67%)]/5\"></div>\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,hsl(330,100%,50%)_0px,transparent_50%)] opacity-10\"></div>\n\n      {/* Section heading */}\n      <div className=\"container mx-auto max-w-7xl px-6 mb-20\">\n        <div className=\"text-center\">\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-white mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n            AI-Powered Security Operations\n          </h2>\n          <p className=\"text-gray-300 text-xl max-w-3xl mx-auto\">\n            Experience next-generation cybersecurity with our intelligent SOC platform\n          </p>\n        </div>\n      </div>\n\n      {/* Feature sections */}\n      <div className=\"space-y-32\">\n        {featureSteps.map((step, index) => (\n          <div\n            key={step.id}\n            className={`feature-section-${index} container mx-auto max-w-7xl px-6`}\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 w-full items-center\">\n              {/* Left Panel - Text Content */}\n              <div className=\"flex flex-col justify-center space-y-8\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    {(() => {\n                      const IconComponent = step.icon;\n                      return <IconComponent className=\"w-10 h-10 text-[hsl(330,100%,50%)]\" />;\n                    })()}\n                    <span className=\"text-sm text-[hsl(330,100%,50%)] font-mono bg-[hsl(330,100%,50%)]/10 px-3 py-1 rounded-full\">\n                      {String(index + 1).padStart(2, '0')} / {String(featureSteps.length).padStart(2, '0')}\n                    </span>\n                  </div>\n\n                  <h3 className=\"feature-title text-4xl lg:text-5xl font-bold text-white leading-tight bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent opacity-0\">\n                    {step.title}\n                  </h3>\n\n                  <p className=\"feature-description text-gray-300 text-xl leading-relaxed opacity-0\">\n                    {step.description}\n                  </p>\n                </div>\n              </div>\n\n              {/* Right Panel - Visual Content */}\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-full h-96 lg:h-[600px] relative\">\n                  <div className=\"w-full h-full relative feature-visual\">\n                    {/* Glow effect behind visual */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-[hsl(330,100%,50%)]/10 to-[hsl(267,100%,67%)]/10 rounded-2xl blur-xl\"></div>\n                    <div className=\"relative z-10\">\n                      {renderVisual(step.visual)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":40578},"NewFrontend/alpha-platform/client/src/components/sections/faq.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Plus, Minus } from \"lucide-react\";\n\nexport default function FAQ() {\n  const [openFAQ, setOpenFAQ] = useState<number | null>(null);\n\n  const faqs = [\n    {\n      question: \"How quickly can I deploy Prophet Security?\",\n      answer:\n        \"Most customers are up and running within 24 hours. Our platform integrates seamlessly with existing security tools and requires minimal configuration.\",\n    },\n    {\n      question: \"What types of threats can the AI agents detect?\",\n      answer:\n        \"Our AI agents detect a wide range of threats including malware, phishing, insider threats, data breaches, and advanced persistent threats (APTs). The system continuously learns and adapts to new threat patterns.\",\n    },\n    {\n      question: \"How does Prophet Security handle false positives?\",\n      answer:\n        \"Our AI uses advanced machine learning algorithms to minimize false positives. The system learns from your environment and feedback, continuously improving accuracy over time.\",\n    },\n    {\n      question: \"What compliance standards does Prophet Security support?\",\n      answer:\n        \"We support major compliance frameworks including SOC 2, ISO 27001, PCI DSS, HIPAA, and GDPR. Our platform provides automated compliance reporting and audit trails.\",\n    },\n  ];\n\n  const toggleFAQ = (index: number) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <section className=\"py-20 px-6 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold glow-text\">Frequently Asked Questions</h2>\n        </motion.div>\n\n        <div className=\"space-y-4\">\n          {faqs.map((faq, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              viewport={{ once: true }}\n              className=\"border-b border-gray-800 last:border-b-0\"\n            >\n              <button\n                className=\"w-full text-left py-6 flex items-center justify-between focus:outline-none group\"\n                onClick={() => toggleFAQ(index)}\n              >\n                <span className=\"text-lg font-semibold group-hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  {faq.question}\n                </span>\n                <motion.div\n                  animate={{ rotate: openFAQ === index ? 180 : 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  {openFAQ === index ? (\n                    <Minus className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                  ) : (\n                    <Plus className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n                  )}\n                </motion.div>\n              </button>\n              <AnimatePresence>\n                {openFAQ === index && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: \"auto\" }}\n                    exit={{ opacity: 0, height: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"pb-6\"\n                  >\n                    <p className=\"text-gray-300\">{faq.answer}</p>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3787},"NewFrontend/alpha-platform/client/src/components/sections/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-16 px-6 border-t border-gray-800 relative bg-[hsl(220,15%,5%)]\">\n      <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-[hsl(330,100%,50%)] to-transparent\"></div>\n      <div className=\"container mx-auto\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"md:col-span-2\"\n          >\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-3xl\"></div>\n              <span className=\"text-xl font-bold glow-text\">Alpha</span>\n            </div>\n            <p className=\"text-gray-400 mb-6 max-w-md\">\n              Transforming cybersecurity with intelligent AI agents that work around the clock to protect your organization from evolving threats.\n            </p>\n            <div className=\"flex space-x-4\">\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Twitter className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Linkedin className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n              <motion.a\n                href=\"#\"\n                whileHover={{ scale: 1.1 }}\n                className=\"w-10 h-10 bg-[hsl(0,0%,10%)]/50 border border-[hsl(330,100%,50%)]/30 rounded-lg flex items-center justify-center hover:bg-[hsl(330,100%,50%)]/20 transition-colors\"\n              >\n                <Github className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n              </motion.a>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n            viewport={{ once: true }}\n          >\n            <h4 className=\"font-semibold mb-4 text-[hsl(330,100%,50%)]\">Features</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  AI Threat Detection\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Automated Response\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Real-time Analytics\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Compliance Reports\n                </a>\n              </li>\n            </ul>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            viewport={{ once: true }}\n          >\n            <h4 className=\"font-semibold mb-4 text-[hsl(330,100%,50%)]\">Resources</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Documentation\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  API Reference\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Security Blog\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-[hsl(330,100%,50%)] transition-colors\">\n                  Support Center\n                </a>\n              </li>\n            </ul>\n          </motion.div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          viewport={{ once: true }}\n          className=\"border-t border-gray-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\"\n        >\n          <p className=\"text-gray-400 text-sm\">© 2025 Prophet Security. All rights reserved.</p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Terms of Service\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-[hsl(330,100%,50%)] transition-colors text-sm\">\n              Security\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5795},"NewFrontend/alpha-platform/client/src/components/sections/header.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport { gsap } from \"gsap\";\nimport { motion } from \"framer-motion\";\nimport { TextPlugin } from \"gsap/TextPlugin\";\nimport { useLocation } from \"wouter\";\nimport LoginDialog from \"@/components/login-dialog\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\ngsap.registerPlugin(TextPlugin);\n\ninterface HeaderProps {\n  onRequestDemo: () => void;\n}\n\nexport default function Header({ onRequestDemo }: HeaderProps) {\n  const [, setLocation] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [showDemoRequest, setShowDemoRequest] = useState(false);\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\n  const headerRef = useRef<HTMLElement>(null);\n  const logoRef = useRef<HTMLDivElement>(null);\n  const logoTextRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Header slide down animation\n      gsap.fromTo(headerRef.current,\n        { y: -100, opacity: 0 },\n        { y: 0, opacity: 1, duration: 1, ease: \"power3.out\" }\n      );\n\n      // Logo writing animation\n      gsap.to(logoTextRef.current, {\n        duration: 1.5,\n        text: \"Alpha SOC\",\n        ease: \"none\",\n        delay: 0.5\n      });\n\n      // Logo glow pulse (without rotation)\n      gsap.to(logoRef.current?.querySelector('.logo-glow'), {\n        scale: 1.1,\n        opacity: 0.8,\n        repeat: -1,\n        yoyo: true,\n        duration: 2,\n        ease: \"power2.inOut\"\n      });\n\n    }, headerRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  const onCloseDemoRequest = () => {\n    setShowDemoRequest(false);\n  };\n\n  return (\n    <motion.header \n      ref={headerRef}\n      className=\"fixed top-0 w-full z-50 bg-[hsl(220,15%,5%)]/95 backdrop-blur-lg border-b border-[hsl(330,100%,50%)]/20\"\n    >\n      <nav className=\"container mx-auto px-6 py-4 flex items-center justify-between\">\n        {/* Enhanced Logo */}\n        <div ref={logoRef} className=\"flex items-center space-x-3 cursor-pointer\" onClick={() => setLocation(\"/\")}>\n          <div className=\"relative\">\n            <div className=\"logo-glow w-10 h-10 bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-lg\"></div>\n            <div className=\"absolute inset-0 w-10 h-10 bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] rounded-lg blur-sm opacity-50\"></div>\n          </div>\n          <span ref={logoTextRef} className=\"text-2xl font-bold text-white glow-text\"></span>\n        </div>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden md:flex items-center space-x-8\">\n          <motion.a \n            href=\"#platform\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Platform\n          </motion.a>\n          <motion.a \n            href=\"#solutions\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Solutions\n          </motion.a>\n          <motion.a \n            href=\"#resources\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Resources\n          </motion.a>\n          <motion.a \n            href=\"#company\" \n            className=\"text-gray-300 hover:text-[hsl(330,100%,50%)] transition-all duration-300 font-medium\"\n            whileHover={{ scale: 1.05 }}\n          >\n            Company\n          </motion.a>\n        </div>\n\n        {/* CTA Buttons */}\n        <div className=\"hidden md:flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\"\n            className=\"text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10 transition-all duration-300\"\n            onClick={() => setShowLoginDialog(true)}\n          >\n            Login\n          </Button>\n          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n            <Button \n              variant=\"glow\" \n              className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90 transition-all duration-300\"\n              onClick={onRequestDemo}\n            >\n              Request Demo\n            </Button>\n          </motion.div>\n        </div>\n\n        {/* Mobile Menu Button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"md:hidden text-white\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n        >\n          {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n        </Button>\n      </nav>\n\n      {/* Enhanced Mobile Menu */}\n      {isMenuOpen && (\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          className=\"md:hidden bg-[hsl(220,15%,5%)]/98 backdrop-blur-lg border-t border-[hsl(330,100%,50%)]/20\"\n        >\n          <div className=\"px-6 py-6 space-y-6\">\n            <motion.a \n              href=\"#platform\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Platform\n            </motion.a>\n            <motion.a \n              href=\"#solutions\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Solutions\n            </motion.a>\n            <motion.a \n              href=\"#resources\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Resources\n            </motion.a>\n            <motion.a \n              href=\"#company\" \n              className=\"block hover:text-[hsl(330,100%,50%)] transition-colors text-lg font-medium\"\n              whileHover={{ x: 10 }}\n            >\n              Company\n            </motion.a>\n            <div className=\"space-y-3 pt-4\">\n              <Button \n                variant=\"outline\"\n                size=\"lg\" \n                className=\"w-full border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10\"\n                onClick={() => setShowLoginDialog(true)}\n              >\n                Login\n              </Button>\n              <Button \n                variant=\"glow\" \n                size=\"lg\" \n                className=\"w-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90\"\n                onClick={onRequestDemo}\n              >\n                Request Demo\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n\n      {/* Login Dialog */}\n      <LoginDialog open={showLoginDialog} onOpenChange={setShowLoginDialog} />\n    </motion.header>\n  );\n}\n","size_bytes":7057},"NewFrontend/alpha-platform/client/src/components/sections/hero.tsx":{"content":"\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, AlertTriangle, CheckCircle, Zap, Brain, Eye, Mail, Laptop, Server, Database, Globe } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport { TextPlugin } from 'gsap/TextPlugin';\n\ngsap.registerPlugin(TextPlugin);\n\ninterface HeroProps {\n  onRequestDemo: () => void;\n}\n\nexport default function Hero({ onRequestDemo }: HeroProps) {\n  const [, setLocation] = useLocation();\n  const rightColumnRef = useRef(null);\n  const titleRef = useRef(null);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [attackActive, setAttackActive] = useState(false);\n\n  const attackSteps = [\n    { id: \"phishing\", label: \"Phishing Email\", icon: Mail, position: { x: 10, y: 20 } },\n    { id: \"endpoint\", label: \"Endpoint Compromise\", icon: Laptop, position: { x: 30, y: 40 } },\n    { id: \"lateral\", label: \"Lateral Movement\", icon: Server, position: { x: 60, y: 30 } },\n    { id: \"data\", label: \"Data Exfiltration\", icon: Database, position: { x: 85, y: 50 } },\n    { id: \"external\", label: \"External C&C\", icon: Globe, position: { x: 95, y: 10 } }\n  ];\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Writing animation for main title\n      gsap.to(titleRef.current, {\n        duration: 2,\n        text: \"Agentic AI SOC Platform\",\n        ease: \"none\",\n        delay: 0.5\n      });\n\n      // Spider web connections animation\n      gsap.set(\".web-line\", { scaleX: 0, transformOrigin: \"left center\" });\n      gsap.to(\".web-line\", {\n        scaleX: 1,\n        duration: 0.8,\n        stagger: 0.2,\n        ease: \"power2.out\",\n        delay: 2\n      });\n\n      // Attack propagation animation\n      const attackInterval = setInterval(() => {\n        setAttackActive(true);\n        setCurrentStep(0);\n        \n        const stepInterval = setInterval(() => {\n          setCurrentStep(prev => {\n            if (prev >= attackSteps.length - 1) {\n              clearInterval(stepInterval);\n              setTimeout(() => setAttackActive(false), 1000);\n              return 0;\n            }\n            return prev + 1;\n          });\n        }, 800);\n      }, 6000);\n\n      return () => clearInterval(attackInterval);\n    }, rightColumnRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  return (\n    <section className=\"pt-24 pb-16 px-4 relative overflow-hidden min-h-screen flex items-center\">\n      {/* Subtle background */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-[hsl(220,15%,3%)] via-[hsl(220,15%,5%)] to-[hsl(267,100%,67%)]/3\"></div>\n      </div>\n\n      <div className=\"container mx-auto relative z-10\">\n        <div className=\"grid lg:grid-cols-2 gap-8 lg:gap-12 items-center max-w-7xl mx-auto\">\n          \n          {/* Left Column - Clean Description Panel */}\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n            className=\"space-y-6 lg:pr-8\"\n          >\n            {/* Compact Header */}\n            <div>\n              <motion.h1 \n                ref={titleRef}\n                className=\"text-4xl lg:text-5xl font-bold leading-tight mb-3\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.5 }}\n              >\n                <span className=\"glow-text bg-gradient-to-r from-white to-[hsl(330,100%,50%)] bg-clip-text text-transparent\"></span>\n              </motion.h1>\n              \n              <motion.p \n                className=\"text-lg text-gray-300 mb-6 leading-relaxed\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.5, duration: 0.6 }}\n              >\n                Advanced AI agents detect, analyze, and neutralize cyber threats in real-time with zero human intervention.\n              </motion.p>\n            </div>\n\n            {/* Compact Feature List */}\n            <motion.div \n              className=\"space-y-3\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 1.8, duration: 0.6 }}\n            >\n              {[\n                \"🧠 AI-powered threat correlation across all vectors\",\n                \"⚡ Sub-second response time with automated remediation\", \n                \"🔍 Deep behavioral analysis and anomaly detection\",\n                \"📊 Predictive threat intelligence and risk scoring\"\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-center text-sm text-gray-200\">\n                  <span className=\"mr-3\">{feature.split(' ')[0]}</span>\n                  <span>{feature.substring(feature.indexOf(' ') + 1)}</span>\n                </div>\n              ))}\n            </motion.div>\n\n            {/* Compact CTA */}\n            <motion.div \n              className=\"flex flex-col sm:flex-row gap-3 pt-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 2.1, duration: 0.6 }}\n            >\n              <Button\n                variant=\"glow\"\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] text-white hover:opacity-90 transition-all duration-300 text-sm\"\n                onClick={onRequestDemo}\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Request Demo\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-[hsl(330,100%,50%)]/30 text-[hsl(330,100%,50%)] hover:bg-[hsl(330,100%,50%)]/10 text-sm\"\n                onClick={() => setLocation(\"/dashboard\")}\n              >\n                <Brain className=\"w-4 h-4 mr-2\" />\n                Live Dashboard\n              </Button>\n            </motion.div>\n\n            {/* Compact Stats */}\n            <motion.div \n              className=\"grid grid-cols-3 gap-4 pt-6 border-t border-[hsl(330,100%,50%)]/10\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 2.4 }}\n            >\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-[hsl(330,100%,50%)]\">99.7%</div>\n                <div className=\"text-xs text-gray-400\">Threat Detection</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-[hsl(267,100%,67%)]\">0.3s</div>\n                <div className=\"text-xs text-gray-400\">Response Time</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-green-400\">Zero</div>\n                <div className=\"text-xs text-gray-400\">False Positives</div>\n              </div>\n            </motion.div>\n          </motion.div>\n\n          {/* Right Column - Interactive Spider Web Attack Visualization */}\n          <div ref={rightColumnRef} className=\"relative\">\n            <div className=\"bg-gradient-to-br from-[hsl(220,15%,8%)] to-[hsl(220,15%,12%)] rounded-2xl p-6 border border-[hsl(330,100%,50%)]/20 relative overflow-hidden h-96\">\n              \n              {/* Spider Web Background */}\n              <div className=\"absolute inset-0\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\">\n                  {/* Web structure lines */}\n                  {attackSteps.map((step, index) => (\n                    <g key={`web-${index}`}>\n                      {index < attackSteps.length - 1 && (\n                        <line\n                          className=\"web-line\"\n                          x1={step.position.x}\n                          y1={step.position.y}\n                          x2={attackSteps[index + 1].position.x}\n                          y2={attackSteps[index + 1].position.y}\n                          stroke={attackActive && currentStep >= index ? \"url(#attackGradient)\" : \"rgba(255,20,147,0.2)\"}\n                          strokeWidth=\"0.5\"\n                          strokeDasharray={attackActive && currentStep >= index ? \"0\" : \"2,2\"}\n                        />\n                      )}\n                      {/* Radial connections for spider web effect */}\n                      {index > 0 && (\n                        <line\n                          className=\"web-line\"\n                          x1=\"50\"\n                          y1=\"50\"\n                          x2={step.position.x}\n                          y2={step.position.y}\n                          stroke=\"rgba(138,43,226,0.1)\"\n                          strokeWidth=\"0.3\"\n                        />\n                      )}\n                    </g>\n                  ))}\n                  \n                  <defs>\n                    <linearGradient id=\"attackGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#ff1493\" />\n                      <stop offset=\"100%\" stopColor=\"#8a2be2\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n\n              {/* Attack Node Points */}\n              <div className=\"absolute inset-0\">\n                {attackSteps.map((step, index) => {\n                  const Icon = step.icon;\n                  const isActive = attackActive && currentStep >= index;\n                  const isCurrent = attackActive && currentStep === index;\n                  \n                  return (\n                    <div\n                      key={step.id}\n                      className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                      style={{ \n                        left: `${step.position.x}%`, \n                        top: `${step.position.y}%` \n                      }}\n                    >\n                      <motion.div\n                        className={`relative`}\n                        animate={{\n                          scale: isCurrent ? [1, 1.3, 1] : isActive ? 1.1 : 1,\n                        }}\n                        transition={{ duration: 0.6, repeat: isCurrent ? Infinity : 0 }}\n                      >\n                        {/* Node glow */}\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center border transition-all duration-500 ${\n                          isActive \n                            ? 'bg-red-500/20 border-red-400 shadow-lg shadow-red-400/50' \n                            : 'bg-[hsl(220,15%,15%)] border-[hsl(330,100%,50%)]/20'\n                        }`}>\n                          <Icon className={`w-4 h-4 transition-colors duration-500 ${\n                            isActive ? 'text-red-300' : 'text-gray-400'\n                          }`} />\n                        </div>\n                        \n                        {/* Node label */}\n                        <div className={`absolute top-10 left-1/2 transform -translate-x-1/2 whitespace-nowrap transition-all duration-500 ${\n                          isActive ? 'opacity-100' : 'opacity-60'\n                        }`}>\n                          <div className=\"text-xs font-medium text-center\">\n                            <div className={`${isActive ? 'text-red-300' : 'text-gray-300'}`}>\n                              {step.label}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Attack pulse for current step */}\n                        {isCurrent && (\n                          <div className=\"absolute inset-0 rounded-full border-2 border-red-400 animate-ping opacity-75\"></div>\n                        )}\n                      </motion.div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* AI Defense Center */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                <motion.div\n                  className=\"w-16 h-16 rounded-full bg-gradient-to-br from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center relative\"\n                  animate={{\n                    boxShadow: attackActive \n                      ? [\"0 0 20px rgba(255,20,147,0.5)\", \"0 0 40px rgba(255,20,147,0.8)\", \"0 0 20px rgba(255,20,147,0.5)\"]\n                      : \"0 0 20px rgba(255,20,147,0.3)\"\n                  }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                >\n                  <Shield className=\"w-8 h-8 text-white\" />\n                  <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"text-xs font-semibold text-[hsl(330,100%,50%)] whitespace-nowrap\">\n                      AI Defense Core\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Real-time status */}\n              <div className=\"absolute bottom-4 left-4 right-4\">\n                <div className=\"bg-[hsl(220,15%,10%)]/80 rounded-lg p-3 border border-[hsl(330,100%,50%)]/10\">\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-300\">\n                      {attackActive ? `Analyzing: ${attackSteps[currentStep]?.label}` : \"Monitoring Network\"}\n                    </span>\n                    <div className={`flex items-center space-x-2 ${attackActive ? 'text-red-400' : 'text-green-400'}`}>\n                      <div className={`w-2 h-2 rounded-full ${attackActive ? 'bg-red-400' : 'bg-green-400'} animate-pulse`}></div>\n                      <span className=\"font-medium\">{attackActive ? 'Threat Active' : 'Secure'}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14168},"NewFrontend/alpha-platform/client/src/components/sections/integrations.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Brain, Github, Cloud, Shield, Database, Zap } from \"lucide-react\";\n\nexport default function Integrations() {\n  const integrations = [\n    { icon: <Cloud className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" /> },\n    { icon: <Shield className=\"w-6 h-6 text-[hsl(267,100%,67%)]\" /> },\n    { icon: <Database className=\"w-6 h-6 text-[hsl(0,0%,90%)]\" /> },\n    { icon: <Zap className=\"w-6 h-6 text-[hsl(330,100%,50%)]\" /> },\n    { icon: <Github className=\"w-6 h-6 text-gray-300\" /> },\n    { icon: <Cloud className=\"w-6 h-6 text-[hsl(267,100%,67%)]\" /> },\n  ];\n\n  return (\n    <section className=\"min-h-screen py-20 px-6 bg-[hsl(220,15%,5%)] flex items-center justify-center\">\n  <div className=\"flex flex-col items-center text-center\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold mb-4 glow-text\">Integrations That Simply Work</h2>\n          <p className=\"text-xl text-gray-300\">Connect with your existing security stack in minutes</p>\n        </motion.div>\n\n        {/* Icons Circle */}\n        <div className=\"relative w-96 h-96 flex items-center justify-center mx-auto\">\n          {/* Central Brain Icon */}\n          <motion.div \n            initial={{ scale: 0, rotate: -180 }}\n            whileInView={{ scale: 1, rotate: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            viewport={{ once: true }}\n            className=\"absolute z-10\"\n            style={{ left: '50%', top: '50%', transform: 'translate(-50%, -50%)' }}\n          >\n            <div className=\"w-20 h-20 bg-gradient-to-r from-[hsl(220,15%,5%)] to-[hsl(330,100%,50%)] rounded-full flex items-center justify-center glow-button\">\n              <Brain className=\"w-8 h-8 text-white\" />\n            </div>\n          </motion.div>\n\n          {/* Surrounding Integration Icons in a Circle */}\n          {integrations.map((integration, index) => {\n            const angle = (index / integrations.length) * 2 * Math.PI;\n            const radius = 160; // Adjust distance from center\n            const x = Math.cos(angle) * radius;\n            const y = Math.sin(angle) * radius;\n\n            return (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, scale: 0 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}\n                viewport={{ once: true }}\n                style={{\n                  position: \"absolute\",\n                  left: `calc(50% + ${x}px)`,\n                  top: `calc(50% + ${y}px)`,\n                  transform: \"translate(-50%, -50%)\",\n                }}\n              >\n                <div className=\"w-16 h-16 bg-[hsl(220,15%,10%)]/80 rounded-lg border border-[hsl(330,100%,50%)]/30 flex items-center justify-center hover:border-[hsl(330,100%,50%)]/60 hover:shadow-[0_0_12px_hsla(330,100%,50%,0.35)] transition-all\">\n                  {integration.icon}\n                </div>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3314},"NewFrontend/alpha-platform/client/src/components/sections/testimonials.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight, Quote } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Testimonials() {\n  const [currentTestimonial, setCurrentTestimonial] = useState(0);\n\n  const testimonials = [\n    {\n      quote: \"Prophet Security reduced our mean time to response by 80%. The AI agents handle routine incidents while our team focuses on strategic threats.\",\n      name: \"Sarah Chen\",\n      title: \"CISO, TechCorp\",\n    },\n    {\n      quote: \"The platform's ability to automatically correlate threats across our entire security stack is game-changing. We catch threats we would have missed.\",\n      name: \"Marcus Rodriguez\",\n      title: \"Security Director, FinanceFirst\",\n    },\n    {\n      quote: \"Implementation was seamless. Within 24 hours, we had AI agents actively monitoring and responding to security events across our infrastructure.\",\n      name: \"Emily Watson\",\n      title: \"Head of Security, CloudScale\",\n    },\n  ];\n\n  const nextTestimonial = () => {\n    setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const prevTestimonial = () => {\n    setCurrentTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  return (\n    <section className=\"py-20 px-6 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto\">\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-4xl font-bold mb-4 glow-text\">What Security Leaders Say</h2>\n        </motion.div>\n        \n        <div className=\"max-w-6xl mx-auto\">\n          {/* Desktop View - All testimonials */}\n          <div className=\"hidden md:grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n                viewport={{ once: true }}\n                className=\"testimonial-card rounded-2xl p-8 backdrop-blur-sm hover:border-[hsl(330,100%,50%)]/40 transition-colors\"\n              >\n                <div className=\"mb-6\">\n                  <Quote className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                </div>\n                <p className=\"text-gray-300 mb-6\">\n                  \"{testimonial.quote}\"\n                </p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full mr-4\"></div>\n                  <div>\n                    <p className=\"font-semibold\">{testimonial.name}</p>\n                    <p className=\"text-sm text-gray-400\">{testimonial.title}</p>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Mobile View - Carousel */}\n          <div className=\"md:hidden\">\n            <div className=\"relative overflow-hidden\">\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key={currentTestimonial}\n                  initial={{ opacity: 0, x: 100 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -100 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"testimonial-card rounded-2xl p-8 backdrop-blur-sm\"\n                >\n                  <div className=\"mb-6\">\n                    <Quote className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />\n                  </div>\n                  <p className=\"text-gray-300 mb-6\">\n                    \"{testimonials[currentTestimonial].quote}\"\n                  </p>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-[hsl(267,100%,67%)] to-[hsl(330,100%,50%)] rounded-full mr-4\"></div>\n                    <div>\n                      <p className=\"font-semibold\">{testimonials[currentTestimonial].name}</p>\n                      <p className=\"text-sm text-gray-400\">{testimonials[currentTestimonial].title}</p>\n                    </div>\n                  </div>\n                </motion.div>\n              </AnimatePresence>\n            </div>\n          </div>\n          \n          {/* Carousel Buttons */}\n          <div className=\"flex justify-center mt-8 space-x-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={prevTestimonial}\n              className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/30 hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ChevronLeft className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={nextTestimonial}\n              className=\"bg-[hsl(0,0%,10%)]/50 border-[hsl(330,100%,50%)]/30 hover:bg-[hsl(330,100%,50%)]/20\"\n            >\n              <ChevronRight className=\"w-4 h-4 text-[hsl(330,100%,50%)]\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5386},"NewFrontend/alpha-platform/client/src/components/sections/trusted-by.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default function TrustedBy() {\n  const sectionRef = useRef<HTMLElement>(null);\n  const titleRef = useRef<HTMLParagraphElement>(null);\n  const logosRef = useRef<HTMLDivElement>(null);\n\n  const logos = [\n    { name: \"YC\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Stripe\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Zip\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Tech Co\", color: \"bg-[hsl(220,15%,10%)]\" },\n    { name: \"Secure\", color: \"bg-[hsl(220,15%,10%)]\" },\n  ];\n\n  useEffect(() => {\n    const ctx = gsap.context(() => {\n      // Title animation\n      gsap.fromTo(titleRef.current,\n        { opacity: 0, y: 20 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 0.6,\n          ease: \"power2.out\",\n          scrollTrigger: {\n            trigger: titleRef.current,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          }\n        }\n      );\n\n      // Logos stagger animation\n      gsap.fromTo(logosRef.current?.children,\n        { opacity: 0, scale: 0.8 },\n        {\n          opacity: 1,\n          scale: 1,\n          duration: 0.4,\n          stagger: 0.1,\n          ease: \"back.out(1.7)\",\n          scrollTrigger: {\n            trigger: logosRef.current,\n            start: \"top 80%\",\n            toggleActions: \"play none none reverse\"\n          }\n        }\n      );\n\n      // Hover animations for logos\n      if (logosRef.current) {\n        Array.from(logosRef.current.children).forEach((logo) => {\n          const logoElement = logo as HTMLElement;\n          \n          logoElement.addEventListener('mouseenter', () => {\n            gsap.to(logoElement, { scale: 1.1, duration: 0.3, ease: \"power2.out\" });\n          });\n\n          logoElement.addEventListener('mouseleave', () => {\n            gsap.to(logoElement, { scale: 1, duration: 0.3, ease: \"power2.out\" });\n          });\n        });\n      }\n    }, sectionRef);\n\n    return () => ctx.revert();\n  }, []);\n\n  return (\n    <section ref={sectionRef} className=\"py-16 px-6 border-t border-[hsl(330,100%,50%)]/20 bg-[hsl(220,15%,5%)]\">\n      <div className=\"container mx-auto\">\n        <p \n          ref={titleRef}\n          className=\"text-center text-gray-400 mb-8\"\n        >\n          Trusted by industry leaders\n        </p>\n        \n        <div \n          ref={logosRef}\n          className=\"flex flex-wrap justify-center items-center gap-8 opacity-70\"\n        >\n          {logos.map((logo, index) => (\n            <div\n              key={logo.name}\n              className={`w-24 h-12 ${logo.color} rounded flex items-center justify-center border border-[hsl(330,100%,50%)]/10 hover:border-[hsl(330,100%,50%)]/40 shadow-md transition-all duration-300 cursor-pointer`}\n            >\n              <span className=\"text-white font-semibold text-sm\">{logo.name}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3053},"NewFrontend/alpha-platform/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"NewFrontend/alpha-platform/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"NewFrontend/alpha-platform/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"NewFrontend/alpha-platform/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"NewFrontend/alpha-platform/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"NewFrontend/alpha-platform/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"NewFrontend/alpha-platform/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"NewFrontend/alpha-platform/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        glow: \"bg-gradient-to-r from-[hsl(170,100%,48%)] to-[hsl(267,100%,67%)] text-[hsl(215,28%,5%)] font-semibold glow-button hover:scale-105 active:scale-95\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        xl: \"h-12 rounded-lg px-8 text-lg\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2033},"NewFrontend/alpha-platform/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"NewFrontend/alpha-platform/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"NewFrontend/alpha-platform/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"NewFrontend/alpha-platform/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"NewFrontend/alpha-platform/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"NewFrontend/alpha-platform/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"NewFrontend/alpha-platform/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"NewFrontend/alpha-platform/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"NewFrontend/alpha-platform/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"NewFrontend/alpha-platform/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"NewFrontend/alpha-platform/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"NewFrontend/alpha-platform/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"NewFrontend/alpha-platform/client/src/components/ui/global-threat-globe.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport Globe from 'react-globe.gl';\n\nconst Attacks = [\n  { order: 1, size: 0.5, color: 'red' },\n  { order: 2, size: 0.3, color: 'orange' },\n  { order: 3, size: 0.7, color: 'yellow' },\n  { order: 4, size: 0.4, color: 'green' },\n  { order: 5, size: 0.6, color: 'blue' },\n  { order: 6, size: 0.2, color: 'purple' },\n  { order: 7, size: 0.9, color: 'pink' },\n  { order: 8, size: 0.1, color: 'brown' },\n  { order: 9, size: 0.8, color: 'gray' },\n  { order: 10, size: 0.5, color: 'cyan' },\n];\n\nfunction createNewAttack() {\n  const newAttack = Attacks[Math.floor(Math.random() * Attacks.length)];\n  return {\n    ...newAttack,\n    startLat: Math.random() * 180 - 90,\n    startLng: Math.random() * 360 - 180,\n    endLat: Math.random() * 180 - 90,\n    endLng: Math.random() * 360 - 180,\n  };\n}\n\nfunction GlobalThreatGlobe() {\n  const [attacks, setAttacks] = useState([createNewAttack()]);\n  const globeEl = useRef<any>();\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAttacks(prev => {\n        // Limit the number of attacks to prevent infinite growth\n        const newAttacks = [...prev, createNewAttack()];\n        return newAttacks.length > 20 ? newAttacks.slice(-20) : newAttacks;\n      });\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    // Auto-rotate globe\n    if (globeEl.current && globeEl.current.controls) {\n      globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.1;\n    }\n  }, []);\n\n  return (\n    <Globe\n      ref={globeEl}\n      arcsData={attacks}\n      animateIn={true}\n      arcColor={d => d.color}\n      arcStrokeWidth={d => d.size}\n      arcDashLength={0.4}\n      arcDashGap={0.2}\n      arcLabel={d => `${d.size * 100} Mbps`}\n      arcStartLat={d => d.startLat}\n      arcStartLng={d => d.startLng}\n      arcEndLat={d => d.endLat}\n      arcEndLng={d => d.endLng}\n       atmosphereColor=\"#233A5B\"\n      backgroundColor=\"rgba(0,0,0,0)\"\n      pointsData={[{ lat: 10, lng: 10, size: 10, color: 'red' }]}\n      pointColor={d => d.color}\n      pointAltitude={d => d.size}\n      pointLabel={d => `${d.size * 100} Mbps`}\n    />\n  );\n}\n\nexport default GlobalThreatGlobe;","size_bytes":2245},"NewFrontend/alpha-platform/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"NewFrontend/alpha-platform/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"NewFrontend/alpha-platform/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"NewFrontend/alpha-platform/client/src/components/ui/investigation-knowledge-graph.tsx":{"content":"\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Shield, \n  AlertTriangle, \n  Database, \n  Server, \n  Globe, \n  User, \n  FileText, \n  Network,\n  Eye,\n  Brain,\n  Target,\n  Zap,\n  Activity,\n  Lock,\n  Unlock,\n  HardDrive,\n  Cpu,\n  CloudLightning\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\nimport { Button } from './button';\n\ninterface InvestigationNode {\n  id: string;\n  label: string;\n  type: 'alert' | 'user' | 'asset' | 'process' | 'file' | 'network' | 'threat' | 'evidence' | 'timeline' | 'correlation';\n  riskLevel: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  x: number;\n  y: number;\n  z: number;\n  connections: string[];\n  questions: InvestigationQuestion[];\n  isActive: boolean;\n  isExpanded: boolean;\n  depth: number;\n  pulse: boolean;\n  metadata: Record<string, any>;\n  angle?: number;\n  radius?: number;\n  layer?: number;\n}\n\ninterface InvestigationQuestion {\n  id: string;\n  text: string;\n  answer?: string;\n  followUp?: string[];\n  confidence: number;\n  category: 'behavioral' | 'technical' | 'temporal' | 'contextual';\n  triggered: boolean;\n}\n\ninterface Connection {\n  from: string;\n  to: string;\n  strength: number;\n  type: 'direct' | 'inferred' | 'temporal' | 'behavioral';\n  confidence: number;\n  animated: boolean;\n  curvature?: number;\n}\n\nconst nodeIcons = {\n  alert: AlertTriangle,\n  user: User,\n  asset: Server,\n  process: Cpu,\n  file: FileText,\n  network: Network,\n  threat: Shield,\n  evidence: Eye,\n  timeline: Activity,\n  correlation: Brain\n};\n\n// Golden spider web color scheme\nconst webColors = {\n  primary: '#FFD700',      // Gold\n  secondary: '#FFA500',    // Orange gold\n  tertiary: '#FFFF99',     // Light gold\n  accent: '#FF8C00',       // Dark orange\n  glow: '#FFFF00'         // Bright yellow\n};\n\nconst riskColors = {\n  critical: '#FF4444',\n  high: '#FF8800',\n  medium: '#FFD700',\n  low: '#90EE90',\n  info: '#87CEEB'\n};\n\nfunction InvestigationKnowledgeGraph() {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [nodes, setNodes] = useState<InvestigationNode[]>([]);\n  const [connections, setConnections] = useState<Connection[]>([]);\n  const [selectedNode, setSelectedNode] = useState<InvestigationNode | null>(null);\n  const [activeQuestions, setActiveQuestions] = useState<InvestigationQuestion[]>([]);\n  const [rotation, setRotation] = useState(0);\n  const [isRotating, setIsRotating] = useState(true);\n  const centerX = 400;\n  const centerY = 300;\n\n  // Create spider web layout\n  useEffect(() => {\n    const centerNode: InvestigationNode = {\n      id: 'alert-001',\n      label: 'Suspicious Network Activity',\n      type: 'alert',\n      riskLevel: 'critical',\n      x: centerX,\n      y: centerY,\n      z: 0,\n      connections: ['user-001', 'asset-001', 'network-001', 'process-001', 'threat-001', 'file-001', 'evidence-001'],\n      questions: [\n        {\n          id: 'q1',\n          text: 'What triggered this alert?',\n          answer: 'Anomalous data exfiltration pattern detected',\n          confidence: 94,\n          category: 'technical',\n          triggered: true,\n          followUp: ['q2', 'q3']\n        },\n        {\n          id: 'q2',\n          text: 'Who is the affected user?',\n          answer: 'john.doe@company.com',\n          confidence: 98,\n          category: 'contextual',\n          triggered: true,\n          followUp: ['q4']\n        }\n      ],\n      isActive: true,\n      isExpanded: false,\n      depth: 0,\n      pulse: true,\n      metadata: { severity: 'critical', source: 'SIEM', timestamp: '2024-01-07T14:30:00Z' },\n      angle: 0,\n      radius: 0,\n      layer: 0\n    };\n\n    // Create concentric layers like a spider web\n    const layer1Nodes: InvestigationNode[] = [];\n    const layer2Nodes: InvestigationNode[] = [];\n    const layer3Nodes: InvestigationNode[] = [];\n\n    // Layer 1 - Inner circle (6 nodes)\n    const layer1Data = [\n      { id: 'user-001', label: 'john.doe@company.com', type: 'user', risk: 'medium' },\n      { id: 'asset-001', label: 'WORKSTATION-001', type: 'asset', risk: 'high' },\n      { id: 'network-001', label: '192.168.1.105', type: 'network', risk: 'high' },\n      { id: 'process-001', label: 'PowerShell.exe', type: 'process', risk: 'critical' },\n      { id: 'threat-001', label: 'APT29 Indicators', type: 'threat', risk: 'critical' },\n      { id: 'file-001', label: 'suspicious.ps1', type: 'file', risk: 'high' }\n    ];\n\n    layer1Data.forEach((nodeData, i) => {\n      const angle = (i / layer1Data.length) * 2 * Math.PI;\n      const radius = 120;\n      layer1Nodes.push({\n        id: nodeData.id,\n        label: nodeData.label,\n        type: nodeData.type as any,\n        riskLevel: nodeData.risk as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: ['alert-001'],\n        questions: [{\n          id: `q${i + 3}`,\n          text: `Investigate ${nodeData.type} details?`,\n          confidence: 80 + Math.random() * 20,\n          category: 'technical',\n          triggered: false\n        }],\n        isActive: false,\n        isExpanded: false,\n        depth: 1,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 1\n      });\n    });\n\n    // Layer 2 - Middle circle (12 nodes)\n    const layer2Data = [\n      { id: 'correlation-001', label: 'Related Events', type: 'correlation', risk: 'medium' },\n      { id: 'evidence-001', label: 'Forensic Data', type: 'evidence', risk: 'high' },\n      { id: 'timeline-001', label: 'Event Timeline', type: 'timeline', risk: 'medium' },\n      { id: 'network-002', label: 'External IP', type: 'network', risk: 'critical' },\n      { id: 'file-002', label: 'Registry Entry', type: 'file', risk: 'medium' },\n      { id: 'process-002', label: 'Child Process', type: 'process', risk: 'high' },\n      { id: 'user-002', label: 'Admin Account', type: 'user', risk: 'high' },\n      { id: 'asset-002', label: 'Domain Controller', type: 'asset', risk: 'critical' },\n      { id: 'threat-002', label: 'IOC Match', type: 'threat', risk: 'high' },\n      { id: 'evidence-002', label: 'Memory Dump', type: 'evidence', risk: 'medium' },\n      { id: 'correlation-002', label: 'Pattern Match', type: 'correlation', risk: 'low' },\n      { id: 'timeline-002', label: 'Log Sequence', type: 'timeline', risk: 'medium' }\n    ];\n\n    layer2Data.forEach((nodeData, i) => {\n      const angle = (i / layer2Data.length) * 2 * Math.PI;\n      const radius = 220;\n      layer2Nodes.push({\n        id: nodeData.id,\n        label: nodeData.label,\n        type: nodeData.type as any,\n        riskLevel: nodeData.risk as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: [],\n        questions: [{\n          id: `q${i + 10}`,\n          text: `Analyze ${nodeData.type} connection?`,\n          confidence: 70 + Math.random() * 30,\n          category: 'contextual',\n          triggered: false\n        }],\n        isActive: false,\n        isExpanded: false,\n        depth: 2,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 2\n      });\n    });\n\n    // Layer 3 - Outer circle (18 nodes)\n    const layer3Count = 18;\n    for (let i = 0; i < layer3Count; i++) {\n      const angle = (i / layer3Count) * 2 * Math.PI;\n      const radius = 300;\n      const types = ['network', 'file', 'process', 'evidence', 'correlation', 'timeline'];\n      const type = types[i % types.length];\n      \n      layer3Nodes.push({\n        id: `${type}-${Math.floor(i / types.length) + 3}`,\n        label: `${type.charAt(0).toUpperCase() + type.slice(1)} ${Math.floor(i / types.length) + 3}`,\n        type: type as any,\n        riskLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as any,\n        x: centerX + Math.cos(angle) * radius,\n        y: centerY + Math.sin(angle) * radius,\n        z: 0,\n        connections: [],\n        questions: [],\n        isActive: false,\n        isExpanded: false,\n        depth: 3,\n        pulse: false,\n        metadata: {},\n        angle,\n        radius,\n        layer: 3\n      });\n    }\n\n    const allNodes = [centerNode, ...layer1Nodes, ...layer2Nodes, ...layer3Nodes];\n    \n    // Create spider web connections\n    const connectionList: Connection[] = [];\n    \n    // Center to layer 1 (main strands)\n    layer1Nodes.forEach((node, i) => {\n      connectionList.push({\n        from: 'alert-001',\n        to: node.id,\n        strength: 0.9,\n        type: 'direct',\n        confidence: 95,\n        animated: true,\n        curvature: 0\n      });\n    });\n\n    // Layer 1 to layer 2 (radial connections)\n    layer1Nodes.forEach((node1, i) => {\n      const nearbyLayer2 = layer2Nodes.filter((node2, j) => {\n        const angleDiff = Math.abs(node1.angle! - node2.angle!);\n        const minAngle = Math.min(angleDiff, 2 * Math.PI - angleDiff);\n        return minAngle < Math.PI / 3; // Connect to nearby nodes\n      });\n      \n      nearbyLayer2.forEach(node2 => {\n        connectionList.push({\n          from: node1.id,\n          to: node2.id,\n          strength: 0.6,\n          type: 'inferred',\n          confidence: 75,\n          animated: false,\n          curvature: 0.2\n        });\n      });\n    });\n\n    // Layer 2 to layer 3 (web strands)\n    layer2Nodes.forEach((node2) => {\n      const nearbyLayer3 = layer3Nodes.filter((node3) => {\n        const angleDiff = Math.abs(node2.angle! - node3.angle!);\n        const minAngle = Math.min(angleDiff, 2 * Math.PI - angleDiff);\n        return minAngle < Math.PI / 4;\n      });\n      \n      nearbyLayer3.slice(0, 2).forEach(node3 => {\n        connectionList.push({\n          from: node2.id,\n          to: node3.id,\n          strength: 0.4,\n          type: 'temporal',\n          confidence: 60,\n          animated: false,\n          curvature: 0.3\n        });\n      });\n    });\n\n    // Circular connections within layers (web rings)\n    const createRingConnections = (layerNodes: InvestigationNode[], strength: number) => {\n      layerNodes.forEach((node, i) => {\n        const nextNode = layerNodes[(i + 1) % layerNodes.length];\n        connectionList.push({\n          from: node.id,\n          to: nextNode.id,\n          strength,\n          type: 'behavioral',\n          confidence: 50,\n          animated: false,\n          curvature: 0.1\n        });\n      });\n    };\n\n    createRingConnections(layer1Nodes, 0.5);\n    createRingConnections(layer2Nodes, 0.3);\n    createRingConnections(layer3Nodes, 0.2);\n\n    setNodes(allNodes);\n    setConnections(connectionList);\n    setActiveQuestions(centerNode.questions);\n  }, []);\n\n  // Gentle rotation animation\n  useEffect(() => {\n    if (!isRotating) return;\n    \n    const interval = setInterval(() => {\n      setRotation(prev => prev + 0.2);\n    }, 100);\n\n    return () => clearInterval(interval);\n  }, [isRotating]);\n\n  const handleNodeClick = (node: InvestigationNode) => {\n    setSelectedNode(node);\n    setActiveQuestions(node.questions);\n    \n    // Highlight connected nodes\n    setNodes(prev => prev.map(n => {\n      if (node.connections.includes(n.id) || connections.some(c => \n        (c.from === node.id && c.to === n.id) || (c.from === n.id && c.to === node.id)\n      )) {\n        return { ...n, pulse: true };\n      }\n      return { ...n, pulse: n.id === node.id };\n    }));\n  };\n\n  const renderConnections = () => {\n    return connections.map((conn, index) => {\n      const fromNode = nodes.find(n => n.id === conn.from);\n      const toNode = nodes.find(n => n.id === conn.to);\n      \n      if (!fromNode || !toNode) return null;\n      \n      const strokeWidth = conn.strength * 2;\n      const opacity = conn.strength * 0.8 + 0.2;\n      \n      // Create curved path for spider web effect\n      const midX = (fromNode.x + toNode.x) / 2;\n      const midY = (fromNode.y + toNode.y) / 2;\n      const curvature = conn.curvature || 0;\n      const controlX = midX + curvature * 50;\n      const controlY = midY + curvature * 50;\n      \n      const pathD = curvature > 0 \n        ? `M ${fromNode.x} ${fromNode.y} Q ${controlX} ${controlY} ${toNode.x} ${toNode.y}`\n        : `M ${fromNode.x} ${fromNode.y} L ${toNode.x} ${toNode.y}`;\n      \n      return (\n        <g key={`connection-${index}`}>\n          {/* Glow effect */}\n          <path\n            d={pathD}\n            stroke={webColors.glow}\n            strokeWidth={strokeWidth + 2}\n            opacity={opacity * 0.3}\n            fill=\"none\"\n            filter=\"url(#glow)\"\n          />\n          \n          {/* Main connection */}\n          <path\n            d={pathD}\n            stroke={webColors.primary}\n            strokeWidth={strokeWidth}\n            opacity={opacity}\n            fill=\"none\"\n            strokeDasharray={conn.type === 'inferred' ? '3,3' : 'none'}\n          />\n          \n          {/* Animated particles */}\n          {conn.animated && (\n            <circle r=\"1.5\" fill={webColors.accent} opacity={0.8}>\n              <animateMotion\n                dur=\"4s\"\n                repeatCount=\"indefinite\"\n                path={pathD}\n                rotate=\"auto\"\n              />\n            </circle>\n          )}\n        </g>\n      );\n    });\n  };\n\n  const renderNodes = () => {\n    return nodes.map((node) => {\n      const IconComponent = nodeIcons[node.type];\n      const riskColor = riskColors[node.riskLevel];\n      \n      const nodeSize = node.depth === 0 ? 20 : \n                     node.depth === 1 ? 15 : \n                     node.depth === 2 ? 12 : 8;\n      \n      return (\n        <g\n          key={node.id}\n          transform={`translate(${node.x}, ${node.y}) rotate(${rotation})`}\n          style={{ cursor: 'pointer' }}\n          onClick={() => handleNodeClick(node)}\n        >\n          {/* Pulsing glow for active nodes */}\n          {node.pulse && (\n            <circle\n              r={nodeSize + 15}\n              fill={webColors.glow}\n              opacity={0.1}\n              className=\"animate-pulse\"\n            />\n          )}\n          \n          {/* Outer glow ring */}\n          <circle\n            r={nodeSize + 5}\n            fill={webColors.primary}\n            opacity={0.2}\n            filter=\"url(#glow)\"\n          />\n          \n          {/* Main node with gradient */}\n          <circle\n            r={nodeSize}\n            fill={`url(#goldGradient)`}\n            stroke={selectedNode?.id === node.id ? webColors.glow : riskColor}\n            strokeWidth={selectedNode?.id === node.id ? 3 : 1.5}\n            opacity={0.9}\n            className=\"transition-all duration-300\"\n          />\n          \n          {/* Risk indicator ring */}\n          <circle\n            r={nodeSize - 2}\n            fill=\"none\"\n            stroke={riskColor}\n            strokeWidth={2}\n            opacity={0.7}\n          />\n          \n          {/* Node icon */}\n          <foreignObject\n            x={-nodeSize/2}\n            y={-nodeSize/2}\n            width={nodeSize}\n            height={nodeSize}\n          >\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <IconComponent \n                size={Math.max(6, nodeSize * 0.6)} \n                color=\"#000\"\n                style={{ opacity: 0.8 }}\n              />\n            </div>\n          </foreignObject>\n          \n          {/* Node label */}\n          {node.depth <= 1 && (\n            <text\n              y={nodeSize + 15}\n              textAnchor=\"middle\"\n              fontSize={node.depth === 0 ? 12 : 10}\n              fill={webColors.tertiary}\n              className=\"font-mono font-medium\"\n              style={{ textShadow: '0 0 5px rgba(255, 215, 0, 0.5)' }}\n            >\n              {node.label}\n            </text>\n          )}\n        </g>\n      );\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\" style={{ color: webColors.primary, textShadow: '0 0 10px rgba(255, 215, 0, 0.5)' }}>\n          Investigation Spider Web\n        </h2>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsRotating(!isRotating)}\n            className=\"border-yellow-500/20 text-yellow-400 hover:bg-yellow-500/10\"\n          >\n            {isRotating ? 'Pause' : 'Rotate'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Spider Web Visualization */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"bg-black/90 border-yellow-500/20 h-[600px] overflow-hidden\">\n            <CardContent className=\"p-0 h-full\">\n              <div className=\"relative w-full h-full\">\n                <svg\n                  ref={svgRef}\n                  className=\"w-full h-full\"\n                  viewBox=\"0 0 800 600\"\n                  style={{ background: 'radial-gradient(circle at center, rgba(0,0,0,0.9) 0%, black 100%)' }}\n                >\n                  <defs>\n                    {/* Golden gradient for nodes */}\n                    <radialGradient id=\"goldGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n                      <stop offset=\"0%\" stopColor={webColors.tertiary} stopOpacity=\"1\" />\n                      <stop offset=\"50%\" stopColor={webColors.primary} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={webColors.secondary} stopOpacity=\"0.6\" />\n                    </radialGradient>\n                    \n                    {/* Glow filter */}\n                    <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                      <feGaussianBlur stdDeviation=\"4\" result=\"coloredBlur\"/>\n                      <feMerge>\n                        <feMergeNode in=\"coloredBlur\"/>\n                        <feMergeNode in=\"SourceGraphic\"/>\n                      </feMerge>\n                    </filter>\n\n                    {/* Web pattern */}\n                    <pattern id=\"webPattern\" width=\"60\" height=\"60\" patternUnits=\"userSpaceOnUse\">\n                      <circle cx=\"30\" cy=\"30\" r=\"1\" fill={webColors.primary} opacity=\"0.1\"/>\n                      <path d=\"M0,30 Q30,15 60,30 Q30,45 0,30\" stroke={webColors.primary} strokeWidth=\"0.3\" fill=\"none\" opacity=\"0.05\"/>\n                    </pattern>\n                  </defs>\n                  \n                  {/* Background web pattern */}\n                  <rect width=\"100%\" height=\"100%\" fill=\"url(#webPattern)\" />\n                  \n                  {/* Render connections (spider web strands) */}\n                  <g filter=\"url(#glow)\">\n                    {renderConnections()}\n                  </g>\n                  \n                  {/* Render nodes (intersection points) */}\n                  <g>\n                    {renderNodes()}\n                  </g>\n                  \n                  {/* Center focal point glow */}\n                  <circle\n                    cx={centerX}\n                    cy={centerY}\n                    r=\"50\"\n                    fill={webColors.glow}\n                    opacity=\"0.05\"\n                    filter=\"url(#glow)\"\n                    className=\"animate-pulse\"\n                  />\n                </svg>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Investigation Panel */}\n        <div className=\"space-y-4\">\n          {/* Selected Node Details */}\n          {selectedNode && (\n            <Card className=\"bg-black/80 border-yellow-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center space-x-2\" style={{ color: webColors.primary }}>\n                  {React.createElement(nodeIcons[selectedNode.type], { size: 16, color: webColors.accent })}\n                  <span>{selectedNode.label}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <div>\n                    <span className=\"text-gray-400\">Type:</span>\n                    <span className=\"ml-1 text-yellow-300 capitalize\">{selectedNode.type}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Risk:</span>\n                    <span className={`ml-1 capitalize`} style={{ color: riskColors[selectedNode.riskLevel] }}>\n                      {selectedNode.riskLevel}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Layer:</span>\n                    <span className=\"ml-1 text-yellow-300\">{selectedNode.layer || 0}</span>\n                  </div>\n                </div>\n                \n                {Object.entries(selectedNode.metadata).map(([key, value]) => (\n                  <div key={key} className=\"text-xs\">\n                    <span className=\"text-gray-400 capitalize\">{key.replace('_', ' ')}:</span>\n                    <span className=\"ml-1 text-gray-300\">{String(value)}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Investigation Questions */}\n          <Card className=\"bg-black/80 border-yellow-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\" style={{ color: webColors.primary }}>Investigation Questions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {activeQuestions.length > 0 ? activeQuestions.map((question, index) => (\n                <motion.div\n                  key={question.id}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className={`p-3 rounded-lg border ${\n                    question.triggered \n                      ? 'border-yellow-500/30 bg-yellow-500/5' \n                      : 'border-gray-700/30 bg-gray-800/30'\n                  }`}\n                >\n                  <div className=\"text-sm font-medium text-yellow-200 mb-1\">\n                    {question.text}\n                  </div>\n                  {question.answer && (\n                    <div className=\"text-xs text-gray-300 mb-2\">\n                      {question.answer}\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className={`px-2 py-1 rounded-full ${\n                      question.category === 'technical' ? 'bg-blue-400/20 text-blue-400' :\n                      question.category === 'behavioral' ? 'bg-purple-400/20 text-purple-400' :\n                      question.category === 'temporal' ? 'bg-yellow-400/20 text-yellow-400' :\n                      'bg-green-400/20 text-green-400'\n                    }`}>\n                      {question.category}\n                    </span>\n                    <span style={{ color: webColors.accent }}>\n                      {question.confidence}% confidence\n                    </span>\n                  </div>\n                </motion.div>\n              )) : (\n                <div className=\"text-sm text-gray-400 text-center py-4\">\n                  Select a node to view investigation questions\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Web Statistics */}\n          <Card className=\"bg-black/80 border-yellow-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\" style={{ color: webColors.primary }}>Web Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Total Nodes:</span>\n                  <span style={{ color: webColors.tertiary }}>{nodes.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Connections:</span>\n                  <span style={{ color: webColors.tertiary }}>{connections.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Web Layers:</span>\n                  <span style={{ color: webColors.tertiary }}>4</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-300\">Critical Alerts:</span>\n                  <span className=\"text-red-400\">{nodes.filter(n => n.riskLevel === 'critical').length}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InvestigationKnowledgeGraph;\nexport { InvestigationKnowledgeGraph };\n","size_bytes":24926},"NewFrontend/alpha-platform/client/src/components/ui/knowledge-graph.tsx":{"content":"\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ZoomIn, \n  ZoomOut, \n  RotateCcw, \n  Play, \n  Pause, \n  Filter, \n  Search,\n  Network,\n  Shield,\n  AlertTriangle,\n  User,\n  Server,\n  Globe,\n  Cpu,\n  Database,\n  Lock,\n  Eye,\n  FileText,\n  Activity\n} from \"lucide-react\";\n\ninterface GraphNode {\n  id: string;\n  label: string;\n  type: \"user\" | \"asset\" | \"ip\" | \"process\" | \"file\" | \"vulnerability\" | \"threat\" | \"connection\" | \"domain\" | \"service\";\n  risk: \"critical\" | \"high\" | \"medium\" | \"low\";\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  radius: number;\n  properties: Record<string, any>;\n  connections: string[];\n  isSelected: boolean;\n  isHighlighted: boolean;\n}\n\ninterface GraphEdge {\n  id: string;\n  source: string;\n  target: string;\n  type: \"communicates\" | \"executes\" | \"accesses\" | \"exploits\" | \"contains\" | \"originates\" | \"authenticates\";\n  weight: number;\n  isActive: boolean;\n  properties: Record<string, any>;\n}\n\ninterface GraphForce {\n  attraction: number;\n  repulsion: number;\n  damping: number;\n}\n\nconst nodeIcons = {\n  user: User,\n  asset: Server,\n  ip: Globe,\n  process: Cpu,\n  file: FileText,\n  vulnerability: AlertTriangle,\n  threat: Shield,\n  connection: Network,\n  domain: Globe,\n  service: Database\n};\n\nconst nodeColors = {\n  critical: \"#EF4444\",\n  high: \"#F97316\", \n  medium: \"#EAB308\",\n  low: \"#10B981\"\n};\n\nconst edgeColors = {\n  communicates: \"#3B82F6\",\n  executes: \"#8B5CF6\",\n  accesses: \"#10B981\",\n  exploits: \"#EF4444\",\n  contains: \"#F59E0B\",\n  originates: \"#06B6D4\",\n  authenticates: \"#84CC16\"\n};\n\nexport function KnowledgeGraph() {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [nodes, setNodes] = useState<GraphNode[]>([]);\n  const [edges, setEdges] = useState<GraphEdge[]>([]);\n  const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);\n  const [isSimulating, setIsSimulating] = useState(true);\n  const [zoom, setZoom] = useState(1);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [forces, setForces] = useState<GraphForce>({\n    attraction: 0.1,\n    repulsion: 100,\n    damping: 0.95\n  });\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRisk, setFilterRisk] = useState<string>(\"all\");\n\n  // Initialize sample cybersecurity graph data\n  useEffect(() => {\n    const sampleNodes: GraphNode[] = [\n      {\n        id: \"user-1\",\n        label: \"john.doe@company.com\",\n        type: \"user\",\n        risk: \"medium\",\n        x: 300,\n        y: 200,\n        vx: 0,\n        vy: 0,\n        radius: 25,\n        properties: { department: \"Finance\", lastLogin: \"2024-01-07 14:30\" },\n        connections: [\"asset-1\", \"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"asset-1\",\n        label: \"WORKSTATION-001\",\n        type: \"asset\",\n        risk: \"high\",\n        x: 200,\n        y: 150,\n        vx: 0,\n        vy: 0,\n        radius: 30,\n        properties: { os: \"Windows 11\", patch_level: \"Critical patches missing\" },\n        connections: [\"user-1\", \"ip-1\", \"vulnerability-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"ip-1\",\n        label: \"192.168.1.105\",\n        type: \"ip\",\n        risk: \"critical\",\n        x: 100,\n        y: 200,\n        vx: 0,\n        vy: 0,\n        radius: 20,\n        properties: { geo_location: \"Internal\", reputation: \"Clean\" },\n        connections: [\"asset-1\", \"threat-1\", \"connection-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"threat-1\",\n        label: \"APT29 Campaign\",\n        type: \"threat\",\n        risk: \"critical\",\n        x: 50,\n        y: 100,\n        vx: 0,\n        vy: 0,\n        radius: 35,\n        properties: { campaign: \"SolarWinds-related\", confidence: \"High\" },\n        connections: [\"ip-1\", \"vulnerability-1\", \"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"process-1\",\n        label: \"malware.exe\",\n        type: \"process\",\n        risk: \"critical\",\n        x: 400,\n        y: 150,\n        vx: 0,\n        vy: 0,\n        radius: 22,\n        properties: { pid: \"1337\", command_line: \"powershell.exe -enc <base64>\" },\n        connections: [\"user-1\", \"threat-1\", \"file-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"vulnerability-1\",\n        label: \"CVE-2024-1234\",\n        type: \"vulnerability\",\n        risk: \"high\",\n        x: 150,\n        y: 80,\n        vx: 0,\n        vy: 0,\n        radius: 18,\n        properties: { cvss_score: \"8.9\", description: \"Remote code execution\" },\n        connections: [\"asset-1\", \"threat-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"file-1\",\n        label: \"suspicious.dll\",\n        type: \"file\",\n        risk: \"high\",\n        x: 450,\n        y: 250,\n        vx: 0,\n        vy: 0,\n        radius: 16,\n        properties: { hash: \"a1b2c3d4...\", size: \"2.3MB\" },\n        connections: [\"process-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"connection-1\",\n        label: \"C2 Channel\",\n        type: \"connection\",\n        risk: \"critical\",\n        x: 80,\n        y: 300,\n        vx: 0,\n        vy: 0,\n        radius: 20,\n        properties: { protocol: \"HTTPS\", port: \"443\", encrypted: true },\n        connections: [\"ip-1\", \"domain-1\"],\n        isSelected: false,\n        isHighlighted: false\n      },\n      {\n        id: \"domain-1\",\n        label: \"evil-c2.com\",\n        type: \"domain\",\n        risk: \"critical\",\n        x: 180,\n        y: 350,\n        vx: 0,\n        vy: 0,\n        radius: 24,\n        properties: { registrar: \"Unknown\", creation_date: \"2024-01-01\" },\n        connections: [\"connection-1\"],\n        isSelected: false,\n        isHighlighted: false\n      }\n    ];\n\n    const sampleEdges: GraphEdge[] = [\n      {\n        id: \"edge-1\",\n        source: \"user-1\",\n        target: \"asset-1\",\n        type: \"authenticates\",\n        weight: 1,\n        isActive: true,\n        properties: { login_time: \"14:30\", success: true }\n      },\n      {\n        id: \"edge-2\",\n        source: \"asset-1\",\n        target: \"ip-1\",\n        type: \"communicates\",\n        weight: 2,\n        isActive: true,\n        properties: { bytes_transferred: \"1.2GB\", duration: \"3m\" }\n      },\n      {\n        id: \"edge-3\",\n        source: \"ip-1\",\n        target: \"threat-1\",\n        type: \"originates\",\n        weight: 3,\n        isActive: true,\n        properties: { detection_time: \"14:33\", confidence: \"95%\" }\n      },\n      {\n        id: \"edge-4\",\n        source: \"threat-1\",\n        target: \"vulnerability-1\",\n        type: \"exploits\",\n        weight: 3,\n        isActive: true,\n        properties: { exploit_kit: \"Metasploit\", success_rate: \"87%\" }\n      },\n      {\n        id: \"edge-5\",\n        source: \"user-1\",\n        target: \"process-1\",\n        type: \"executes\",\n        weight: 2,\n        isActive: true,\n        properties: { execution_time: \"14:35\", elevated: false }\n      },\n      {\n        id: \"edge-6\",\n        source: \"process-1\",\n        target: \"file-1\",\n        type: \"accesses\",\n        weight: 1,\n        isActive: true,\n        properties: { access_type: \"write\", timestamp: \"14:36\" }\n      },\n      {\n        id: \"edge-7\",\n        source: \"ip-1\",\n        target: \"connection-1\",\n        type: \"communicates\",\n        weight: 2,\n        isActive: true,\n        properties: { protocol: \"TLS 1.3\", encrypted: true }\n      },\n      {\n        id: \"edge-8\",\n        source: \"connection-1\",\n        target: \"domain-1\",\n        type: \"communicates\",\n        weight: 1,\n        isActive: true,\n        properties: { dns_resolution: \"1.2.3.4\", ttl: \"300s\" }\n      }\n    ];\n\n    setNodes(sampleNodes);\n    setEdges(sampleEdges);\n  }, []);\n\n  // Physics simulation\n  const updateSimulation = useCallback(() => {\n    if (!isSimulating) return;\n\n    setNodes(currentNodes => {\n      const newNodes = [...currentNodes];\n      \n      // Reset forces\n      newNodes.forEach(node => {\n        node.vx *= forces.damping;\n        node.vy *= forces.damping;\n      });\n\n      // Repulsion between nodes\n      for (let i = 0; i < newNodes.length; i++) {\n        for (let j = i + 1; j < newNodes.length; j++) {\n          const node1 = newNodes[i];\n          const node2 = newNodes[j];\n          \n          const dx = node2.x - node1.x;\n          const dy = node2.y - node1.y;\n          const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n          \n          const force = forces.repulsion / (distance * distance);\n          const fx = (dx / distance) * force;\n          const fy = (dy / distance) * force;\n          \n          node1.vx -= fx;\n          node1.vy -= fy;\n          node2.vx += fx;\n          node2.vy += fy;\n        }\n      }\n\n      // Attraction along edges\n      edges.forEach(edge => {\n        const source = newNodes.find(n => n.id === edge.source);\n        const target = newNodes.find(n => n.id === edge.target);\n        \n        if (source && target) {\n          const dx = target.x - source.x;\n          const dy = target.y - source.y;\n          const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n          const optimalDistance = 100;\n          \n          const force = forces.attraction * (distance - optimalDistance);\n          const fx = (dx / distance) * force;\n          const fy = (dy / distance) * force;\n          \n          source.vx += fx;\n          source.vy += fy;\n          target.vx -= fx;\n          target.vy -= fy;\n        }\n      });\n\n      // Update positions\n      newNodes.forEach(node => {\n        node.x += node.vx;\n        node.y += node.vy;\n        \n        // Boundary constraints\n        const margin = node.radius + 10;\n        if (node.x < margin) { node.x = margin; node.vx = 0; }\n        if (node.x > 580 - margin) { node.x = 580 - margin; node.vx = 0; }\n        if (node.y < margin) { node.y = margin; node.vy = 0; }\n        if (node.y > 380 - margin) { node.y = 380 - margin; node.vy = 0; }\n      });\n\n      return newNodes;\n    });\n  }, [isSimulating, forces, edges]);\n\n  useEffect(() => {\n    const interval = setInterval(updateSimulation, 50);\n    return () => clearInterval(interval);\n  }, [updateSimulation]);\n\n  const handleNodeClick = (node: GraphNode) => {\n    setSelectedNode(node);\n    setNodes(nodes => \n      nodes.map(n => ({\n        ...n,\n        isSelected: n.id === node.id,\n        isHighlighted: n.connections.includes(node.id) || n.id === node.id\n      }))\n    );\n  };\n\n  const handleZoom = (delta: number) => {\n    setZoom(prev => Math.max(0.5, Math.min(3, prev + delta)));\n  };\n\n  const resetView = () => {\n    setZoom(1);\n    setPan({ x: 0, y: 0 });\n    setSelectedNode(null);\n    setNodes(nodes => nodes.map(n => ({ ...n, isSelected: false, isHighlighted: false })));\n  };\n\n  const filteredNodes = nodes.filter(node => {\n    const matchesSearch = searchTerm === \"\" || \n      node.label.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      node.type.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRisk = filterRisk === \"all\" || node.risk === filterRisk;\n    \n    return matchesSearch && matchesRisk;\n  });\n\n  const getNodeIcon = (type: string) => {\n    const Icon = nodeIcons[type as keyof typeof nodeIcons] || Network;\n    return Icon;\n  };\n\n  return (\n    <div className=\"w-full h-full bg-[hsl(0,0%,8%)]/80 border border-[hsl(330,100%,50%)]/20 rounded-xl\">\n      {/* Controls Header */}\n      <div className=\"p-4 border-b border-[hsl(330,100%,50%)]/20\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Network className=\"w-5 h-5 text-[hsl(330,100%,50%)]\" />\n            <h3 className=\"text-lg font-semibold text-white\">Deep Knowledge Graph</h3>\n            <Badge variant=\"outline\" className=\"border-[hsl(267,100%,67%)]/20 text-[hsl(267,100%,67%)]\">\n              Neo4j Style\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsSimulating(!isSimulating)}\n              className={`${isSimulating ? 'text-green-400' : 'text-gray-400'}`}\n            >\n              {isSimulating ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleZoom(0.1)}>\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleZoom(-0.1)}>\n              <ZoomOut className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={resetView}>\n              <RotateCcw className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search nodes...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg text-white placeholder:text-gray-400 focus:outline-none focus:border-[hsl(330,100%,50%)]/40\"\n            />\n          </div>\n          \n          <select\n            value={filterRisk}\n            onChange={(e) => setFilterRisk(e.target.value)}\n            className=\"px-3 py-2 bg-[hsl(0,0%,10%)]/60 border border-[hsl(330,100%,50%)]/20 rounded-lg text-white focus:outline-none focus:border-[hsl(330,100%,50%)]/40\"\n          >\n            <option value=\"all\">All Risk Levels</option>\n            <option value=\"critical\">Critical</option>\n            <option value=\"high\">High</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"low\">Low</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"flex h-[600px]\">\n        {/* Graph Canvas */}\n        <div className=\"flex-1 relative overflow-hidden\">\n          <svg\n            ref={svgRef}\n            className=\"w-full h-full\"\n            viewBox={`${-pan.x} ${-pan.y} ${600 / zoom} ${400 / zoom}`}\n          >\n            <defs>\n              <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                <feMerge>\n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n              \n              <filter id=\"edge-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n                <feMerge>\n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n\n              <marker\n                id=\"arrowhead\"\n                markerWidth=\"10\"\n                markerHeight=\"7\"\n                refX=\"9\"\n                refY=\"3.5\"\n                orient=\"auto\"\n              >\n                <polygon\n                  points=\"0 0, 10 3.5, 0 7\"\n                  fill=\"#64748B\"\n                />\n              </marker>\n            </defs>\n\n            {/* Edges */}\n            {edges.map(edge => {\n              const source = filteredNodes.find(n => n.id === edge.source);\n              const target = filteredNodes.find(n => n.id === edge.target);\n              \n              if (!source || !target) return null;\n\n              const isHighlighted = source.isHighlighted && target.isHighlighted;\n              \n              return (\n                <g key={edge.id}>\n                  <line\n                    x1={source.x}\n                    y1={source.y}\n                    x2={target.x}\n                    y2={target.y}\n                    stroke={isHighlighted ? edgeColors[edge.type] : \"#374151\"}\n                    strokeWidth={isHighlighted ? edge.weight + 1 : 1}\n                    opacity={isHighlighted ? 0.8 : 0.4}\n                    filter={isHighlighted ? \"url(#edge-glow)\" : \"none\"}\n                    markerEnd=\"url(#arrowhead)\"\n                  />\n                  {isHighlighted && (\n                    <text\n                      x={(source.x + target.x) / 2}\n                      y={(source.y + target.y) / 2 - 5}\n                      textAnchor=\"middle\"\n                      className=\"fill-white text-xs font-medium\"\n                      filter=\"url(#glow)\"\n                    >\n                      {edge.type}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n\n            {/* Nodes */}\n            {filteredNodes.map(node => {\n              const Icon = getNodeIcon(node.type);\n              \n              return (\n                <g key={node.id}>\n                  <circle\n                    cx={node.x}\n                    cy={node.y}\n                    r={node.radius}\n                    fill={nodeColors[node.risk]}\n                    stroke={node.isSelected ? \"#FFFFFF\" : nodeColors[node.risk]}\n                    strokeWidth={node.isSelected ? 3 : 1}\n                    opacity={node.isHighlighted || !selectedNode ? 0.9 : 0.3}\n                    filter={node.isSelected || node.isHighlighted ? \"url(#glow)\" : \"none\"}\n                    className=\"cursor-pointer transition-all duration-200\"\n                    onClick={() => handleNodeClick(node)}\n                  />\n                  \n                  {/* Node Icon */}\n                  <foreignObject\n                    x={node.x - 8}\n                    y={node.y - 8}\n                    width=\"16\"\n                    height=\"16\"\n                    className=\"pointer-events-none\"\n                  >\n                    <Icon className=\"w-4 h-4 text-white\" />\n                  </foreignObject>\n                  \n                  {/* Node Label */}\n                  <text\n                    x={node.x}\n                    y={node.y + node.radius + 15}\n                    textAnchor=\"middle\"\n                    className=\"fill-white text-xs font-medium pointer-events-none\"\n                    opacity={node.isHighlighted || !selectedNode ? 1 : 0.5}\n                  >\n                    {node.label.length > 15 ? node.label.substring(0, 15) + \"...\" : node.label}\n                  </text>\n\n                  {/* Risk Badge */}\n                  {(node.isSelected || node.isHighlighted) && (\n                    <rect\n                      x={node.x + node.radius - 5}\n                      y={node.y - node.radius - 5}\n                      width=\"20\"\n                      height=\"12\"\n                      rx=\"6\"\n                      fill={nodeColors[node.risk]}\n                      opacity=\"0.9\"\n                    />\n                  )}\n                  {(node.isSelected || node.isHighlighted) && (\n                    <text\n                      x={node.x + node.radius + 5}\n                      y={node.y - node.radius + 2}\n                      textAnchor=\"middle\"\n                      className=\"fill-white text-xs font-bold\"\n                    >\n                      {node.risk.charAt(0).toUpperCase()}\n                    </text>\n                  )}\n                </g>\n              );\n            })}\n          </svg>\n\n          {/* Graph Stats Overlay */}\n          <div className=\"absolute top-4 left-4 bg-[hsl(0,0%,10%)]/80 backdrop-blur-sm rounded-lg p-3 border border-[hsl(330,100%,50%)]/20\">\n            <div className=\"text-xs text-gray-400 space-y-1\">\n              <div>Nodes: <span className=\"text-white font-medium\">{filteredNodes.length}</span></div>\n              <div>Edges: <span className=\"text-white font-medium\">{edges.length}</span></div>\n              <div>Zoom: <span className=\"text-white font-medium\">{(zoom * 100).toFixed(0)}%</span></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Node Details Panel */}\n        {selectedNode && (\n          <motion.div\n            initial={{ x: 300, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: 300, opacity: 0 }}\n            className=\"w-80 border-l border-[hsl(330,100%,50%)]/20 bg-[hsl(0,0%,6%)]/60 p-4 overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-semibold text-white\">Node Details</h4>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedNode(null)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                ✕\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                {(() => {\n                  const Icon = getNodeIcon(selectedNode.type);\n                  return <Icon className=\"w-8 h-8 text-[hsl(330,100%,50%)]\" />;\n                })()}\n                <div>\n                  <div className=\"text-white font-medium\">{selectedNode.label}</div>\n                  <div className=\"text-sm text-gray-400 capitalize\">{selectedNode.type}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={`${\n                  selectedNode.risk === 'critical' ? 'bg-red-500/20 text-red-400' :\n                  selectedNode.risk === 'high' ? 'bg-orange-500/20 text-orange-400' :\n                  selectedNode.risk === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :\n                  'bg-green-500/20 text-green-400'\n                }`}>\n                  {selectedNode.risk.toUpperCase()}\n                </Badge>\n                <Badge variant=\"outline\" className=\"border-[hsl(330,100%,50%)]/20 text-[hsl(330,100%,50%)]\">\n                  {selectedNode.connections.length} connections\n                </Badge>\n              </div>\n\n              <div className=\"border-t border-gray-700 pt-4\">\n                <h5 className=\"text-sm font-medium text-gray-300 mb-2\">Properties</h5>\n                <div className=\"space-y-2\">\n                  {Object.entries(selectedNode.properties).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-400 capitalize\">{key.replace('_', ' ')}:</span>\n                      <span className=\"text-white\">{String(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-700 pt-4\">\n                <h5 className=\"text-sm font-medium text-gray-300 mb-2\">Connected Nodes</h5>\n                <div className=\"space-y-1\">\n                  {selectedNode.connections.map(connId => {\n                    const connectedNode = nodes.find(n => n.id === connId);\n                    if (!connectedNode) return null;\n                    \n                    return (\n                      <div\n                        key={connId}\n                        className=\"text-sm text-gray-300 hover:text-white cursor-pointer p-2 rounded bg-[hsl(0,0%,10%)]/40 hover:bg-[hsl(0,0%,10%)]/60 transition-colors\"\n                        onClick={() => handleNodeClick(connectedNode)}\n                      >\n                        {connectedNode.label}\n                        <span className=\"text-xs text-gray-500 ml-2\">({connectedNode.type})</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </div>\n\n      {/* Legend */}\n      <div className=\"p-4 border-t border-[hsl(330,100%,50%)]/20 bg-[hsl(0,0%,6%)]/40\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h6 className=\"text-sm font-medium text-gray-300 mb-2\">Risk Levels</h6>\n            <div className=\"flex space-x-3\">\n              {Object.entries(nodeColors).map(([risk, color]) => (\n                <div key={risk} className=\"flex items-center space-x-1\">\n                  <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: color }}></div>\n                  <span className=\"text-xs text-gray-400 capitalize\">{risk}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <h6 className=\"text-sm font-medium text-gray-300 mb-2\">Relationships</h6>\n            <div className=\"flex flex-wrap gap-2\">\n              {Object.entries(edgeColors).slice(0, 4).map(([type, color]) => (\n                <div key={type} className=\"flex items-center space-x-1\">\n                  <div className=\"w-3 h-0.5\" style={{ backgroundColor: color }}></div>\n                  <span className=\"text-xs text-gray-400\">{type}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25471},"NewFrontend/alpha-platform/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"NewFrontend/alpha-platform/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"NewFrontend/alpha-platform/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"NewFrontend/alpha-platform/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"NewFrontend/alpha-platform/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"NewFrontend/alpha-platform/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"NewFrontend/alpha-platform/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"NewFrontend/alpha-platform/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"NewFrontend/alpha-platform/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"NewFrontend/alpha-platform/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"NewFrontend/alpha-platform/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"NewFrontend/alpha-platform/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"NewFrontend/alpha-platform/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"NewFrontend/alpha-platform/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"NewFrontend/alpha-platform/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"NewFrontend/alpha-platform/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"NewFrontend/alpha-platform/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"NewFrontend/alpha-platform/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"NewFrontend/alpha-platform/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"NewFrontend/alpha-platform/client/src/components/ui/threat-visualization.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect, useRef } from \"react\"\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Shield, Zap, AlertTriangle, Eye, Target, Activity, Brain, TrendingUp, Clock, CheckCircle, X } from 'lucide-react';\nimport { Button } from './button';\n\ninterface DataSource {\n  id: string\n  name: string\n  position: { x: number; y: number }\n  isActive: boolean\n  color: string\n}\n\ninterface ThreatFlow {\n  id: string\n  sourceId: string\n  progress: number\n  classification: \"true-positive\" | \"false-positive\" | \"manual\" | null\n  phase: \"to-brain\" | \"processing\" | \"to-classification\" | \"completed\"\n  color: string\n}\n\ninterface ClassificationStack {\n  \"true-positive\": string[]\n  \"false-positive\": string[]\n  \"manual\": string[]\n}\n\nconst dataSources: DataSource[] = [\n  { id: \"1\", name: \"NCFW\", position: { x: 60, y: 30 }, isActive: false, color: \"#3B82F6\" },\n  { id: \"2\", name: \"Amazon\", position: { x: 30, y: 60 }, isActive: false, color: \"#10B981\" },\n  { id: \"3\", name: \"Azure\", position: { x: 30, y: 90 }, isActive: false, color: \"#8B5CF6\" },\n  { id: \"4\", name: \"Office 365\", position: { x: 30, y: 120 }, isActive: false, color: \"#F59E0B\" },\n  { id: \"5\", name: \"SharePoint\", position: { x: 30, y: 150 }, isActive: false, color: \"#EF4444\" },\n  { id: \"6\", name: \"Apache\", position: { x: 30, y: 180 }, isActive: false, color: \"#06B6D4\" },\n  { id: \"7\", name: \"Prisma Cloud\", position: { x: 30, y: 210 }, isActive: false, color: \"#84CC16\" },\n]\n\nexport function ThreatVisualization() {\n  const [sources, setSources] = useState<DataSource[]>(dataSources)\n  const [threatFlows, setThreatFlows] = useState<ThreatFlow[]>([])\n  const [classificationStacks, setClassificationStacks] = useState<ClassificationStack>({\n    \"true-positive\": [],\n    \"false-positive\": [],\n    \"manual\": [],\n  })\n  const [rotationAngle, setRotationAngle] = useState(0)\n  const [outputWires, setOutputWires] = useState({ tp: false, fp: false, manual: false })\n  const [threatCount, setThreatCount] = useState(0)\n  const svgRef = useRef<SVGSVGElement>(null)\n  const [showAgentPopup, setShowAgentPopup] = useState(false);\n\n  const agentAnalysisData = {\n    status: \"Active\",\n    confidence: 96.8,\n    totalEvents: \"2.3M\",\n    processedToday: 14672,\n    threatsStopped: 847,\n    falsePositives: 23,\n    avgResponseTime: \"1.2s\",\n    models: [\n      { name: \"Threat Detection Engine\", accuracy: 94.2, status: \"optimal\" },\n      { name: \"Behavioral Analytics\", accuracy: 91.7, status: \"active\" },\n      { name: \"ML Anomaly Detector\", accuracy: 89.3, status: \"learning\" }\n    ],\n    recentActions: [\n      { type: \"Blocked\", description: \"Suspicious PowerShell execution\", time: \"2 min ago\" },\n      { type: \"Quarantined\", description: \"Potential malware detected\", time: \"5 min ago\" },\n      { type: \"Analyzed\", description: \"Network anomaly investigation\", time: \"12 min ago\" }\n    ]\n  };\n\n  // ===== Layout =====\n  // RIGHT SIDE (unchanged)\n  const truePositiveCenter = { x: 500, y: 80 }\n  const falsePositiveCenter  = { x: 500, y: 200 }\n  const manualCenter         = { x: 500, y: 340 }\n\n  // Canvas width stays fixed; height will be computed dynamically\n  const CANVAS_W = 620\n\n  // Brain\n  const brainCenter = { x: 260, y: 220 }\n\n  // Left sources panel geometry\n  const rowHeight = 24\n  const leftPanelWidth  = 180\n  const leftPanelX      = 120 - leftPanelWidth\n  const leftPanelY      = 40\n  const leftPanelHeight = 64 + sources.length * rowHeight + 32\n\n  // Headings (unchanged)\n  const headingBoxWidth  = 130\n  const headingBoxHeight = 28\n  const tpHeadingX       = truePositiveCenter.x + 12\n  const tpHeadingY       = leftPanelY\n  const fpHeadingX       = falsePositiveCenter.x + 12\n  const fpHeadingY       = falsePositiveCenter.y - headingBoxHeight / 2\n  const manualHeadingX   = manualCenter.x + 12\n  const manualHeadingY   = manualCenter.y - headingBoxHeight / 2\n\n  // —— Bottom 4 cards: just below the lowest content ——\n  const bottomCardsX      = leftPanelX\n  const bottomGap         = 16 // small visual gap to the figure above\n  const figureBottom = Math.max(\n    leftPanelY + leftPanelHeight,       // bottom of sources panel\n    brainCenter.y + 80,                 // brain lower extent\n    manualHeadingY + headingBoxHeight,  // lowest right heading bottom\n  )\n  const bottomCardsY      = figureBottom + bottomGap\n  const bottomCardsWidth  = CANVAS_W - bottomCardsX - 20\n  const bottomCardsHeight = 70\n\n  // === Dynamic canvas/container height to remove bottom empty gap ===\n  const bottomPadding     = 46\n  const CANVAS_H          = bottomCardsY + bottomCardsHeight + bottomPadding\n  const containerHeight   = CANVAS_H; // keeps visual size, no scaling\n\n  // ===== Effects (logic unchanged) =====\n  useEffect(() => {\n    const t = setInterval(() => setRotationAngle((p) => (p + 1) % 360), 60)\n    return () => clearInterval(t)\n  }, [])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      const randomSource = sources[Math.floor(Math.random() * sources.length)]\n      const newThreat: ThreatFlow = {\n        id: `threat-${Date.now()}`,\n        sourceId: randomSource.id,\n        progress: 0,\n        classification: null,\n        phase: \"to-brain\",\n        color: randomSource.color,\n      }\n      setSources((prev) => prev.map((s) => (s.id === randomSource.id ? { ...s, isActive: true } : s)))\n      setThreatFlows((prev) => [...prev, newThreat])\n      setThreatCount((prev) => prev + 1)\n      setTimeout(() => {\n        setSources((prev) => prev.map((s) => (s.id === randomSource.id ? { ...s, isActive: false } : s)))\n      }, 2000)\n    }, 1800)\n    return () => clearInterval(t)\n  }, [sources])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setThreatFlows((prev) =>\n        prev.map((flow) => {\n          if (flow.phase === \"to-brain\" && flow.progress >= 100) {\n            const r = Math.random()\n            const classification: ThreatFlow[\"classification\"] =\n              r > 0.6 ? \"true-positive\" : r > 0.3 ? \"false-positive\" : \"manual\"\n\n            if (classification === \"true-positive\") {\n              setOutputWires((p) => ({ ...p, tp: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, tp: false })), 2000)\n            } else if (classification === \"false-positive\") {\n              setOutputWires((p) => ({ ...p, fp: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, fp: false })), 2000)\n            } else {\n              setOutputWires((p) => ({ ...p, manual: true }))\n              setTimeout(() => setOutputWires((p) => ({ ...p, manual: false })), 2000)\n            }\n\n            return { ...flow, classification, phase: \"to-classification\", progress: 0 }\n          }\n\n          if (flow.phase === \"to-classification\" && flow.progress >= 100) {\n            if (flow.classification) {\n              setClassificationStacks((prevStacks) => ({\n                ...prevStacks,\n                [flow.classification!]: [...prevStacks[flow.classification!].slice(-4), flow.sourceId],\n              }))\n            }\n            return { ...flow, phase: \"completed\" }\n          }\n\n          if (flow.phase === \"completed\") return flow\n          return { ...flow, progress: Math.min(flow.progress + 3, 100) }\n        }),\n      )\n    }, 50)\n    return () => clearInterval(t)\n  }, [])\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setThreatFlows((prev) =>\n        prev.filter((f) => f.phase !== \"completed\" || Date.now() - Number.parseInt(f.id.split(\"-\")[1]) < 1000),\n      )\n    }, 1000)\n    return () => clearInterval(t)\n  }, [])\n\n  // ===== Paths =====\n  const getSourceWirePath = (source: DataSource) => {\n    const startX = 120\n    const startY = source.position.y + 60\n    const endX = brainCenter.x - 45\n    const endY = brainCenter.y\n    const c1x = startX + 50\n    const c1y = startY + (endY - startY) * 0.3\n    const c2x = endX - 40\n    const c2y = endY + (startY - endY) * 0.2\n    return `M ${startX} ${startY} C ${c1x} ${c1y} ${c2x} ${c2y} ${endX} ${endY}`\n  }\n\n  const getOutputPath = (target: { x: number; y: number }) => {\n    const startX = brainCenter.x + 45\n    const startY = brainCenter.y\n    const endX = target.x - 16\n    const endY = target.y\n    const c1x = startX + 200\n    const c1y = startY + (endY - startY) * 0.6\n    const c2x = endX - 40\n    const c2y = endY + (startY - endY) * 0.2\n    return `M ${startX} ${startY} C ${c1x} ${c1y} ${c2x} ${c2y} ${endX} ${endY}`\n  }\n\n  const renderFloatingStack = (\n    center: { x: number; y: number },\n    items: string[],\n    color: string,\n    labelMap: (id: string) => string,\n  ) => {\n    const max = 5\n    const list = items.slice(-max)\n    const startX = center.x + 18\n    const startY = center.y + 22\n    const step = 12\n    return (\n      <g>\n        {list.map((id, i) => {\n          const y = startY + i * step\n          const text = labelMap(id)\n          const w = Math.max(28, Math.min(160, text.length * 6.6))\n          return (\n            <g key={`${center.x}-${center.y}-${i}`} transform={`translate(${startX}, ${y})`}>\n              <rect\n                x={0}\n                y={-8}\n                rx={4}\n                ry={4}\n                width={w}\n                height={16}\n                fill=\"rgba(148,163,184,0.18)\"\n                stroke={color}\n                strokeOpacity={0.45}\n                strokeWidth={0.8}\n              />\n              <text\n                x={6}\n                y={4}\n                fontSize=\"10\"\n                fill={color}\n                style={{ fontFamily: \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\" }}\n              >\n                {text}\n              </text>\n            </g>\n          )\n        })}\n      </g>\n    )\n  }\n\n  return (\n    <div\n      className=\"w-full bg-gradient-to-r from-[hsl(220,15%,5%)] via-[hsl(220,20%,8%)] to-[hsl(220,15%,5%)] font-mono overflow-hidden relative rounded-xl border border-[hsl(330,100%,50%)]/20\"\n      style={{ height: `${containerHeight}px` }}  // <-- dynamic height removes bottom gap\n    >\n      <svg\n        ref={svgRef}\n        width=\"100%\"\n        height=\"100%\"\n        viewBox={`0 0 ${CANVAS_W} ${CANVAS_H}`}  // matches dynamic canvas height\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <filter id=\"glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n          <filter id=\"strongGlow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feGaussianBlur stdDeviation=\"5\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n          <linearGradient id=\"inactiveGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"#374151\" stopOpacity=\"0.3\" />\n            <stop offset=\"50%\" stopColor=\"#4B5563\" stopOpacity=\"0.5\" />\n            <stop offset=\"100%\" stopColor=\"#374151\" stopOpacity=\"0.3\" />\n          </linearGradient>\n          <radialGradient id=\"brainGradient\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n            <stop offset=\"0%\" stopColor=\"hsl(220,15%,5%)\" />\n            <stop offset=\"50%\" stopColor=\"hsl(285,75%,27%)\" />\n            <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" />\n          </radialGradient>\n          <linearGradient id=\"outputGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" stopColor=\"hsl(220,15%,5%)\" stopOpacity=\"0.8\" />\n            <stop offset=\"50%\" stopColor=\"hsl(285,75%,27%)\" stopOpacity=\"1\" />\n            <stop offset=\"100%\" stopColor=\"hsl(330,100%,50%)\" stopOpacity=\"0.8\" />\n          </linearGradient>\n        </defs>\n\n        {/* Input wires */}\n        {sources.map((source) => {\n          const wirePath = getSourceWirePath(source)\n          return (\n            <g key={`wire-${source.id}`}>\n              <path\n                d={wirePath}\n                stroke={source.isActive ? source.color : \"url(#inactiveGradient)\"}\n                strokeWidth={source.isActive ? 3 : 2}\n                fill=\"none\"\n                opacity={source.isActive ? 0.9 : 0.4}\n                filter={source.isActive ? \"url(#glow)\" : \"none\"}\n              />\n              {threatFlows\n                .filter((flow) => flow.sourceId === source.id && flow.phase === \"to-brain\")\n                .map((flow) => {\n                  const progress = flow.progress / 100\n                  return (\n                    <circle key={flow.id} r={4} fill={flow.color} filter=\"url(#strongGlow)\" opacity={0.9}>\n                      <animateMotion\n                        dur=\"3s\"\n                        begin=\"0s\"\n                        fill=\"freeze\"\n                        path={wirePath}\n                        keyPoints={`${progress};${progress}`}\n                        keyTimes=\"0;1\"\n                      />\n                    </circle>\n                  )\n                })}\n            </g>\n          )\n        })}\n\n        {/* Output wires (right side unchanged) */}\n        <path d={getOutputPath(truePositiveCenter)} stroke={outputWires.tp ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.tp ? 4 : 2} fill=\"none\" opacity={outputWires.tp ? 1 : 0.4} filter={outputWires.tp ? \"url(#glow)\" : \"none\"} />\n        <path d={getOutputPath(falsePositiveCenter)} stroke={outputWires.fp ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.fp ? 4 : 2} fill=\"none\" opacity={outputWires.fp ? 1 : 0.4} filter={outputWires.fp ? \"url(#glow)\" : \"none\"} />\n        <path d={getOutputPath(manualCenter)} stroke={outputWires.manual ? \"url(#outputGradient)\" : \"url(#inactiveGradient)\"} strokeWidth={outputWires.manual ? 4 : 2} fill=\"none\" opacity={outputWires.manual ? 1 : 0.4} filter={outputWires.manual ? \"url(#glow)\" : \"none\"} />\n\n        {/* Brain */}\n        <g transform={`translate(${brainCenter.x}, ${brainCenter.y})`}>\n          {Array.from({ length: 16 }).map((_, i) => {\n            const base = (i * 22.5 * Math.PI) / 180\n            const rot = base + (rotationAngle * Math.PI) / 180\n            const z = Math.sin(rot * 2) * 0.7\n            const radius = 50 + Math.sin(i * 0.8) * 5\n            const x = Math.cos(rot) * radius * (1 + z * 0.3)\n            const y = Math.sin(rot) * radius * (0.6 + z * 0.4)\n            const scale = 1 + z * 0.5\n            return <circle key={i} cx={x} cy={y} r={1.5 * scale} fill=\"hsl(330,100%,50%)\" opacity={0.6 + z * 0.3} filter=\"url(#glow)\" />\n          })}\n          <circle cx=\"0\" cy=\"0\" r=\"40\" fill=\"url(#brainGradient)\" stroke=\"hsl(330,100%,50%)\" strokeWidth=\"2\" filter=\"url(#strongGlow)\" opacity=\"0.8\" />\n          {Array.from({ length: 8 }).map((_, i) => {\n            const a = (i * 45 * Math.PI) / 180\n            return <line key={i} x1={Math.cos(a) * 15} y1={Math.sin(a) * 15} x2={Math.cos(a + Math.PI / 4) * 25} y2={Math.sin(a + Math.PI / 4) * 25} stroke=\"hsl(285,75%,27%)\" strokeWidth=\"1\" opacity=\"0.7\" />\n          })}\n          {/* Central AI Core - Clickable */}\n          <motion.div\n            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24 rounded-full bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] flex items-center justify-center glow-button z-10 cursor-pointer hover:scale-110 transition-all\"\n            animate={{\n              scale: [1, 1.1, 1],\n              boxShadow: [\n                \"0 0 20px rgba(255,20,147,0.5)\",\n                \"0 0 40px rgba(255,20,147,0.8)\",\n                \"0 0 20px rgba(255,20,147,0.5)\"\n              ]\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            onClick={() => setShowAgentPopup(true)}\n            whileHover={{ scale: 1.15 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Brain className=\"w-12 h-12 text-white\" />\n          </motion.div>\n        </g>\n\n        {/* Sources panel */}\n        <foreignObject x={leftPanelX} y={leftPanelY} width={leftPanelWidth} height={leftPanelHeight}>\n          <div className=\"bg-slate-900/30 backdrop-blur-md rounded-lg p-3 border border-pink-500/30 shadow-xl w-[180px]\">\n            <h3 className=\"text-[11px] font-bold text-pink-200 mb-2 flex items-center gap-1\">\n              <div className=\"w-1 h-1 bg-pink-400 rounded-full animate-pulse\"></div>\n              SOURCES\n            </h3>\n            <div className=\"space-y-1\">\n              {sources.map((source) => (\n                <div\n                  key={source.id}\n                  className={`relative flex items-center justify-between px-2 py-1 rounded text-[11px] transition-all duration-300 ${\n                    source.isActive ? \"bg-slate-800/40 border-l-2 shadow-lg\" : \"bg-slate-800/20 border border-slate-700/30\"\n                  }`}\n                  style={{ borderLeftColor: source.isActive ? source.color : \"transparent\" }}\n                >\n                  <span className={`font-medium truncate ${source.isActive ? \"text-white\" : \"text-slate-300\"}`}>\n                    {source.name}\n                  </span>\n                  <div\n                    className={`w-2 h-2 rounded-full transition-all duration-300 ${source.isActive ? \"shadow-lg\" : \"\"}`}\n                    style={{\n                      backgroundColor: source.isActive ? source.color : \"#64748B\",\n                      boxShadow: source.isActive ? `0 0 8px ${source.color}` : \"none\",\n                    }}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </foreignObject>\n\n        {/* Right headings (unchanged) */}\n        <foreignObject x={tpHeadingX} y={tpHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-red-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-red-300\">TRUE+</h3>\n            </div>\n          </div>\n        </foreignObject>\n        <foreignObject x={fpHeadingX} y={fpHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-yellow-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-yellow-300\">FALSE+</h3>\n            </div>\n          </div>\n        </foreignObject>\n        <foreignObject x={manualHeadingX} y={manualHeadingY} width={headingBoxWidth} height={headingBoxHeight}>\n          <div className=\"bg-slate-900/35 backdrop-blur-md rounded-md px-3 py-1 border border-blue-500/30 shadow\">\n            <div className=\"flex items-center justify-center gap-1\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <h3 className=\"text-[11px] font-bold text-blue-300\">MANUAL</h3>\n            </div>\n          </div>\n        </foreignObject>\n\n        {/* Floating stacks (unchanged) */}\n        {renderFloatingStack(truePositiveCenter, classificationStacks[\"true-positive\"], \"#fca5a5\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n        {renderFloatingStack(falsePositiveCenter, classificationStacks[\"false-positive\"], \"#fde68a\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n        {renderFloatingStack(manualCenter, classificationStacks[\"manual\"], \"#93c5fd\", id => sources.find(s => s.id === id)?.name ?? \"???\")}\n\n        {/* Bottom 4 info cards — just under the figure */}\n        <foreignObject x={bottomCardsX} y={bottomCardsY} width={bottomCardsWidth} height={bottomCardsHeight}>\n          <div className=\"flex items-stretch gap-3\">\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-cyan-300 leading-none\">22</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Events</div>\n              <div className=\"text-[11px] text-cyan-300 font-medium mt-1 leading-none\">GB/24H</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-green-300 leading-none\">36</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Data</div>\n              <div className=\"text-[11px] text-green-300 font-medium mt-1 leading-none\">TB/24H</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-orange-300 leading-none\">12</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Open</div>\n            </div>\n            <div className=\"bg-slate-900/30 backdrop-blur-md rounded p-3 border border-pink-500/30 shadow min-w-[120px]\">\n              <div className=\"text-sm font-bold text-purple-300 leading-none\">157K</div>\n              <div className=\"text-[11px] text-pink-200 mt-1 leading-none\">Prevented</div>\n            </div>\n          </div>\n        </foreignObject>\n      </svg>\n\n      {/* Agent Analysis Popup Modal */}\n      <AnimatePresence>\n        {showAgentPopup && (\n          <motion.div \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            onClick={() => setShowAgentPopup(false)}\n          >\n            <motion.div \n              initial={{ scale: 0.8, opacity: 0, y: 20 }}\n              animate={{ scale: 1, opacity: 1, y: 0 }}\n              exit={{ scale: 0.8, opacity: 0, y: 20 }}\n              className=\"bg-black/80 backdrop-blur-md border border-[hsl(330,100%,50%)]/30 rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto\"\n              style={{\n                background: \"linear-gradient(135deg, rgba(255,20,147,0.05) 0%, rgba(138,43,226,0.08) 50%, rgba(0,0,0,0.9) 100%)\"\n              }}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] bg-clip-text text-transparent\">\n                  AI Agent Analysis Center\n                </h2>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setShowAgentPopup(false)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </Button>\n              </div>\n\n              {/* Agent Status Overview */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"bg-[hsl(330,100%,50%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Agent Status</span>\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-400\">{agentAnalysisData.status}</div>\n                  <div className=\"text-xs text-gray-400\">Confidence: {agentAnalysisData.confidence}%</div>\n                </div>\n\n                <div className=\"bg-[hsl(267,100%,67%)]/10 border border-[hsl(267,100%,67%)]/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Events Today</span>\n                    <Activity className=\"w-4 h-4 text-[hsl(267,100%,67%)]\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">{agentAnalysisData.processedToday.toLocaleString()}</div>\n                  <div className=\"text-xs text-gray-400\">Total: {agentAnalysisData.totalEvents}</div>\n                </div>\n\n                <div className=\"bg-green-400/10 border border-green-400/20 rounded-xl p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-300\">Threats Blocked</span>\n                    <Shield className=\"w-4 h-4 text-green-400\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-400\">{agentAnalysisData.threatsStopped}</div>\n                  <div className=\"text-xs text-gray-400\">FP Rate: {((agentAnalysisData.falsePositives / agentAnalysisData.threatsStopped) * 100).toFixed(1)}%</div>\n                </div>\n              </div>\n\n              {/* AI Models Performance */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Brain className=\"w-5 h-5 text-[hsl(267,100%,67%)] mr-2\" />\n                  Active AI Models\n                </h3>\n                <div className=\"space-y-3\">\n                  {agentAnalysisData.models.map((model, index) => (\n                    <div key={index} className=\"bg-[hsl(0,0%,8%)]/50 border border-[hsl(330,100%,50%)]/10 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-white\">{model.name}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs ${\n                          model.status === 'optimal' ? 'bg-green-400/10 text-green-400' :\n                          model.status === 'active' ? 'bg-[hsl(330,100%,50%)]/10 text-[hsl(330,100%,50%)]' :\n                          'bg-yellow-400/10 text-yellow-400'\n                        }`}>\n                          {model.status}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                          <div \n                            className=\"bg-gradient-to-r from-[hsl(330,100%,50%)] to-[hsl(267,100%,67%)] h-2 rounded-full transition-all duration-1000\"\n                            style={{ width: `${model.accuracy}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-[hsl(330,100%,50%)] font-medium\">{model.accuracy}%</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Recent Actions */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Clock className=\"w-5 h-5 text-[hsl(330,100%,50%)] mr-2\" />\n                  Recent Actions\n                </h3>\n                <div className=\"space-y-2\">\n                  {agentAnalysisData.recentActions.map((action, index) => (\n                    <div key={index} className=\"bg-[hsl(0,0%,8%)]/50 border border-[hsl(330,100%,50%)]/10 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            action.type === 'Blocked' ? 'bg-red-400' :\n                            action.type === 'Quarantined' ? 'bg-orange-400' :\n                            'bg-blue-400'\n                          }`} />\n                          <div>\n                            <span className={`text-sm font-medium ${\n                              action.type === 'Blocked' ? 'text-red-400' :\n                              action.type === 'Quarantined' ? 'text-orange-400' :\n                              'text-blue-400'\n                            }`}>\n                              {action.type}\n                            </span>\n                            <p className=\"text-xs text-gray-300\">{action.description}</p>\n                          </div>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">{action.time}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Performance Metrics */}\n              <div className=\"bg-gradient-to-r from-[hsl(330,100%,50%)]/10 to-[hsl(267,100%,67%)]/10 border border-[hsl(330,100%,50%)]/20 rounded-xl p-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-[hsl(330,100%,50%)]\">{agentAnalysisData.avgResponseTime}</div>\n                    <div className=\"text-xs text-gray-400\">Avg Response</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">99.2%</div>\n                    <div className=\"text-xs text-gray-400\">Uptime</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-[hsl(267,100%,67%)]\">87%</div>\n                    <div className=\"text-xs text-gray-400\">Auto-resolved</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-400\">2.3ms</div>\n                    <div className=\"text-xs text-gray-400\">Latency</div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}","size_bytes":30166},"NewFrontend/alpha-platform/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"NewFrontend/alpha-platform/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"NewFrontend/alpha-platform/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"NewFrontend/alpha-platform/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"NewFrontend/alpha-platform/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}